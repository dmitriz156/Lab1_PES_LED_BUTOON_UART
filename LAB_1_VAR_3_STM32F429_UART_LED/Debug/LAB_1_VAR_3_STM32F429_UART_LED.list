
LAB_1_VAR_3_STM32F429_UART_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ca0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08005e50  08005e50  00015e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d4  080060d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080060d4  080060d4  000160d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060dc  080060dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060dc  080060dc  000160dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060e0  080060e0  000160e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080060e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000144  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001b4  200001b4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012344  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000294f  00000000  00000000  000323e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  00034d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc0  00000000  00000000  00035c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a3e  00000000  00000000  000369d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012956  00000000  00000000  0005c40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6fcc  00000000  00000000  0006ed64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155d30  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045a4  00000000  00000000  00155d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005e38 	.word	0x08005e38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005e38 	.word	0x08005e38

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	; 0x30
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80005d8:	463b      	mov	r3, r7
 80005da:	2220      	movs	r2, #32
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 faf8 	bl	8004bd4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005e4:	4b36      	ldr	r3, [pc, #216]	; (80006c0 <MX_ADC1_Init+0xfc>)
 80005e6:	4a37      	ldr	r2, [pc, #220]	; (80006c4 <MX_ADC1_Init+0x100>)
 80005e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ea:	4b35      	ldr	r3, [pc, #212]	; (80006c0 <MX_ADC1_Init+0xfc>)
 80005ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f2:	4b33      	ldr	r3, [pc, #204]	; (80006c0 <MX_ADC1_Init+0xfc>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005f8:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <MX_ADC1_Init+0xfc>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005fe:	4b30      	ldr	r3, [pc, #192]	; (80006c0 <MX_ADC1_Init+0xfc>)
 8000600:	2200      	movs	r2, #0
 8000602:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000604:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <MX_ADC1_Init+0xfc>)
 8000606:	2200      	movs	r2, #0
 8000608:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800060c:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <MX_ADC1_Init+0xfc>)
 800060e:	2200      	movs	r2, #0
 8000610:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <MX_ADC1_Init+0xfc>)
 8000614:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <MX_ADC1_Init+0x104>)
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000618:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <MX_ADC1_Init+0xfc>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <MX_ADC1_Init+0xfc>)
 8000620:	2201      	movs	r2, #1
 8000622:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <MX_ADC1_Init+0xfc>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062c:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <MX_ADC1_Init+0xfc>)
 800062e:	2201      	movs	r2, #1
 8000630:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000632:	4823      	ldr	r0, [pc, #140]	; (80006c0 <MX_ADC1_Init+0xfc>)
 8000634:	f000 fe68 	bl	8001308 <HAL_ADC_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800063e:	f000 fbd8 	bl	8000df2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_ADC1_Init+0x108>)
 8000644:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000646:	2301      	movs	r3, #1
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800064a:	2300      	movs	r3, #0
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	4619      	mov	r1, r3
 8000654:	481a      	ldr	r0, [pc, #104]	; (80006c0 <MX_ADC1_Init+0xfc>)
 8000656:	f001 f853 	bl	8001700 <HAL_ADC_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000660:	f000 fbc7 	bl	8000df2 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_TEMPSENSOR;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_ADC1_Init+0x108>)
 8000666:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8000668:	2301      	movs	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000670:	2303      	movs	r3, #3
 8000672:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <MX_ADC1_Init+0x10c>)
 800067a:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <MX_ADC1_Init+0xfc>)
 800068e:	f001 fbbd 	bl	8001e0c <HAL_ADCEx_InjectedConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000698:	f000 fbab 	bl	8000df2 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VREFINT;
 800069c:	2311      	movs	r3, #17
 800069e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_ADC1_Init+0xfc>)
 80006aa:	f001 fbaf 	bl	8001e0c <HAL_ADCEx_InjectedConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80006b4:	f000 fb9d 	bl	8000df2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3730      	adds	r7, #48	; 0x30
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000008c 	.word	0x2000008c
 80006c4:	40012000 	.word	0x40012000
 80006c8:	0f000001 	.word	0x0f000001
 80006cc:	10000012 	.word	0x10000012
 80006d0:	000f0001 	.word	0x000f0001

080006d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <HAL_ADC_MspInit+0x48>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d115      	bne.n	8000712 <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <HAL_ADC_MspInit+0x4c>)
 80006ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ee:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <HAL_ADC_MspInit+0x4c>)
 80006f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f4:	6453      	str	r3, [r2, #68]	; 0x44
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_ADC_MspInit+0x4c>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2012      	movs	r0, #18
 8000708:	f001 fe19 	bl	800233e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800070c:	2012      	movs	r0, #18
 800070e:	f001 fe32 	bl	8002376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40012000 	.word	0x40012000
 8000720:	40023800 	.word	0x40023800

08000724 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b39      	ldr	r3, [pc, #228]	; (8000824 <MX_GPIO_Init+0x100>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a38      	ldr	r2, [pc, #224]	; (8000824 <MX_GPIO_Init+0x100>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b36      	ldr	r3, [pc, #216]	; (8000824 <MX_GPIO_Init+0x100>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b32      	ldr	r3, [pc, #200]	; (8000824 <MX_GPIO_Init+0x100>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a31      	ldr	r2, [pc, #196]	; (8000824 <MX_GPIO_Init+0x100>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <MX_GPIO_Init+0x100>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b2b      	ldr	r3, [pc, #172]	; (8000824 <MX_GPIO_Init+0x100>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <MX_GPIO_Init+0x100>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b28      	ldr	r3, [pc, #160]	; (8000824 <MX_GPIO_Init+0x100>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b24      	ldr	r3, [pc, #144]	; (8000824 <MX_GPIO_Init+0x100>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a23      	ldr	r2, [pc, #140]	; (8000824 <MX_GPIO_Init+0x100>)
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_GPIO_Init+0x100>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_GPIO_Init+0x100>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <MX_GPIO_Init+0x100>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_GPIO_Init+0x100>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007cc:	4816      	ldr	r0, [pc, #88]	; (8000828 <MX_GPIO_Init+0x104>)
 80007ce:	f002 f851 	bl	8002874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007de:	2302      	movs	r3, #2
 80007e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	4810      	ldr	r0, [pc, #64]	; (800082c <MX_GPIO_Init+0x108>)
 80007ea:	f001 fe7f 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80007ee:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4808      	ldr	r0, [pc, #32]	; (8000828 <MX_GPIO_Init+0x104>)
 8000808:	f001 fe70 	bl	80024ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	2028      	movs	r0, #40	; 0x28
 8000812:	f001 fd94 	bl	800233e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000816:	2028      	movs	r0, #40	; 0x28
 8000818:	f001 fdad 	bl	8002376 <HAL_NVIC_EnableIRQ>

}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40020400 	.word	0x40020400
 800082c:	40020800 	.word	0x40020800

08000830 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	2b00      	cmp	r3, #0
 8000840:	db0c      	blt.n	800085c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	f003 021f 	and.w	r2, r3, #31
 8000848:	4907      	ldr	r1, [pc, #28]	; (8000868 <__NVIC_ClearPendingIRQ+0x38>)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	095b      	lsrs	r3, r3, #5
 8000850:	2001      	movs	r0, #1
 8000852:	fa00 f202 	lsl.w	r2, r0, r2
 8000856:	3360      	adds	r3, #96	; 0x60
 8000858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000e100 	.word	0xe000e100

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b0cc      	sub	sp, #304	; 0x130
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t delayms = 100;
 8000872:	2364      	movs	r3, #100	; 0x64
 8000874:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	uint8_t tstring[255];
	uint8_t rstring[R_BUFF_LEN + 1];
	char string[7] = "BLINK";
 8000878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800087c:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 8000880:	4965      	ldr	r1, [pc, #404]	; (8000a18 <main+0x1ac>)
 8000882:	4613      	mov	r3, r2
 8000884:	c903      	ldmia	r1, {r0, r1}
 8000886:	6018      	str	r0, [r3, #0]
 8000888:	3304      	adds	r3, #4
 800088a:	8019      	strh	r1, [r3, #0]
 800088c:	2300      	movs	r3, #0
 800088e:	7193      	strb	r3, [r2, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f000 fca4 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f8e0 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f7ff ff44 	bl	8000724 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800089c:	f000 fbfa 	bl	8001094 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80008a0:	f000 fb76 	bl	8000f90 <MX_TIM1_Init>
  MX_ADC1_Init();
 80008a4:	f7ff fe8e 	bl	80005c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ring_init(&uart_ring, buff, sizeof(buff) / sizeof(buff[0]) ); // Initialize UART receiver ring buffer.
 80008a8:	2220      	movs	r2, #32
 80008aa:	495c      	ldr	r1, [pc, #368]	; (8000a1c <main+0x1b0>)
 80008ac:	485c      	ldr	r0, [pc, #368]	; (8000a20 <main+0x1b4>)
 80008ae:	f000 f9d5 	bl	8000c5c <ring_init>
  sprintf((char*)tstring,"UART IT Enter command 'T MCU','V REF' or 'ALL SENS'\r\n");
 80008b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b6:	495b      	ldr	r1, [pc, #364]	; (8000a24 <main+0x1b8>)
 80008b8:	4618      	mov	r0, r3
 80008ba:	f004 f993 	bl	8004be4 <siprintf>
  HAL_UART_Transmit_IT(&huart3,tstring,strlen((char*)tstring));
 80008be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fc9e 	bl	8000204 <strlen>
 80008c8:	4603      	mov	r3, r0
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d0:	4619      	mov	r1, r3
 80008d2:	4855      	ldr	r0, [pc, #340]	; (8000a28 <main+0x1bc>)
 80008d4:	f003 f9e5 	bl	8003ca2 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart3,uart_ring.buffer,1);						 // Start UART receiver in the non blocking mode
 80008d8:	4b51      	ldr	r3, [pc, #324]	; (8000a20 <main+0x1b4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2201      	movs	r2, #1
 80008de:	4619      	mov	r1, r3
 80008e0:	4851      	ldr	r0, [pc, #324]	; (8000a28 <main+0x1bc>)
 80008e2:	f003 fa23 	bl	8003d2c <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //btn_cur = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
	  if(!strcmp(string,"T MCU"))
 80008e6:	463b      	mov	r3, r7
 80008e8:	4950      	ldr	r1, [pc, #320]	; (8000a2c <main+0x1c0>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fc80 	bl	80001f0 <strcmp>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d132      	bne.n	800095c <main+0xf0>
	  {
		  HAL_ADCEx_InjectedStart(&hadc1);
 80008f6:	484e      	ldr	r0, [pc, #312]	; (8000a30 <main+0x1c4>)
 80008f8:	f001 f930 	bl	8001b5c <HAL_ADCEx_InjectedStart>
		  HAL_ADC_PollForConversion(&hadc1, 100);
 80008fc:	2164      	movs	r1, #100	; 0x64
 80008fe:	484c      	ldr	r0, [pc, #304]	; (8000a30 <main+0x1c4>)
 8000900:	f000 fd45 	bl	800138e <HAL_ADC_PollForConversion>
		  temprt = (HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1)/40);
 8000904:	2101      	movs	r1, #1
 8000906:	484a      	ldr	r0, [pc, #296]	; (8000a30 <main+0x1c4>)
 8000908:	f001 fa3e 	bl	8001d88 <HAL_ADCEx_InjectedGetValue>
 800090c:	4603      	mov	r3, r0
 800090e:	4a49      	ldr	r2, [pc, #292]	; (8000a34 <main+0x1c8>)
 8000910:	fba2 2303 	umull	r2, r3, r2, r3
 8000914:	095b      	lsrs	r3, r3, #5
 8000916:	b29a      	uxth	r2, r3
 8000918:	4b47      	ldr	r3, [pc, #284]	; (8000a38 <main+0x1cc>)
 800091a:	801a      	strh	r2, [r3, #0]
		  voltag = ((float)HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2)*3/4096);
 800091c:	2102      	movs	r1, #2
 800091e:	4844      	ldr	r0, [pc, #272]	; (8000a30 <main+0x1c4>)
 8000920:	f001 fa32 	bl	8001d88 <HAL_ADCEx_InjectedGetValue>
 8000924:	ee07 0a90 	vmov	s15, r0
 8000928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800092c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000930:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000934:	eddf 6a41 	vldr	s13, [pc, #260]	; 8000a3c <main+0x1d0>
 8000938:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800093c:	4b40      	ldr	r3, [pc, #256]	; (8000a40 <main+0x1d4>)
 800093e:	edc3 7a00 	vstr	s15, [r3]
		  HAL_ADCEx_InjectedStop(&hadc1);
 8000942:	483b      	ldr	r0, [pc, #236]	; (8000a30 <main+0x1c4>)
 8000944:	f001 f9d4 	bl	8001cf0 <HAL_ADCEx_InjectedStop>

		  sprintf((char*)tstring,"T MCU = %d C\r\n",temprt, rstring);
 8000948:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <main+0x1cc>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8000956:	493b      	ldr	r1, [pc, #236]	; (8000a44 <main+0x1d8>)
 8000958:	f004 f944 	bl	8004be4 <siprintf>
		  //printf("T MCU = %d C\r\n",temprt);
	  }

	  if (ring_get_message(&uart_ring, rstring))
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	4619      	mov	r1, r3
 8000962:	482f      	ldr	r0, [pc, #188]	; (8000a20 <main+0x1b4>)
 8000964:	f000 f9e7 	bl	8000d36 <ring_get_message>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d01b      	beq.n	80009a6 <main+0x13a>
	  {

		  sscanf((char*)rstring,"%25[TMCUVREFALSNtmcuvrefalsn ]", string);
 800096e:	463a      	mov	r2, r7
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	4934      	ldr	r1, [pc, #208]	; (8000a48 <main+0x1dc>)
 8000976:	4618      	mov	r0, r3
 8000978:	f004 f954 	bl	8004c24 <siscanf>
		  // Transmit (in non blocking mode) back to the UART the last entered line and prompt for the next input
		  sprintf((char*)tstring,"Echo: %s\n"
 800097c:	f107 0208 	add.w	r2, r7, #8
 8000980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000984:	4931      	ldr	r1, [pc, #196]	; (8000a4c <main+0x1e0>)
 8000986:	4618      	mov	r0, r3
 8000988:	f004 f92c 	bl	8004be4 <siprintf>
				  "Enter command 'T MCU','V REF' or 'ALL SENS'\r\n",rstring);
		  HAL_UART_Transmit_IT(&huart3,tstring,strlen((char*)tstring));
 800098c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fc37 	bl	8000204 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	b29a      	uxth	r2, r3
 800099a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	4821      	ldr	r0, [pc, #132]	; (8000a28 <main+0x1bc>)
 80009a2:	f003 f97e 	bl	8003ca2 <HAL_UART_Transmit_IT>
	  }


	  if(btn_state == 0)
 80009a6:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <main+0x1e4>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d19b      	bne.n	80008e6 <main+0x7a>
	  {
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, 1);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2180      	movs	r1, #128	; 0x80
 80009b2:	4828      	ldr	r0, [pc, #160]	; (8000a54 <main+0x1e8>)
 80009b4:	f001 ff5e 	bl	8002874 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80009b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009bc:	f000 fc80 	bl	80012c0 <HAL_Delay>
		  if(btn_state == 0)
 80009c0:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <main+0x1e4>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d18e      	bne.n	80008e6 <main+0x7a>
		  {
			  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ce:	4821      	ldr	r0, [pc, #132]	; (8000a54 <main+0x1e8>)
 80009d0:	f001 ff50 	bl	8002874 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 80009d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009d8:	f000 fc72 	bl	80012c0 <HAL_Delay>
			  if(btn_state == 0)
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <main+0x1e4>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d180      	bne.n	80008e6 <main+0x7a>
			  {
				  HAL_GPIO_WritePin(GPIOB, LD2_Pin, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	481a      	ldr	r0, [pc, #104]	; (8000a54 <main+0x1e8>)
 80009ea:	f001 ff43 	bl	8002874 <HAL_GPIO_WritePin>
				  HAL_Delay(500);
 80009ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009f2:	f000 fc65 	bl	80012c0 <HAL_Delay>
				  if(btn_state == 0)
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <main+0x1e4>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f47f af73 	bne.w	80008e6 <main+0x7a>
				  {
					  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a06:	4813      	ldr	r0, [pc, #76]	; (8000a54 <main+0x1e8>)
 8000a08:	f001 ff34 	bl	8002874 <HAL_GPIO_WritePin>
					  HAL_Delay(500);
 8000a0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a10:	f000 fc56 	bl	80012c0 <HAL_Delay>
	  if(!strcmp(string,"T MCU"))
 8000a14:	e767      	b.n	80008e6 <main+0x7a>
 8000a16:	bf00      	nop
 8000a18:	08005ef8 	.word	0x08005ef8
 8000a1c:	200000d8 	.word	0x200000d8
 8000a20:	200000f8 	.word	0x200000f8
 8000a24:	08005e50 	.word	0x08005e50
 8000a28:	2000015c 	.word	0x2000015c
 8000a2c:	08005e88 	.word	0x08005e88
 8000a30:	2000008c 	.word	0x2000008c
 8000a34:	cccccccd 	.word	0xcccccccd
 8000a38:	20000108 	.word	0x20000108
 8000a3c:	45800000 	.word	0x45800000
 8000a40:	2000010c 	.word	0x2000010c
 8000a44:	08005e90 	.word	0x08005e90
 8000a48:	08005ea0 	.word	0x08005ea0
 8000a4c:	08005ec0 	.word	0x08005ec0
 8000a50:	200000d4 	.word	0x200000d4
 8000a54:	40020400 	.word	0x40020400

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b094      	sub	sp, #80	; 0x50
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0320 	add.w	r3, r7, #32
 8000a62:	2230      	movs	r2, #48	; 0x30
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f004 f8b4 	bl	8004bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	4a2a      	ldr	r2, [pc, #168]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8c:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <SystemClock_Config+0xdc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a24      	ldr	r2, [pc, #144]	; (8000b34 <SystemClock_Config+0xdc>)
 8000aa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <SystemClock_Config+0xdc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000acc:	23b4      	movs	r3, #180	; 0xb4
 8000ace:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	4618      	mov	r0, r3
 8000ade:	f001 ff4b 	bl	8002978 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae8:	f000 f983 	bl	8000df2 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000aec:	f001 fef4 	bl	80028d8 <HAL_PWREx_EnableOverDrive>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000af6:	f000 f97c 	bl	8000df2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	230f      	movs	r3, #15
 8000afc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afe:	2302      	movs	r3, #2
 8000b00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	2105      	movs	r1, #5
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 f9a5 	bl	8002e68 <HAL_RCC_ClockConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000b24:	f000 f965 	bl	8000df2 <Error_Handler>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3750      	adds	r7, #80	; 0x50
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000

08000b38 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b48:	d105      	bne.n	8000b56 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // сразу же отключаем прерывания на этом пине
 8000b4a:	2028      	movs	r0, #40	; 0x28
 8000b4c:	f001 fc21 	bl	8002392 <HAL_NVIC_DisableIRQ>
		// либо выполняем какое-то действие прямо тут, либо поднимаем флажок
		HAL_TIM_Base_Start_IT(&htim1); // запускаем таймер
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <HAL_GPIO_EXTI_Callback+0x28>)
 8000b52:	f002 fbf9 	bl	8003348 <HAL_TIM_Base_Start_IT>
	}
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000114 	.word	0x20000114

08000b64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d11f      	bne.n	8000bb6 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		HAL_TIM_Base_Stop_IT(&htim1); // останавливаем таймер
 8000b76:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b78:	f002 fc56 	bl	8003428 <HAL_TIM_Base_Stop_IT>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);  // очищаем бит EXTI_PR (бит прерывания)
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b82:	615a      	str	r2, [r3, #20]
		NVIC_ClearPendingIRQ(EXTI15_10_IRQn); // очищаем бит NVIC_ICPRx (бит очереди)
 8000b84:	2028      	movs	r0, #40	; 0x28
 8000b86:	f7ff fe53 	bl	8000830 <__NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);   // включаем внешнее прерывание
 8000b8a:	2028      	movs	r0, #40	; 0x28
 8000b8c:	f001 fbf3 	bl	8002376 <HAL_NVIC_EnableIRQ>
		//btn_cur = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8000b90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b96:	f001 fe55 	bl	8002844 <HAL_GPIO_ReadPin>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d10a      	bne.n	8000bb6 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			if(btn_state == 0)
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d103      	bne.n	8000bb0 <HAL_TIM_PeriodElapsedCallback+0x4c>
			{
				btn_state = 1;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
		}
		/*if((btn_prev == 0) && (btn_cur != 0))
		{
		}*/
	}
}
 8000bae:	e002      	b.n	8000bb6 <HAL_TIM_PeriodElapsedCallback+0x52>
			else btn_state = 0;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40010000 	.word	0x40010000
 8000bc4:	20000114 	.word	0x20000114
 8000bc8:	40013c00 	.word	0x40013c00
 8000bcc:	40020800 	.word	0x40020800
 8000bd0:	200000d4 	.word	0x200000d4

08000bd4 <HAL_UART_RxCpltCallback>:
//////////////////////////////////////////////////////////UART_IT////////////////////////////////////////////////////////////////
// UART receive interrupt callback function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	// Check that interrupt caused by UART1
	if (huart == &huart3)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <HAL_UART_RxCpltCallback+0x80>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d133      	bne.n	8000c4c <HAL_UART_RxCpltCallback+0x78>
		{
			// Put new character from the UART receiver data register (RDR) to the ring buffer
			ring_putchar(&uart_ring,huart->Instance->DR);                                             //питання RDR чи DR?
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	4619      	mov	r1, r3
 8000bee:	481a      	ldr	r0, [pc, #104]	; (8000c58 <HAL_UART_RxCpltCallback+0x84>)
 8000bf0:	f000 f862 	bl	8000cb8 <ring_putchar>
			// Set the overrun flag if the message is longer than ring buffer can hold
			if (uart_ring.end == uart_ring.start) uart_ring.flag.BufferOverrun = 1;
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_UART_RxCpltCallback+0x84>)
 8000bf6:	88da      	ldrh	r2, [r3, #6]
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <HAL_UART_RxCpltCallback+0x84>)
 8000bfa:	889b      	ldrh	r3, [r3, #4]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d104      	bne.n	8000c0a <HAL_UART_RxCpltCallback+0x36>
 8000c00:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <HAL_UART_RxCpltCallback+0x84>)
 8000c02:	7b13      	ldrb	r3, [r2, #12]
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	7313      	strb	r3, [r2, #12]
			// Set the message ready flag if the end of line character has been received
			if ((uart_ring.buffer[uart_ring.end -1] == '\r') ||
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <HAL_UART_RxCpltCallback+0x84>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_UART_RxCpltCallback+0x84>)
 8000c10:	88db      	ldrh	r3, [r3, #6]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	4413      	add	r3, r2
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b0d      	cmp	r3, #13
 8000c1a:	d008      	beq.n	8000c2e <HAL_UART_RxCpltCallback+0x5a>
					(uart_ring.buffer[uart_ring.end -1] == '\n'))
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_UART_RxCpltCallback+0x84>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_UART_RxCpltCallback+0x84>)
 8000c22:	88db      	ldrh	r3, [r3, #6]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	4413      	add	r3, r2
 8000c28:	781b      	ldrb	r3, [r3, #0]
			if ((uart_ring.buffer[uart_ring.end -1] == '\r') ||
 8000c2a:	2b0a      	cmp	r3, #10
 8000c2c:	d104      	bne.n	8000c38 <HAL_UART_RxCpltCallback+0x64>
				uart_ring.flag.MessageReady = 1;
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_UART_RxCpltCallback+0x84>)
 8000c30:	7b13      	ldrb	r3, [r2, #12]
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	7313      	strb	r3, [r2, #12]
			// Receive the next character from UART in non blocking mode
			HAL_UART_Receive_IT(&huart3,&uart_ring.buffer[uart_ring.end],1);
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <HAL_UART_RxCpltCallback+0x84>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <HAL_UART_RxCpltCallback+0x84>)
 8000c3e:	88d2      	ldrh	r2, [r2, #6]
 8000c40:	4413      	add	r3, r2
 8000c42:	2201      	movs	r2, #1
 8000c44:	4619      	mov	r1, r3
 8000c46:	4803      	ldr	r0, [pc, #12]	; (8000c54 <HAL_UART_RxCpltCallback+0x80>)
 8000c48:	f003 f870 	bl	8003d2c <HAL_UART_Receive_IT>
		}
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000015c 	.word	0x2000015c
 8000c58:	200000f8 	.word	0x200000f8

08000c5c <ring_init>:
// Initializes the ring buffer
void ring_init(uart_ring_buff_t * uart_ring, uint8_t * buff, uint16_t buff_size)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	4613      	mov	r3, r2
 8000c68:	80fb      	strh	r3, [r7, #6]
	uart_ring->buffer = buff;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	68ba      	ldr	r2, [r7, #8]
 8000c6e:	601a      	str	r2, [r3, #0]
	uart_ring->size = buff_size;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	88fa      	ldrh	r2, [r7, #6]
 8000c74:	811a      	strh	r2, [r3, #8]
	ring_clear(uart_ring);
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f000 f804 	bl	8000c84 <ring_clear>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <ring_clear>:
// Clears the ring buffer
void ring_clear(uart_ring_buff_t * uart_ring)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	uart_ring->start = 0;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	809a      	strh	r2, [r3, #4]
	uart_ring->end = 0;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	80da      	strh	r2, [r3, #6]
	uart_ring->flag.BufferOverrun = 0;
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	7b13      	ldrb	r3, [r2, #12]
 8000c9c:	f36f 0341 	bfc	r3, #1, #1
 8000ca0:	7313      	strb	r3, [r2, #12]
	uart_ring->flag.MessageReady = 0;
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	7b13      	ldrb	r3, [r2, #12]
 8000ca6:	f36f 0300 	bfc	r3, #0, #1
 8000caa:	7313      	strb	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <ring_putchar>:
// Puts a new character to the ring buffer
void ring_putchar(uart_ring_buff_t * uart_ring, uint8_t ch)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	70fb      	strb	r3, [r7, #3]
	uart_ring->buffer[uart_ring->end++] = ch;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	88db      	ldrh	r3, [r3, #6]
 8000ccc:	1c59      	adds	r1, r3, #1
 8000cce:	b288      	uxth	r0, r1
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	80c8      	strh	r0, [r1, #6]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	78fa      	ldrb	r2, [r7, #3]
 8000cd8:	701a      	strb	r2, [r3, #0]
	if (uart_ring->end >= uart_ring->size) uart_ring->end = 0;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	88da      	ldrh	r2, [r3, #6]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	891b      	ldrh	r3, [r3, #8]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d302      	bcc.n	8000cec <ring_putchar+0x34>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	80da      	strh	r2, [r3, #6]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <ring_getchar>:
// Gets one character from the ring buffer
uint8_t ring_getchar(uart_ring_buff_t * uart_ring)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	uint8_t ch = uart_ring->buffer[uart_ring->start++];
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	889b      	ldrh	r3, [r3, #4]
 8000d08:	1c59      	adds	r1, r3, #1
 8000d0a:	b288      	uxth	r0, r1
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	8088      	strh	r0, [r1, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	73fb      	strb	r3, [r7, #15]
	if (uart_ring->start >= uart_ring->size) uart_ring->start = 0;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	889a      	ldrh	r2, [r3, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	891b      	ldrh	r3, [r3, #8]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d302      	bcc.n	8000d28 <ring_getchar+0x30>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	809a      	strh	r2, [r3, #4]
	return ch;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <ring_get_message>:
// Reads full message from the ring buffer and clears appropriate flags
uint8_t ring_get_message(uart_ring_buff_t * uart_ring, uint8_t * string)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b084      	sub	sp, #16
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
	uint16_t char_count = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	81fb      	strh	r3, [r7, #14]
	// Check if the message has been received
	if (uart_ring->flag.MessageReady)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7b1b      	ldrb	r3, [r3, #12]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d049      	beq.n	8000de6 <ring_get_message+0xb0>
		{
			if (uart_ring->flag.BufferOverrun)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7b1b      	ldrb	r3, [r3, #12]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d016      	beq.n	8000d8e <ring_get_message+0x58>
				{
					uart_ring->start = uart_ring->end;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	88da      	ldrh	r2, [r3, #6]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	809a      	strh	r2, [r3, #4]
					uart_ring->flag.BufferOverrun = 0;
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	7b13      	ldrb	r3, [r2, #12]
 8000d6c:	f36f 0341 	bfc	r3, #1, #1
 8000d70:	7313      	strb	r3, [r2, #12]
				}
			while ((uart_ring->buffer[uart_ring->start] != '\r') &&
 8000d72:	e00c      	b.n	8000d8e <ring_get_message+0x58>
						 (uart_ring->buffer[uart_ring->start] != '\n') &&
						 (uart_ring->size != char_count - 1))
				{
					*string =  ring_getchar(uart_ring);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ffbf 	bl	8000cf8 <ring_getchar>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	701a      	strb	r2, [r3, #0]
					string++;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	603b      	str	r3, [r7, #0]
					char_count++;
 8000d88:	89fb      	ldrh	r3, [r7, #14]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	81fb      	strh	r3, [r7, #14]
			while ((uart_ring->buffer[uart_ring->start] != '\r') &&
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	8892      	ldrh	r2, [r2, #4]
 8000d96:	4413      	add	r3, r2
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b0d      	cmp	r3, #13
 8000d9c:	d00e      	beq.n	8000dbc <ring_get_message+0x86>
						 (uart_ring->buffer[uart_ring->start] != '\n') &&
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	8892      	ldrh	r2, [r2, #4]
 8000da6:	4413      	add	r3, r2
 8000da8:	781b      	ldrb	r3, [r3, #0]
			while ((uart_ring->buffer[uart_ring->start] != '\r') &&
 8000daa:	2b0a      	cmp	r3, #10
 8000dac:	d006      	beq.n	8000dbc <ring_get_message+0x86>
						 (uart_ring->size != char_count - 1))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	891b      	ldrh	r3, [r3, #8]
 8000db2:	461a      	mov	r2, r3
 8000db4:	89fb      	ldrh	r3, [r7, #14]
 8000db6:	3b01      	subs	r3, #1
						 (uart_ring->buffer[uart_ring->start] != '\n') &&
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d1db      	bne.n	8000d74 <ring_get_message+0x3e>
				}
			*string =  ring_getchar(uart_ring);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff9b 	bl	8000cf8 <ring_getchar>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	701a      	strb	r2, [r3, #0]
			string++;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	603b      	str	r3, [r7, #0]
			char_count++;
 8000dd0:	89fb      	ldrh	r3, [r7, #14]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	81fb      	strh	r3, [r7, #14]
			*string = '\0';
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
			uart_ring->flag.MessageReady = 0;
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	7b13      	ldrb	r3, [r2, #12]
 8000de0:	f36f 0300 	bfc	r3, #0, #1
 8000de4:	7313      	strb	r3, [r2, #12]
		}
	return char_count;
 8000de6:	89fb      	ldrh	r3, [r7, #14]
 8000de8:	b2db      	uxtb	r3, r3
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df6:	b672      	cpsid	i
}
 8000df8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <Error_Handler+0x8>

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_MspInit+0x4c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <NMI_Handler+0x4>

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f000 f9f2 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <ADC_IRQHandler+0x10>)
 8000ea6:	f000 fafd 	bl	80014a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000008c 	.word	0x2000008c

08000eb4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000eba:	f002 fae4 	bl	8003486 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000114 	.word	0x20000114

08000ec8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ece:	f002 fada 	bl	8003486 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000114 	.word	0x20000114

08000edc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <USART3_IRQHandler+0x10>)
 8000ee2:	f002 ff53 	bl	8003d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000015c 	.word	0x2000015c

08000ef0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ef4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ef8:	f001 fcd6 	bl	80028a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4a14      	ldr	r2, [pc, #80]	; (8000f5c <_sbrk+0x5c>)
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <_sbrk+0x60>)
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d102      	bne.n	8000f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f1c:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <_sbrk+0x64>)
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <_sbrk+0x68>)
 8000f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d207      	bcs.n	8000f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f30:	f003 fe26 	bl	8004b80 <__errno>
 8000f34:	4603      	mov	r3, r0
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	e009      	b.n	8000f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <_sbrk+0x64>)
 8000f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20030000 	.word	0x20030000
 8000f60:	00000400 	.word	0x00000400
 8000f64:	20000110 	.word	0x20000110
 8000f68:	200001b8 	.word	0x200001b8

08000f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SystemInit+0x20>)
 8000f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <SystemInit+0x20>)
 8000f78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <MX_TIM1_Init+0x9c>)
 8000fae:	4a20      	ldr	r2, [pc, #128]	; (8001030 <MX_TIM1_Init+0xa0>)
 8000fb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 900-1;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_TIM1_Init+0x9c>)
 8000fb4:	f240 3283 	movw	r2, #899	; 0x383
 8000fb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_TIM1_Init+0x9c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_TIM1_Init+0x9c>)
 8000fc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	; (800102c <MX_TIM1_Init+0x9c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <MX_TIM1_Init+0x9c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <MX_TIM1_Init+0x9c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fda:	4814      	ldr	r0, [pc, #80]	; (800102c <MX_TIM1_Init+0x9c>)
 8000fdc:	f002 f964 	bl	80032a8 <HAL_TIM_Base_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000fe6:	f7ff ff04 	bl	8000df2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480d      	ldr	r0, [pc, #52]	; (800102c <MX_TIM1_Init+0x9c>)
 8000ff8:	f002 fb4d 	bl	8003696 <HAL_TIM_ConfigClockSource>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001002:	f7ff fef6 	bl	8000df2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	4619      	mov	r1, r3
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <MX_TIM1_Init+0x9c>)
 8001014:	f002 fd68 	bl	8003ae8 <HAL_TIMEx_MasterConfigSynchronization>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800101e:	f7ff fee8 	bl	8000df2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000114 	.word	0x20000114
 8001030:	40010000 	.word	0x40010000

08001034 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <HAL_TIM_Base_MspInit+0x58>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d11d      	bne.n	8001082 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_TIM_Base_MspInit+0x5c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_TIM_Base_MspInit+0x5c>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_TIM_Base_MspInit+0x5c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2018      	movs	r0, #24
 8001068:	f001 f969 	bl	800233e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800106c:	2018      	movs	r0, #24
 800106e:	f001 f982 	bl	8002376 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2019      	movs	r0, #25
 8001078:	f001 f961 	bl	800233e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800107c:	2019      	movs	r0, #25
 800107e:	f001 f97a 	bl	8002376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40010000 	.word	0x40010000
 8001090:	40023800 	.word	0x40023800

08001094 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_USART3_UART_Init+0x50>)
 800109c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_USART3_UART_Init+0x4c>)
 80010cc:	f002 fd9c 	bl	8003c08 <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010d6:	f7ff fe8c 	bl	8000df2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000015c 	.word	0x2000015c
 80010e4:	40004800 	.word	0x40004800

080010e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a1d      	ldr	r2, [pc, #116]	; (800117c <HAL_UART_MspInit+0x94>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d134      	bne.n	8001174 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <HAL_UART_MspInit+0x98>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <HAL_UART_MspInit+0x98>)
 8001114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001118:	6413      	str	r3, [r2, #64]	; 0x40
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_UART_MspInit+0x98>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_UART_MspInit+0x98>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a14      	ldr	r2, [pc, #80]	; (8001180 <HAL_UART_MspInit+0x98>)
 8001130:	f043 0308 	orr.w	r3, r3, #8
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_UART_MspInit+0x98>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001142:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001154:	2307      	movs	r3, #7
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4809      	ldr	r0, [pc, #36]	; (8001184 <HAL_UART_MspInit+0x9c>)
 8001160:	f001 f9c4 	bl	80024ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	2027      	movs	r0, #39	; 0x27
 800116a:	f001 f8e8 	bl	800233e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800116e:	2027      	movs	r0, #39	; 0x27
 8001170:	f001 f901 	bl	8002376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40004800 	.word	0x40004800
 8001180:	40023800 	.word	0x40023800
 8001184:	40020c00 	.word	0x40020c00

08001188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800118e:	490e      	ldr	r1, [pc, #56]	; (80011c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011a4:	4c0b      	ldr	r4, [pc, #44]	; (80011d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011b2:	f7ff fedb 	bl	8000f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f003 fce9 	bl	8004b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ba:	f7ff fb57 	bl	800086c <main>
  bx  lr    
 80011be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011cc:	080060e4 	.word	0x080060e4
  ldr r2, =_sbss
 80011d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011d4:	200001b4 	.word	0x200001b4

080011d8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <CAN1_RX0_IRQHandler>
	...

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_Init+0x40>)
 80011e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_Init+0x40>)
 80011f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_Init+0x40>)
 80011fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001204:	2003      	movs	r0, #3
 8001206:	f001 f88f 	bl	8002328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120a:	200f      	movs	r0, #15
 800120c:	f000 f808 	bl	8001220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001210:	f7ff fdf4 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023c00 	.word	0x40023c00

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x54>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x58>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	fbb3 f3f1 	udiv	r3, r3, r1
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f001 f8b5 	bl	80023ae <HAL_SYSTICK_Config>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e00e      	b.n	800126c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d80a      	bhi.n	800126a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f001 f86f 	bl	800233e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001260:	4a06      	ldr	r2, [pc, #24]	; (800127c <HAL_InitTick+0x5c>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000000 	.word	0x20000000
 8001278:	20000008 	.word	0x20000008
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x20>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x24>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <HAL_IncTick+0x24>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008
 80012a4:	200001a0 	.word	0x200001a0

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	200001a0 	.word	0x200001a0

080012c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f7ff ffee 	bl	80012a8 <HAL_GetTick>
 80012cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d005      	beq.n	80012e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_Delay+0x44>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012e6:	bf00      	nop
 80012e8:	f7ff ffde 	bl	80012a8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d8f7      	bhi.n	80012e8 <HAL_Delay+0x28>
  {
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000008 	.word	0x20000008

08001308 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e033      	b.n	8001386 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff f9d4 	bl	80006d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	2b00      	cmp	r3, #0
 8001344:	d118      	bne.n	8001378 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800134e:	f023 0302 	bic.w	r3, r3, #2
 8001352:	f043 0202 	orr.w	r2, r3, #2
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fb02 	bl	8001964 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f023 0303 	bic.w	r3, r3, #3
 800136e:	f043 0201 	orr.w	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	641a      	str	r2, [r3, #64]	; 0x40
 8001376:	e001      	b.n	800137c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001384:	7bfb      	ldrb	r3, [r7, #15]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013aa:	d113      	bne.n	80013d4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013ba:	d10b      	bne.n	80013d4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f043 0220 	orr.w	r2, r3, #32
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e063      	b.n	800149c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80013d4:	f7ff ff68 	bl	80012a8 <HAL_GetTick>
 80013d8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013da:	e021      	b.n	8001420 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e2:	d01d      	beq.n	8001420 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d007      	beq.n	80013fa <HAL_ADC_PollForConversion+0x6c>
 80013ea:	f7ff ff5d 	bl	80012a8 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d212      	bcs.n	8001420 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b02      	cmp	r3, #2
 8001406:	d00b      	beq.n	8001420 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f043 0204 	orr.w	r2, r3, #4
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e03d      	b.n	800149c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b02      	cmp	r3, #2
 800142c:	d1d6      	bne.n	80013dc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f06f 0212 	mvn.w	r2, #18
 8001436:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d123      	bne.n	800149a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001456:	2b00      	cmp	r3, #0
 8001458:	d11f      	bne.n	800149a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001472:	2b00      	cmp	r3, #0
 8001474:	d111      	bne.n	800149a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d105      	bne.n	800149a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d049      	beq.n	800156e <HAL_ADC_IRQHandler+0xca>
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d046      	beq.n	800156e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d105      	bne.n	80014f8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d12b      	bne.n	800155e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800150a:	2b00      	cmp	r3, #0
 800150c:	d127      	bne.n	800155e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001518:	2b00      	cmp	r3, #0
 800151a:	d006      	beq.n	800152a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001526:	2b00      	cmp	r3, #0
 8001528:	d119      	bne.n	800155e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0220 	bic.w	r2, r2, #32
 8001538:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d105      	bne.n	800155e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f043 0201 	orr.w	r2, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f8b0 	bl	80016c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f06f 0212 	mvn.w	r2, #18
 800156c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d057      	beq.n	8001634 <HAL_ADC_IRQHandler+0x190>
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d054      	beq.n	8001634 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	2b00      	cmp	r3, #0
 8001594:	d105      	bne.n	80015a2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d139      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d12b      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d124      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d11d      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d119      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001614:	2b00      	cmp	r3, #0
 8001616:	d105      	bne.n	8001624 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fbe7 	bl	8001df8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f06f 020c 	mvn.w	r2, #12
 8001632:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001642:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d017      	beq.n	800167a <HAL_ADC_IRQHandler+0x1d6>
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d014      	beq.n	800167a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b01      	cmp	r3, #1
 800165c:	d10d      	bne.n	800167a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f834 	bl	80016d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f06f 0201 	mvn.w	r2, #1
 8001678:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f003 0320 	and.w	r3, r3, #32
 8001680:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001688:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d015      	beq.n	80016bc <HAL_ADC_IRQHandler+0x218>
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d012      	beq.n	80016bc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f043 0202 	orr.w	r2, r3, #2
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f06f 0220 	mvn.w	r2, #32
 80016aa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f81d 	bl	80016ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f06f 0220 	mvn.w	r2, #32
 80016ba:	601a      	str	r2, [r3, #0]
  }
}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_ADC_ConfigChannel+0x1c>
 8001718:	2302      	movs	r3, #2
 800171a:	e113      	b.n	8001944 <HAL_ADC_ConfigChannel+0x244>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b09      	cmp	r3, #9
 800172a:	d925      	bls.n	8001778 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68d9      	ldr	r1, [r3, #12]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	3b1e      	subs	r3, #30
 8001742:	2207      	movs	r2, #7
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43da      	mvns	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	400a      	ands	r2, r1
 8001750:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68d9      	ldr	r1, [r3, #12]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	4618      	mov	r0, r3
 8001764:	4603      	mov	r3, r0
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4403      	add	r3, r0
 800176a:	3b1e      	subs	r3, #30
 800176c:	409a      	lsls	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	e022      	b.n	80017be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6919      	ldr	r1, [r3, #16]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	b29b      	uxth	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	2207      	movs	r2, #7
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	400a      	ands	r2, r1
 800179a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6919      	ldr	r1, [r3, #16]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	4603      	mov	r3, r0
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4403      	add	r3, r0
 80017b4:	409a      	lsls	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d824      	bhi.n	8001810 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	3b05      	subs	r3, #5
 80017d8:	221f      	movs	r2, #31
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	400a      	ands	r2, r1
 80017e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4618      	mov	r0, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	3b05      	subs	r3, #5
 8001802:	fa00 f203 	lsl.w	r2, r0, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	635a      	str	r2, [r3, #52]	; 0x34
 800180e:	e04c      	b.n	80018aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b0c      	cmp	r3, #12
 8001816:	d824      	bhi.n	8001862 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	3b23      	subs	r3, #35	; 0x23
 800182a:	221f      	movs	r2, #31
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43da      	mvns	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	400a      	ands	r2, r1
 8001838:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	b29b      	uxth	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	3b23      	subs	r3, #35	; 0x23
 8001854:	fa00 f203 	lsl.w	r2, r0, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	631a      	str	r2, [r3, #48]	; 0x30
 8001860:	e023      	b.n	80018aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	3b41      	subs	r3, #65	; 0x41
 8001874:	221f      	movs	r2, #31
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	400a      	ands	r2, r1
 8001882:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	b29b      	uxth	r3, r3
 8001890:	4618      	mov	r0, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	3b41      	subs	r3, #65	; 0x41
 800189e:	fa00 f203 	lsl.w	r2, r0, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <HAL_ADC_ConfigChannel+0x250>)
 80018ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a28      	ldr	r2, [pc, #160]	; (8001954 <HAL_ADC_ConfigChannel+0x254>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d10f      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x1d8>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b12      	cmp	r3, #18
 80018be:	d10b      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <HAL_ADC_ConfigChannel+0x254>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d12b      	bne.n	800193a <HAL_ADC_ConfigChannel+0x23a>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <HAL_ADC_ConfigChannel+0x258>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d003      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0x1f4>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b11      	cmp	r3, #17
 80018f2:	d122      	bne.n	800193a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a11      	ldr	r2, [pc, #68]	; (8001958 <HAL_ADC_ConfigChannel+0x258>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d111      	bne.n	800193a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_ADC_ConfigChannel+0x25c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a11      	ldr	r2, [pc, #68]	; (8001960 <HAL_ADC_ConfigChannel+0x260>)
 800191c:	fba2 2303 	umull	r2, r3, r2, r3
 8001920:	0c9a      	lsrs	r2, r3, #18
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800192c:	e002      	b.n	8001934 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	3b01      	subs	r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f9      	bne.n	800192e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	40012300 	.word	0x40012300
 8001954:	40012000 	.word	0x40012000
 8001958:	10000012 	.word	0x10000012
 800195c:	20000000 	.word	0x20000000
 8001960:	431bde83 	.word	0x431bde83

08001964 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800196c:	4b79      	ldr	r3, [pc, #484]	; (8001b54 <ADC_Init+0x1f0>)
 800196e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	431a      	orrs	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001998:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6859      	ldr	r1, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	021a      	lsls	r2, r3, #8
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6899      	ldr	r1, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	4a58      	ldr	r2, [pc, #352]	; (8001b58 <ADC_Init+0x1f4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d022      	beq.n	8001a42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6899      	ldr	r1, [r3, #8]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6899      	ldr	r1, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	e00f      	b.n	8001a62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0202 	bic.w	r2, r2, #2
 8001a70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6899      	ldr	r1, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7e1b      	ldrb	r3, [r3, #24]
 8001a7c:	005a      	lsls	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01b      	beq.n	8001ac8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001aae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6859      	ldr	r1, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	3b01      	subs	r3, #1
 8001abc:	035a      	lsls	r2, r3, #13
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	e007      	b.n	8001ad8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	051a      	lsls	r2, r3, #20
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6899      	ldr	r1, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b1a:	025a      	lsls	r2, r3, #9
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6899      	ldr	r1, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	029a      	lsls	r2, r3, #10
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	609a      	str	r2, [r3, #8]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40012300 	.word	0x40012300
 8001b58:	0f000001 	.word	0x0f000001

08001b5c <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_ADCEx_InjectedStart+0x22>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e0aa      	b.n	8001cd4 <HAL_ADCEx_InjectedStart+0x178>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d018      	beq.n	8001bc6 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ba4:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <HAL_ADCEx_InjectedStart+0x184>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a4e      	ldr	r2, [pc, #312]	; (8001ce4 <HAL_ADCEx_InjectedStart+0x188>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	0c9a      	lsrs	r2, r3, #18
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bb8:	e002      	b.n	8001bc0 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f9      	bne.n	8001bba <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d172      	bne.n	8001cba <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f06f 0204 	mvn.w	r2, #4
 8001c0a:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c0c:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <HAL_ADCEx_InjectedStart+0x18c>)
 8001c0e:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d124      	bne.n	8001c66 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	bf0c      	ite	eq
 8001c2a:	2301      	moveq	r3, #1
 8001c2c:	2300      	movne	r3, #0
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf0c      	ite	eq
 8001c40:	2301      	moveq	r3, #1
 8001c42:	2300      	movne	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d041      	beq.n	8001cd2 <HAL_ADCEx_InjectedStart+0x176>
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d03e      	beq.n	8001cd2 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	e035      	b.n	8001cd2 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bf0c      	ite	eq
 8001c8a:	2301      	moveq	r3, #1
 8001c8c:	2300      	movne	r3, #0
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a15      	ldr	r2, [pc, #84]	; (8001cec <HAL_ADCEx_InjectedStart+0x190>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d11a      	bne.n	8001cd2 <HAL_ADCEx_InjectedStart+0x176>
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d017      	beq.n	8001cd2 <HAL_ADCEx_InjectedStart+0x176>
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d014      	beq.n	8001cd2 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	e00b      	b.n	8001cd2 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f043 0210 	orr.w	r2, r3, #16
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f043 0201 	orr.w	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	431bde83 	.word	0x431bde83
 8001ce8:	40012300 	.word	0x40012300
 8001cec:	40012000 	.word	0x40012000

08001cf0 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_ADCEx_InjectedStop+0x1a>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e037      	b.n	8001d7a <HAL_ADCEx_InjectedStop+0x8a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d120      	bne.n	8001d60 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d119      	bne.n	8001d60 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d112      	bne.n	8001d70 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d52:	f023 0301 	bic.w	r3, r3, #1
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d5e:	e007      	b.n	8001d70 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f043 0220 	orr.w	r2, r3, #32
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f06f 0204 	mvn.w	r2, #4
 8001d9e:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d81f      	bhi.n	8001de8 <HAL_ADCEx_InjectedGetValue+0x60>
 8001da8:	a201      	add	r2, pc, #4	; (adr r2, 8001db0 <HAL_ADCEx_InjectedGetValue+0x28>)
 8001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dae:	bf00      	nop
 8001db0:	08001ddf 	.word	0x08001ddf
 8001db4:	08001dd5 	.word	0x08001dd5
 8001db8:	08001dcb 	.word	0x08001dcb
 8001dbc:	08001dc1 	.word	0x08001dc1
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc6:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001dc8:	e00f      	b.n	8001dea <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001dd2:	e00a      	b.n	8001dea <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001ddc:	e005      	b.n	8001dea <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de4:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001de6:	e000      	b.n	8001dea <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8001de8:	bf00      	nop
  }
  return tmp;
 8001dea:	68fb      	ldr	r3, [r7, #12]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e17e      	b.n	8002122 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b09      	cmp	r3, #9
 8001e32:	d925      	bls.n	8001e80 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68d9      	ldr	r1, [r3, #12]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	3b1e      	subs	r3, #30
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43da      	mvns	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	400a      	ands	r2, r1
 8001e58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68d9      	ldr	r1, [r3, #12]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4403      	add	r3, r0
 8001e72:	3b1e      	subs	r3, #30
 8001e74:	409a      	lsls	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	e022      	b.n	8001ec6 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6919      	ldr	r1, [r3, #16]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	2207      	movs	r2, #7
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6919      	ldr	r1, [r3, #16]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4403      	add	r3, r0
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	051a      	lsls	r2, r3, #20
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	3303      	adds	r3, #3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	221f      	movs	r2, #31
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43da      	mvns	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	3303      	adds	r3, #3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a75      	ldr	r2, [pc, #468]	; (8002130 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d022      	beq.n	8001fa4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6899      	ldr	r1, [r3, #8]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001f8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6899      	ldr	r1, [r3, #8]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	e00f      	b.n	8001fc4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001fb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001fc2:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	7d5b      	ldrb	r3, [r3, #21]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	e007      	b.n	8001fee <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fec:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	7d1b      	ldrb	r3, [r3, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d008      	beq.n	8002008 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	e007      	b.n	8002018 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002016:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d02e      	beq.n	800207e <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002020:	2b03      	cmp	r3, #3
 8002022:	d840      	bhi.n	80020a6 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8002024:	2b01      	cmp	r3, #1
 8002026:	d002      	beq.n	800202e <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002028:	2b02      	cmp	r3, #2
 800202a:	d014      	beq.n	8002056 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 800202c:	e03b      	b.n	80020a6 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800203c:	f023 030f 	bic.w	r3, r3, #15
 8002040:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6959      	ldr	r1, [r3, #20]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	615a      	str	r2, [r3, #20]
      break;
 8002054:	e03b      	b.n	80020ce <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002064:	f023 030f 	bic.w	r3, r3, #15
 8002068:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6999      	ldr	r1, [r3, #24]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	619a      	str	r2, [r3, #24]
      break;
 800207c:	e027      	b.n	80020ce <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800208c:	f023 030f 	bic.w	r3, r3, #15
 8002090:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	69d9      	ldr	r1, [r3, #28]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	61da      	str	r2, [r3, #28]
      break;
 80020a4:	e013      	b.n	80020ce <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80020b4:	f023 030f 	bic.w	r3, r3, #15
 80020b8:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6a19      	ldr	r1, [r3, #32]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	621a      	str	r2, [r3, #32]
      break;
 80020cc:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80020d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a18      	ldr	r2, [pc, #96]	; (8002138 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d109      	bne.n	80020f0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b12      	cmp	r3, #18
 80020e2:	d105      	bne.n	80020f0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a10      	ldr	r2, [pc, #64]	; (8002138 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d10e      	bne.n	8002118 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a0f      	ldr	r2, [pc, #60]	; (800213c <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d003      	beq.n	800210c <HAL_ADCEx_InjectedConfigChannel+0x300>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b11      	cmp	r3, #17
 800210a:	d105      	bne.n	8002118 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	000f0001 	.word	0x000f0001
 8002134:	40012300 	.word	0x40012300
 8002138:	40012000 	.word	0x40012000
 800213c:	10000012 	.word	0x10000012

08002140 <__NVIC_SetPriorityGrouping>:
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800215c:	4013      	ands	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800216c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002172:	4a04      	ldr	r2, [pc, #16]	; (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_GetPriorityGrouping>:
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <__NVIC_GetPriorityGrouping+0x18>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	f003 0307 	and.w	r3, r3, #7
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_EnableIRQ>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	db0b      	blt.n	80021ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	4907      	ldr	r1, [pc, #28]	; (80021dc <__NVIC_EnableIRQ+0x38>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2001      	movs	r0, #1
 80021c6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000e100 	.word	0xe000e100

080021e0 <__NVIC_DisableIRQ>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db12      	blt.n	8002218 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	490a      	ldr	r1, [pc, #40]	; (8002224 <__NVIC_DisableIRQ+0x44>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2001      	movs	r0, #1
 8002202:	fa00 f202 	lsl.w	r2, r0, r2
 8002206:	3320      	adds	r3, #32
 8002208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800220c:	f3bf 8f4f 	dsb	sy
}
 8002210:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002212:	f3bf 8f6f 	isb	sy
}
 8002216:	bf00      	nop
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000e100 	.word	0xe000e100

08002228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	db0a      	blt.n	8002252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	490c      	ldr	r1, [pc, #48]	; (8002274 <__NVIC_SetPriority+0x4c>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	0112      	lsls	r2, r2, #4
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	440b      	add	r3, r1
 800224c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002250:	e00a      	b.n	8002268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4908      	ldr	r1, [pc, #32]	; (8002278 <__NVIC_SetPriority+0x50>)
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	3b04      	subs	r3, #4
 8002260:	0112      	lsls	r2, r2, #4
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	440b      	add	r3, r1
 8002266:	761a      	strb	r2, [r3, #24]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000e100 	.word	0xe000e100
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f1c3 0307 	rsb	r3, r3, #7
 8002296:	2b04      	cmp	r3, #4
 8002298:	bf28      	it	cs
 800229a:	2304      	movcs	r3, #4
 800229c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2b06      	cmp	r3, #6
 80022a4:	d902      	bls.n	80022ac <NVIC_EncodePriority+0x30>
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3b03      	subs	r3, #3
 80022aa:	e000      	b.n	80022ae <NVIC_EncodePriority+0x32>
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	401a      	ands	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43d9      	mvns	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	4313      	orrs	r3, r2
         );
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3724      	adds	r7, #36	; 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f4:	d301      	bcc.n	80022fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00f      	b.n	800231a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fa:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <SysTick_Config+0x40>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002302:	210f      	movs	r1, #15
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f7ff ff8e 	bl	8002228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <SysTick_Config+0x40>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <SysTick_Config+0x40>)
 8002314:	2207      	movs	r2, #7
 8002316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	e000e010 	.word	0xe000e010

08002328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ff05 	bl	8002140 <__NVIC_SetPriorityGrouping>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002350:	f7ff ff1a 	bl	8002188 <__NVIC_GetPriorityGrouping>
 8002354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	6978      	ldr	r0, [r7, #20]
 800235c:	f7ff ff8e 	bl	800227c <NVIC_EncodePriority>
 8002360:	4602      	mov	r2, r0
 8002362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff5d 	bl	8002228 <__NVIC_SetPriority>
}
 800236e:	bf00      	nop
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff0d 	bl	80021a4 <__NVIC_EnableIRQ>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	4603      	mov	r3, r0
 800239a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff1d 	bl	80021e0 <__NVIC_DisableIRQ>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ff94 	bl	80022e4 <SysTick_Config>
 80023bc:	4603      	mov	r3, r0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b084      	sub	sp, #16
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023d4:	f7fe ff68 	bl	80012a8 <HAL_GetTick>
 80023d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d008      	beq.n	80023f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2280      	movs	r2, #128	; 0x80
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e052      	b.n	800249e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0216 	bic.w	r2, r2, #22
 8002406:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695a      	ldr	r2, [r3, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002416:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d103      	bne.n	8002428 <HAL_DMA_Abort+0x62>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0208 	bic.w	r2, r2, #8
 8002436:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002448:	e013      	b.n	8002472 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800244a:	f7fe ff2d 	bl	80012a8 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b05      	cmp	r3, #5
 8002456:	d90c      	bls.n	8002472 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2203      	movs	r2, #3
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e015      	b.n	800249e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e4      	bne.n	800244a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002484:	223f      	movs	r2, #63	; 0x3f
 8002486:	409a      	lsls	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d004      	beq.n	80024c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2280      	movs	r2, #128	; 0x80
 80024be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e00c      	b.n	80024de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2205      	movs	r2, #5
 80024c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	e177      	b.n	80027f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002508:	2201      	movs	r2, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	429a      	cmp	r2, r3
 8002522:	f040 8166 	bne.w	80027f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d005      	beq.n	800253e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253a:	2b02      	cmp	r3, #2
 800253c:	d130      	bne.n	80025a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	2203      	movs	r2, #3
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002574:	2201      	movs	r2, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 0201 	and.w	r2, r3, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d017      	beq.n	80025dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d123      	bne.n	8002630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	08da      	lsrs	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3208      	adds	r2, #8
 80025f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	220f      	movs	r2, #15
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	08da      	lsrs	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3208      	adds	r2, #8
 800262a:	69b9      	ldr	r1, [r7, #24]
 800262c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0203 	and.w	r2, r3, #3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80c0 	beq.w	80027f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b66      	ldr	r3, [pc, #408]	; (8002810 <HAL_GPIO_Init+0x324>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4a65      	ldr	r2, [pc, #404]	; (8002810 <HAL_GPIO_Init+0x324>)
 800267c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
 8002682:	4b63      	ldr	r3, [pc, #396]	; (8002810 <HAL_GPIO_Init+0x324>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268e:	4a61      	ldr	r2, [pc, #388]	; (8002814 <HAL_GPIO_Init+0x328>)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	3302      	adds	r3, #2
 8002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a58      	ldr	r2, [pc, #352]	; (8002818 <HAL_GPIO_Init+0x32c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d037      	beq.n	800272a <HAL_GPIO_Init+0x23e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a57      	ldr	r2, [pc, #348]	; (800281c <HAL_GPIO_Init+0x330>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d031      	beq.n	8002726 <HAL_GPIO_Init+0x23a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a56      	ldr	r2, [pc, #344]	; (8002820 <HAL_GPIO_Init+0x334>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d02b      	beq.n	8002722 <HAL_GPIO_Init+0x236>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a55      	ldr	r2, [pc, #340]	; (8002824 <HAL_GPIO_Init+0x338>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d025      	beq.n	800271e <HAL_GPIO_Init+0x232>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a54      	ldr	r2, [pc, #336]	; (8002828 <HAL_GPIO_Init+0x33c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01f      	beq.n	800271a <HAL_GPIO_Init+0x22e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a53      	ldr	r2, [pc, #332]	; (800282c <HAL_GPIO_Init+0x340>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d019      	beq.n	8002716 <HAL_GPIO_Init+0x22a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a52      	ldr	r2, [pc, #328]	; (8002830 <HAL_GPIO_Init+0x344>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d013      	beq.n	8002712 <HAL_GPIO_Init+0x226>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a51      	ldr	r2, [pc, #324]	; (8002834 <HAL_GPIO_Init+0x348>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00d      	beq.n	800270e <HAL_GPIO_Init+0x222>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a50      	ldr	r2, [pc, #320]	; (8002838 <HAL_GPIO_Init+0x34c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <HAL_GPIO_Init+0x21e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a4f      	ldr	r2, [pc, #316]	; (800283c <HAL_GPIO_Init+0x350>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d101      	bne.n	8002706 <HAL_GPIO_Init+0x21a>
 8002702:	2309      	movs	r3, #9
 8002704:	e012      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002706:	230a      	movs	r3, #10
 8002708:	e010      	b.n	800272c <HAL_GPIO_Init+0x240>
 800270a:	2308      	movs	r3, #8
 800270c:	e00e      	b.n	800272c <HAL_GPIO_Init+0x240>
 800270e:	2307      	movs	r3, #7
 8002710:	e00c      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002712:	2306      	movs	r3, #6
 8002714:	e00a      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002716:	2305      	movs	r3, #5
 8002718:	e008      	b.n	800272c <HAL_GPIO_Init+0x240>
 800271a:	2304      	movs	r3, #4
 800271c:	e006      	b.n	800272c <HAL_GPIO_Init+0x240>
 800271e:	2303      	movs	r3, #3
 8002720:	e004      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002722:	2302      	movs	r3, #2
 8002724:	e002      	b.n	800272c <HAL_GPIO_Init+0x240>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_GPIO_Init+0x240>
 800272a:	2300      	movs	r3, #0
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	f002 0203 	and.w	r2, r2, #3
 8002732:	0092      	lsls	r2, r2, #2
 8002734:	4093      	lsls	r3, r2
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800273c:	4935      	ldr	r1, [pc, #212]	; (8002814 <HAL_GPIO_Init+0x328>)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	089b      	lsrs	r3, r3, #2
 8002742:	3302      	adds	r3, #2
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274a:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <HAL_GPIO_Init+0x354>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800276e:	4a34      	ldr	r2, [pc, #208]	; (8002840 <HAL_GPIO_Init+0x354>)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002774:	4b32      	ldr	r3, [pc, #200]	; (8002840 <HAL_GPIO_Init+0x354>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002798:	4a29      	ldr	r2, [pc, #164]	; (8002840 <HAL_GPIO_Init+0x354>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800279e:	4b28      	ldr	r3, [pc, #160]	; (8002840 <HAL_GPIO_Init+0x354>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027c2:	4a1f      	ldr	r2, [pc, #124]	; (8002840 <HAL_GPIO_Init+0x354>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c8:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <HAL_GPIO_Init+0x354>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ec:	4a14      	ldr	r2, [pc, #80]	; (8002840 <HAL_GPIO_Init+0x354>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3301      	adds	r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	2b0f      	cmp	r3, #15
 80027fc:	f67f ae84 	bls.w	8002508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002800:	bf00      	nop
 8002802:	bf00      	nop
 8002804:	3724      	adds	r7, #36	; 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	40013800 	.word	0x40013800
 8002818:	40020000 	.word	0x40020000
 800281c:	40020400 	.word	0x40020400
 8002820:	40020800 	.word	0x40020800
 8002824:	40020c00 	.word	0x40020c00
 8002828:	40021000 	.word	0x40021000
 800282c:	40021400 	.word	0x40021400
 8002830:	40021800 	.word	0x40021800
 8002834:	40021c00 	.word	0x40021c00
 8002838:	40022000 	.word	0x40022000
 800283c:	40022400 	.word	0x40022400
 8002840:	40013c00 	.word	0x40013c00

08002844 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	887b      	ldrh	r3, [r7, #2]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
 8002860:	e001      	b.n	8002866 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002866:	7bfb      	ldrb	r3, [r7, #15]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	807b      	strh	r3, [r7, #2]
 8002880:	4613      	mov	r3, r2
 8002882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002884:	787b      	ldrb	r3, [r7, #1]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002890:	e003      	b.n	800289a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002892:	887b      	ldrh	r3, [r7, #2]
 8002894:	041a      	lsls	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	619a      	str	r2, [r3, #24]
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028b2:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d006      	beq.n	80028cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028be:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe f936 	bl	8000b38 <HAL_GPIO_EXTI_Callback>
  }
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40013c00 	.word	0x40013c00

080028d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4b20      	ldr	r3, [pc, #128]	; (8002968 <HAL_PWREx_EnableOverDrive+0x90>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a1f      	ldr	r2, [pc, #124]	; (8002968 <HAL_PWREx_EnableOverDrive+0x90>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <HAL_PWREx_EnableOverDrive+0x90>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028fe:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_PWREx_EnableOverDrive+0x94>)
 8002900:	2201      	movs	r2, #1
 8002902:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002904:	f7fe fcd0 	bl	80012a8 <HAL_GetTick>
 8002908:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800290a:	e009      	b.n	8002920 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800290c:	f7fe fccc 	bl	80012a8 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800291a:	d901      	bls.n	8002920 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e01f      	b.n	8002960 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002920:	4b13      	ldr	r3, [pc, #76]	; (8002970 <HAL_PWREx_EnableOverDrive+0x98>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292c:	d1ee      	bne.n	800290c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002930:	2201      	movs	r2, #1
 8002932:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002934:	f7fe fcb8 	bl	80012a8 <HAL_GetTick>
 8002938:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800293a:	e009      	b.n	8002950 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800293c:	f7fe fcb4 	bl	80012a8 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800294a:	d901      	bls.n	8002950 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e007      	b.n	8002960 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <HAL_PWREx_EnableOverDrive+0x98>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800295c:	d1ee      	bne.n	800293c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40023800 	.word	0x40023800
 800296c:	420e0040 	.word	0x420e0040
 8002970:	40007000 	.word	0x40007000
 8002974:	420e0044 	.word	0x420e0044

08002978 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e267      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d075      	beq.n	8002a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002996:	4b88      	ldr	r3, [pc, #544]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d00c      	beq.n	80029bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a2:	4b85      	ldr	r3, [pc, #532]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d112      	bne.n	80029d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ae:	4b82      	ldr	r3, [pc, #520]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ba:	d10b      	bne.n	80029d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029bc:	4b7e      	ldr	r3, [pc, #504]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d05b      	beq.n	8002a80 <HAL_RCC_OscConfig+0x108>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d157      	bne.n	8002a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e242      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029dc:	d106      	bne.n	80029ec <HAL_RCC_OscConfig+0x74>
 80029de:	4b76      	ldr	r3, [pc, #472]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a75      	ldr	r2, [pc, #468]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e01d      	b.n	8002a28 <HAL_RCC_OscConfig+0xb0>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x98>
 80029f6:	4b70      	ldr	r3, [pc, #448]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a6f      	ldr	r2, [pc, #444]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 80029fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	4b6d      	ldr	r3, [pc, #436]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a6c      	ldr	r2, [pc, #432]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	e00b      	b.n	8002a28 <HAL_RCC_OscConfig+0xb0>
 8002a10:	4b69      	ldr	r3, [pc, #420]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a68      	ldr	r2, [pc, #416]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	4b66      	ldr	r3, [pc, #408]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a65      	ldr	r2, [pc, #404]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d013      	beq.n	8002a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe fc3a 	bl	80012a8 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a38:	f7fe fc36 	bl	80012a8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e207      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	4b5b      	ldr	r3, [pc, #364]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0xc0>
 8002a56:	e014      	b.n	8002a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe fc26 	bl	80012a8 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a60:	f7fe fc22 	bl	80012a8 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e1f3      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	4b51      	ldr	r3, [pc, #324]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0xe8>
 8002a7e:	e000      	b.n	8002a82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d063      	beq.n	8002b56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a8e:	4b4a      	ldr	r3, [pc, #296]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9a:	4b47      	ldr	r3, [pc, #284]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d11c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa6:	4b44      	ldr	r3, [pc, #272]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d116      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab2:	4b41      	ldr	r3, [pc, #260]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_RCC_OscConfig+0x152>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d001      	beq.n	8002aca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e1c7      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aca:	4b3b      	ldr	r3, [pc, #236]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4937      	ldr	r1, [pc, #220]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ade:	e03a      	b.n	8002b56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d020      	beq.n	8002b2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae8:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <HAL_RCC_OscConfig+0x244>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7fe fbdb 	bl	80012a8 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af6:	f7fe fbd7 	bl	80012a8 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1a8      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b14:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4925      	ldr	r1, [pc, #148]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]
 8002b28:	e015      	b.n	8002b56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2a:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_RCC_OscConfig+0x244>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fbba 	bl	80012a8 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b38:	f7fe fbb6 	bl	80012a8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e187      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d036      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d016      	beq.n	8002b98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <HAL_RCC_OscConfig+0x248>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b70:	f7fe fb9a 	bl	80012a8 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b78:	f7fe fb96 	bl	80012a8 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e167      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x200>
 8002b96:	e01b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b98:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_RCC_OscConfig+0x248>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9e:	f7fe fb83 	bl	80012a8 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	e00e      	b.n	8002bc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba6:	f7fe fb7f 	bl	80012a8 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d907      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e150      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	42470000 	.word	0x42470000
 8002bc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc4:	4b88      	ldr	r3, [pc, #544]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ea      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8097 	beq.w	8002d0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be2:	4b81      	ldr	r3, [pc, #516]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10f      	bne.n	8002c0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	4b7d      	ldr	r3, [pc, #500]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a7c      	ldr	r2, [pc, #496]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfe:	4b7a      	ldr	r3, [pc, #488]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0e:	4b77      	ldr	r3, [pc, #476]	; (8002dec <HAL_RCC_OscConfig+0x474>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d118      	bne.n	8002c4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c1a:	4b74      	ldr	r3, [pc, #464]	; (8002dec <HAL_RCC_OscConfig+0x474>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a73      	ldr	r2, [pc, #460]	; (8002dec <HAL_RCC_OscConfig+0x474>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c26:	f7fe fb3f 	bl	80012a8 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2e:	f7fe fb3b 	bl	80012a8 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e10c      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c40:	4b6a      	ldr	r3, [pc, #424]	; (8002dec <HAL_RCC_OscConfig+0x474>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_OscConfig+0x2ea>
 8002c54:	4b64      	ldr	r3, [pc, #400]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	4a63      	ldr	r2, [pc, #396]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c60:	e01c      	b.n	8002c9c <HAL_RCC_OscConfig+0x324>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x30c>
 8002c6a:	4b5f      	ldr	r3, [pc, #380]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a5e      	ldr	r2, [pc, #376]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70
 8002c76:	4b5c      	ldr	r3, [pc, #368]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	4a5b      	ldr	r2, [pc, #364]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
 8002c82:	e00b      	b.n	8002c9c <HAL_RCC_OscConfig+0x324>
 8002c84:	4b58      	ldr	r3, [pc, #352]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	4a57      	ldr	r2, [pc, #348]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c90:	4b55      	ldr	r3, [pc, #340]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	4a54      	ldr	r2, [pc, #336]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002c96:	f023 0304 	bic.w	r3, r3, #4
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d015      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fe fb00 	bl	80012a8 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7fe fafc 	bl	80012a8 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e0cb      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc2:	4b49      	ldr	r3, [pc, #292]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0ee      	beq.n	8002cac <HAL_RCC_OscConfig+0x334>
 8002cce:	e014      	b.n	8002cfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd0:	f7fe faea 	bl	80012a8 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fe fae6 	bl	80012a8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e0b5      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cee:	4b3e      	ldr	r3, [pc, #248]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ee      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cfa:	7dfb      	ldrb	r3, [r7, #23]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d00:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	4a38      	ldr	r2, [pc, #224]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80a1 	beq.w	8002e58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d16:	4b34      	ldr	r3, [pc, #208]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d05c      	beq.n	8002ddc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d141      	bne.n	8002dae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d2a:	4b31      	ldr	r3, [pc, #196]	; (8002df0 <HAL_RCC_OscConfig+0x478>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fe faba 	bl	80012a8 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fe fab6 	bl	80012a8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e087      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69da      	ldr	r2, [r3, #28]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	019b      	lsls	r3, r3, #6
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	041b      	lsls	r3, r3, #16
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	061b      	lsls	r3, r3, #24
 8002d7a:	491b      	ldr	r1, [pc, #108]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <HAL_RCC_OscConfig+0x478>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fe fa8f 	bl	80012a8 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8e:	f7fe fa8b 	bl	80012a8 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e05c      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x416>
 8002dac:	e054      	b.n	8002e58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <HAL_RCC_OscConfig+0x478>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe fa78 	bl	80012a8 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fe fa74 	bl	80012a8 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e045      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x444>
 8002dda:	e03d      	b.n	8002e58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e038      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40007000 	.word	0x40007000
 8002df0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_RCC_OscConfig+0x4ec>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d028      	beq.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d121      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d11a      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e24:	4013      	ands	r3, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d111      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	085b      	lsrs	r3, r3, #1
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d107      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800

08002e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0cc      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b68      	ldr	r3, [pc, #416]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d90c      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b65      	ldr	r3, [pc, #404]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b63      	ldr	r3, [pc, #396]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0b8      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ebc:	4b59      	ldr	r3, [pc, #356]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a58      	ldr	r2, [pc, #352]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed4:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a52      	ldr	r2, [pc, #328]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee0:	4b50      	ldr	r3, [pc, #320]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	494d      	ldr	r1, [pc, #308]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d044      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b47      	ldr	r3, [pc, #284]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d119      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e07f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f26:	4b3f      	ldr	r3, [pc, #252]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e06f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f36:	4b3b      	ldr	r3, [pc, #236]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e067      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f46:	4b37      	ldr	r3, [pc, #220]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4934      	ldr	r1, [pc, #208]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f58:	f7fe f9a6 	bl	80012a8 <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f60:	f7fe f9a2 	bl	80012a8 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e04f      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 020c 	and.w	r2, r3, #12
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d1eb      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d20c      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b22      	ldr	r3, [pc, #136]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e032      	b.n	8003016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4916      	ldr	r1, [pc, #88]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	490e      	ldr	r1, [pc, #56]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fee:	f000 f821 	bl	8003034 <HAL_RCC_GetSysClockFreq>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	490a      	ldr	r1, [pc, #40]	; (8003028 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	5ccb      	ldrb	r3, [r1, r3]
 8003002:	fa22 f303 	lsr.w	r3, r2, r3
 8003006:	4a09      	ldr	r2, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe f906 	bl	8001220 <HAL_InitTick>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40023c00 	.word	0x40023c00
 8003024:	40023800 	.word	0x40023800
 8003028:	08005f0c 	.word	0x08005f0c
 800302c:	20000000 	.word	0x20000000
 8003030:	20000004 	.word	0x20000004

08003034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003038:	b094      	sub	sp, #80	; 0x50
 800303a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	647b      	str	r3, [r7, #68]	; 0x44
 8003040:	2300      	movs	r3, #0
 8003042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003044:	2300      	movs	r3, #0
 8003046:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304c:	4b79      	ldr	r3, [pc, #484]	; (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 030c 	and.w	r3, r3, #12
 8003054:	2b08      	cmp	r3, #8
 8003056:	d00d      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x40>
 8003058:	2b08      	cmp	r3, #8
 800305a:	f200 80e1 	bhi.w	8003220 <HAL_RCC_GetSysClockFreq+0x1ec>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x34>
 8003062:	2b04      	cmp	r3, #4
 8003064:	d003      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x3a>
 8003066:	e0db      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b73      	ldr	r3, [pc, #460]	; (8003238 <HAL_RCC_GetSysClockFreq+0x204>)
 800306a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800306c:	e0db      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800306e:	4b73      	ldr	r3, [pc, #460]	; (800323c <HAL_RCC_GetSysClockFreq+0x208>)
 8003070:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003072:	e0d8      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003074:	4b6f      	ldr	r3, [pc, #444]	; (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800307c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800307e:	4b6d      	ldr	r3, [pc, #436]	; (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d063      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308a:	4b6a      	ldr	r3, [pc, #424]	; (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	2200      	movs	r2, #0
 8003092:	63bb      	str	r3, [r7, #56]	; 0x38
 8003094:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309c:	633b      	str	r3, [r7, #48]	; 0x30
 800309e:	2300      	movs	r3, #0
 80030a0:	637b      	str	r3, [r7, #52]	; 0x34
 80030a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030a6:	4622      	mov	r2, r4
 80030a8:	462b      	mov	r3, r5
 80030aa:	f04f 0000 	mov.w	r0, #0
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	0159      	lsls	r1, r3, #5
 80030b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b8:	0150      	lsls	r0, r2, #5
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4621      	mov	r1, r4
 80030c0:	1a51      	subs	r1, r2, r1
 80030c2:	6139      	str	r1, [r7, #16]
 80030c4:	4629      	mov	r1, r5
 80030c6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030d8:	4659      	mov	r1, fp
 80030da:	018b      	lsls	r3, r1, #6
 80030dc:	4651      	mov	r1, sl
 80030de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030e2:	4651      	mov	r1, sl
 80030e4:	018a      	lsls	r2, r1, #6
 80030e6:	4651      	mov	r1, sl
 80030e8:	ebb2 0801 	subs.w	r8, r2, r1
 80030ec:	4659      	mov	r1, fp
 80030ee:	eb63 0901 	sbc.w	r9, r3, r1
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003106:	4690      	mov	r8, r2
 8003108:	4699      	mov	r9, r3
 800310a:	4623      	mov	r3, r4
 800310c:	eb18 0303 	adds.w	r3, r8, r3
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	462b      	mov	r3, r5
 8003114:	eb49 0303 	adc.w	r3, r9, r3
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003126:	4629      	mov	r1, r5
 8003128:	024b      	lsls	r3, r1, #9
 800312a:	4621      	mov	r1, r4
 800312c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003130:	4621      	mov	r1, r4
 8003132:	024a      	lsls	r2, r1, #9
 8003134:	4610      	mov	r0, r2
 8003136:	4619      	mov	r1, r3
 8003138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800313a:	2200      	movs	r2, #0
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
 800313e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003140:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003144:	f7fd f8bc 	bl	80002c0 <__aeabi_uldivmod>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4613      	mov	r3, r2
 800314e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003150:	e058      	b.n	8003204 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003152:	4b38      	ldr	r3, [pc, #224]	; (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	099b      	lsrs	r3, r3, #6
 8003158:	2200      	movs	r2, #0
 800315a:	4618      	mov	r0, r3
 800315c:	4611      	mov	r1, r2
 800315e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003162:	623b      	str	r3, [r7, #32]
 8003164:	2300      	movs	r3, #0
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
 8003168:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800316c:	4642      	mov	r2, r8
 800316e:	464b      	mov	r3, r9
 8003170:	f04f 0000 	mov.w	r0, #0
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	0159      	lsls	r1, r3, #5
 800317a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800317e:	0150      	lsls	r0, r2, #5
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4641      	mov	r1, r8
 8003186:	ebb2 0a01 	subs.w	sl, r2, r1
 800318a:	4649      	mov	r1, r9
 800318c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800319c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031a4:	ebb2 040a 	subs.w	r4, r2, sl
 80031a8:	eb63 050b 	sbc.w	r5, r3, fp
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	00eb      	lsls	r3, r5, #3
 80031b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ba:	00e2      	lsls	r2, r4, #3
 80031bc:	4614      	mov	r4, r2
 80031be:	461d      	mov	r5, r3
 80031c0:	4643      	mov	r3, r8
 80031c2:	18e3      	adds	r3, r4, r3
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	464b      	mov	r3, r9
 80031c8:	eb45 0303 	adc.w	r3, r5, r3
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031da:	4629      	mov	r1, r5
 80031dc:	028b      	lsls	r3, r1, #10
 80031de:	4621      	mov	r1, r4
 80031e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031e4:	4621      	mov	r1, r4
 80031e6:	028a      	lsls	r2, r1, #10
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ee:	2200      	movs	r2, #0
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	61fa      	str	r2, [r7, #28]
 80031f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f8:	f7fd f862 	bl	80002c0 <__aeabi_uldivmod>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4613      	mov	r3, r2
 8003202:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_GetSysClockFreq+0x200>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	3301      	adds	r3, #1
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003214:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800321e:	e002      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_GetSysClockFreq+0x204>)
 8003222:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003228:	4618      	mov	r0, r3
 800322a:	3750      	adds	r7, #80	; 0x50
 800322c:	46bd      	mov	sp, r7
 800322e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	00f42400 	.word	0x00f42400
 800323c:	007a1200 	.word	0x007a1200

08003240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <HAL_RCC_GetHCLKFreq+0x14>)
 8003246:	681b      	ldr	r3, [r3, #0]
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000000 	.word	0x20000000

08003258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800325c:	f7ff fff0 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8003260:	4602      	mov	r2, r0
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	0a9b      	lsrs	r3, r3, #10
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	4903      	ldr	r1, [pc, #12]	; (800327c <HAL_RCC_GetPCLK1Freq+0x24>)
 800326e:	5ccb      	ldrb	r3, [r1, r3]
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40023800 	.word	0x40023800
 800327c:	08005f1c 	.word	0x08005f1c

08003280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003284:	f7ff ffdc 	bl	8003240 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0b5b      	lsrs	r3, r3, #13
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4903      	ldr	r1, [pc, #12]	; (80032a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40023800 	.word	0x40023800
 80032a4:	08005f1c 	.word	0x08005f1c

080032a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e041      	b.n	800333e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fd feb0 	bl	8001034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f000 fac4 	bl	8003874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d001      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e04e      	b.n	80033fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a23      	ldr	r2, [pc, #140]	; (800340c <HAL_TIM_Base_Start_IT+0xc4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d022      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338a:	d01d      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <HAL_TIM_Base_Start_IT+0xc8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d018      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1e      	ldr	r2, [pc, #120]	; (8003414 <HAL_TIM_Base_Start_IT+0xcc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <HAL_TIM_Base_Start_IT+0xd0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00e      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a1b      	ldr	r2, [pc, #108]	; (800341c <HAL_TIM_Base_Start_IT+0xd4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d009      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a19      	ldr	r2, [pc, #100]	; (8003420 <HAL_TIM_Base_Start_IT+0xd8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_TIM_Base_Start_IT+0x80>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a18      	ldr	r2, [pc, #96]	; (8003424 <HAL_TIM_Base_Start_IT+0xdc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d111      	bne.n	80033ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b06      	cmp	r3, #6
 80033d8:	d010      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0201 	orr.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ea:	e007      	b.n	80033fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40010000 	.word	0x40010000
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800
 8003418:	40000c00 	.word	0x40000c00
 800341c:	40010400 	.word	0x40010400
 8003420:	40014000 	.word	0x40014000
 8003424:	40001800 	.word	0x40001800

08003428 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6a1a      	ldr	r2, [r3, #32]
 8003446:	f241 1311 	movw	r3, #4369	; 0x1111
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10f      	bne.n	8003470 <HAL_TIM_Base_Stop_IT+0x48>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6a1a      	ldr	r2, [r3, #32]
 8003456:	f240 4344 	movw	r3, #1092	; 0x444
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d107      	bne.n	8003470 <HAL_TIM_Base_Stop_IT+0x48>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b02      	cmp	r3, #2
 800349a:	d122      	bne.n	80034e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d11b      	bne.n	80034e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f06f 0202 	mvn.w	r2, #2
 80034b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f9b5 	bl	8003838 <HAL_TIM_IC_CaptureCallback>
 80034ce:	e005      	b.n	80034dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f9a7 	bl	8003824 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f9b8 	bl	800384c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d122      	bne.n	8003536 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d11b      	bne.n	8003536 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f06f 0204 	mvn.w	r2, #4
 8003506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f98b 	bl	8003838 <HAL_TIM_IC_CaptureCallback>
 8003522:	e005      	b.n	8003530 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f97d 	bl	8003824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f98e 	bl	800384c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b08      	cmp	r3, #8
 8003542:	d122      	bne.n	800358a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b08      	cmp	r3, #8
 8003550:	d11b      	bne.n	800358a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f06f 0208 	mvn.w	r2, #8
 800355a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2204      	movs	r2, #4
 8003560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f961 	bl	8003838 <HAL_TIM_IC_CaptureCallback>
 8003576:	e005      	b.n	8003584 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f953 	bl	8003824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f964 	bl	800384c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b10      	cmp	r3, #16
 8003596:	d122      	bne.n	80035de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d11b      	bne.n	80035de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f06f 0210 	mvn.w	r2, #16
 80035ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2208      	movs	r2, #8
 80035b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f937 	bl	8003838 <HAL_TIM_IC_CaptureCallback>
 80035ca:	e005      	b.n	80035d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f929 	bl	8003824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f93a 	bl	800384c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d10e      	bne.n	800360a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d107      	bne.n	800360a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f06f 0201 	mvn.w	r2, #1
 8003602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7fd faad 	bl	8000b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	2b80      	cmp	r3, #128	; 0x80
 8003616:	d10e      	bne.n	8003636 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003622:	2b80      	cmp	r3, #128	; 0x80
 8003624:	d107      	bne.n	8003636 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800362e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fadf 	bl	8003bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003640:	2b40      	cmp	r3, #64	; 0x40
 8003642:	d10e      	bne.n	8003662 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b40      	cmp	r3, #64	; 0x40
 8003650:	d107      	bne.n	8003662 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800365a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f8ff 	bl	8003860 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b20      	cmp	r3, #32
 800366e:	d10e      	bne.n	800368e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b20      	cmp	r3, #32
 800367c:	d107      	bne.n	800368e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f06f 0220 	mvn.w	r2, #32
 8003686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 faa9 	bl	8003be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_TIM_ConfigClockSource+0x1c>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e0b4      	b.n	800381c <HAL_TIM_ConfigClockSource+0x186>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ea:	d03e      	beq.n	800376a <HAL_TIM_ConfigClockSource+0xd4>
 80036ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f0:	f200 8087 	bhi.w	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 80036f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f8:	f000 8086 	beq.w	8003808 <HAL_TIM_ConfigClockSource+0x172>
 80036fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003700:	d87f      	bhi.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 8003702:	2b70      	cmp	r3, #112	; 0x70
 8003704:	d01a      	beq.n	800373c <HAL_TIM_ConfigClockSource+0xa6>
 8003706:	2b70      	cmp	r3, #112	; 0x70
 8003708:	d87b      	bhi.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 800370a:	2b60      	cmp	r3, #96	; 0x60
 800370c:	d050      	beq.n	80037b0 <HAL_TIM_ConfigClockSource+0x11a>
 800370e:	2b60      	cmp	r3, #96	; 0x60
 8003710:	d877      	bhi.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 8003712:	2b50      	cmp	r3, #80	; 0x50
 8003714:	d03c      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0xfa>
 8003716:	2b50      	cmp	r3, #80	; 0x50
 8003718:	d873      	bhi.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d058      	beq.n	80037d0 <HAL_TIM_ConfigClockSource+0x13a>
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d86f      	bhi.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 8003722:	2b30      	cmp	r3, #48	; 0x30
 8003724:	d064      	beq.n	80037f0 <HAL_TIM_ConfigClockSource+0x15a>
 8003726:	2b30      	cmp	r3, #48	; 0x30
 8003728:	d86b      	bhi.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 800372a:	2b20      	cmp	r3, #32
 800372c:	d060      	beq.n	80037f0 <HAL_TIM_ConfigClockSource+0x15a>
 800372e:	2b20      	cmp	r3, #32
 8003730:	d867      	bhi.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d05c      	beq.n	80037f0 <HAL_TIM_ConfigClockSource+0x15a>
 8003736:	2b10      	cmp	r3, #16
 8003738:	d05a      	beq.n	80037f0 <HAL_TIM_ConfigClockSource+0x15a>
 800373a:	e062      	b.n	8003802 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	6899      	ldr	r1, [r3, #8]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f000 f9ac 	bl	8003aa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800375e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	609a      	str	r2, [r3, #8]
      break;
 8003768:	e04f      	b.n	800380a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6899      	ldr	r1, [r3, #8]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f000 f995 	bl	8003aa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800378c:	609a      	str	r2, [r3, #8]
      break;
 800378e:	e03c      	b.n	800380a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	461a      	mov	r2, r3
 800379e:	f000 f909 	bl	80039b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2150      	movs	r1, #80	; 0x50
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f962 	bl	8003a72 <TIM_ITRx_SetConfig>
      break;
 80037ae:	e02c      	b.n	800380a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	461a      	mov	r2, r3
 80037be:	f000 f928 	bl	8003a12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2160      	movs	r1, #96	; 0x60
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f952 	bl	8003a72 <TIM_ITRx_SetConfig>
      break;
 80037ce:	e01c      	b.n	800380a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	461a      	mov	r2, r3
 80037de:	f000 f8e9 	bl	80039b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2140      	movs	r1, #64	; 0x40
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f942 	bl	8003a72 <TIM_ITRx_SetConfig>
      break;
 80037ee:	e00c      	b.n	800380a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4619      	mov	r1, r3
 80037fa:	4610      	mov	r0, r2
 80037fc:	f000 f939 	bl	8003a72 <TIM_ITRx_SetConfig>
      break;
 8003800:	e003      	b.n	800380a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
      break;
 8003806:	e000      	b.n	800380a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003808:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800381a:	7bfb      	ldrb	r3, [r7, #15]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a40      	ldr	r2, [pc, #256]	; (8003988 <TIM_Base_SetConfig+0x114>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d013      	beq.n	80038b4 <TIM_Base_SetConfig+0x40>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003892:	d00f      	beq.n	80038b4 <TIM_Base_SetConfig+0x40>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a3d      	ldr	r2, [pc, #244]	; (800398c <TIM_Base_SetConfig+0x118>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00b      	beq.n	80038b4 <TIM_Base_SetConfig+0x40>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a3c      	ldr	r2, [pc, #240]	; (8003990 <TIM_Base_SetConfig+0x11c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d007      	beq.n	80038b4 <TIM_Base_SetConfig+0x40>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a3b      	ldr	r2, [pc, #236]	; (8003994 <TIM_Base_SetConfig+0x120>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d003      	beq.n	80038b4 <TIM_Base_SetConfig+0x40>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a3a      	ldr	r2, [pc, #232]	; (8003998 <TIM_Base_SetConfig+0x124>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d108      	bne.n	80038c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2f      	ldr	r2, [pc, #188]	; (8003988 <TIM_Base_SetConfig+0x114>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d02b      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d4:	d027      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a2c      	ldr	r2, [pc, #176]	; (800398c <TIM_Base_SetConfig+0x118>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d023      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a2b      	ldr	r2, [pc, #172]	; (8003990 <TIM_Base_SetConfig+0x11c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01f      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <TIM_Base_SetConfig+0x120>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01b      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a29      	ldr	r2, [pc, #164]	; (8003998 <TIM_Base_SetConfig+0x124>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d017      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a28      	ldr	r2, [pc, #160]	; (800399c <TIM_Base_SetConfig+0x128>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a27      	ldr	r2, [pc, #156]	; (80039a0 <TIM_Base_SetConfig+0x12c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00f      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a26      	ldr	r2, [pc, #152]	; (80039a4 <TIM_Base_SetConfig+0x130>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00b      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <TIM_Base_SetConfig+0x134>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d007      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a24      	ldr	r2, [pc, #144]	; (80039ac <TIM_Base_SetConfig+0x138>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d003      	beq.n	8003926 <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a23      	ldr	r2, [pc, #140]	; (80039b0 <TIM_Base_SetConfig+0x13c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d108      	bne.n	8003938 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <TIM_Base_SetConfig+0x114>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_Base_SetConfig+0xf8>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <TIM_Base_SetConfig+0x124>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d103      	bne.n	8003974 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	615a      	str	r2, [r3, #20]
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40010000 	.word	0x40010000
 800398c:	40000400 	.word	0x40000400
 8003990:	40000800 	.word	0x40000800
 8003994:	40000c00 	.word	0x40000c00
 8003998:	40010400 	.word	0x40010400
 800399c:	40014000 	.word	0x40014000
 80039a0:	40014400 	.word	0x40014400
 80039a4:	40014800 	.word	0x40014800
 80039a8:	40001800 	.word	0x40001800
 80039ac:	40001c00 	.word	0x40001c00
 80039b0:	40002000 	.word	0x40002000

080039b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f023 0201 	bic.w	r2, r3, #1
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f023 030a 	bic.w	r3, r3, #10
 80039f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	621a      	str	r2, [r3, #32]
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b087      	sub	sp, #28
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	f023 0210 	bic.w	r2, r3, #16
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	031b      	lsls	r3, r3, #12
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	621a      	str	r2, [r3, #32]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b085      	sub	sp, #20
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f043 0307 	orr.w	r3, r3, #7
 8003a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	609a      	str	r2, [r3, #8]
}
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	021a      	lsls	r2, r3, #8
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	609a      	str	r2, [r3, #8]
}
 8003adc:	bf00      	nop
 8003ade:	371c      	adds	r7, #28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e05a      	b.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a21      	ldr	r2, [pc, #132]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d022      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4c:	d01d      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1d      	ldr	r2, [pc, #116]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d018      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00e      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d009      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a17      	ldr	r2, [pc, #92]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d004      	beq.n	8003b8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d10c      	bne.n	8003ba4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40010000 	.word	0x40010000
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800
 8003bd0:	40000c00 	.word	0x40000c00
 8003bd4:	40010400 	.word	0x40010400
 8003bd8:	40014000 	.word	0x40014000
 8003bdc:	40001800 	.word	0x40001800

08003be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e03f      	b.n	8003c9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd fa5a 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fd23 	bl	8004698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695a      	ldr	r2, [r3, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b085      	sub	sp, #20
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	4613      	mov	r3, r2
 8003cae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d130      	bne.n	8003d1e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_UART_Transmit_IT+0x26>
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e029      	b.n	8003d20 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_UART_Transmit_IT+0x38>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e022      	b.n	8003d20 <HAL_UART_Transmit_IT+0x7e>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	88fa      	ldrh	r2, [r7, #6]
 8003cec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	88fa      	ldrh	r2, [r7, #6]
 8003cf2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2221      	movs	r2, #33	; 0x21
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d18:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003d1e:	2302      	movs	r3, #2
  }
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	4613      	mov	r3, r2
 8003d38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d11d      	bne.n	8003d82 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_UART_Receive_IT+0x26>
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e016      	b.n	8003d84 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_UART_Receive_IT+0x38>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e00f      	b.n	8003d84 <HAL_UART_Receive_IT+0x58>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	461a      	mov	r2, r3
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fab5 	bl	80042e8 <UART_Start_Receive_IT>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	e000      	b.n	8003d84 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
  }
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b0ba      	sub	sp, #232	; 0xe8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10f      	bne.n	8003df2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <HAL_UART_IRQHandler+0x66>
 8003dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fb99 	bl	8004522 <UART_Receive_IT>
      return;
 8003df0:	e256      	b.n	80042a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80de 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x22c>
 8003dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d106      	bne.n	8003e16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80d1 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <HAL_UART_IRQHandler+0xae>
 8003e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f043 0201 	orr.w	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00b      	beq.n	8003e5e <HAL_UART_IRQHandler+0xd2>
 8003e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f043 0202 	orr.w	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <HAL_UART_IRQHandler+0xf6>
 8003e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f043 0204 	orr.w	r2, r3, #4
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d011      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x126>
 8003e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d105      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f043 0208 	orr.w	r2, r3, #8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 81ed 	beq.w	8004296 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_UART_IRQHandler+0x14e>
 8003ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fb24 	bl	8004522 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b40      	cmp	r3, #64	; 0x40
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <HAL_UART_IRQHandler+0x17a>
 8003efe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d04f      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fa2c 	bl	8004364 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f16:	2b40      	cmp	r3, #64	; 0x40
 8003f18:	d141      	bne.n	8003f9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3314      	adds	r3, #20
 8003f42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1d9      	bne.n	8003f1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d013      	beq.n	8003f96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	4a7d      	ldr	r2, [pc, #500]	; (8004168 <HAL_UART_IRQHandler+0x3dc>)
 8003f74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe fa93 	bl	80024a6 <HAL_DMA_Abort_IT>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d016      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f90:	4610      	mov	r0, r2
 8003f92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f94:	e00e      	b.n	8003fb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f990 	bl	80042bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9c:	e00a      	b.n	8003fb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f98c 	bl	80042bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa4:	e006      	b.n	8003fb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f988 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fb2:	e170      	b.n	8004296 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	bf00      	nop
    return;
 8003fb6:	e16e      	b.n	8004296 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	f040 814a 	bne.w	8004256 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8143 	beq.w	8004256 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 813c 	beq.w	8004256 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	f040 80b4 	bne.w	800416c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004010:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8140 	beq.w	800429a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800401e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004022:	429a      	cmp	r2, r3
 8004024:	f080 8139 	bcs.w	800429a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800402e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403a:	f000 8088 	beq.w	800414e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004054:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800405c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800406a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800406e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004076:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004082:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1d9      	bne.n	800403e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3314      	adds	r3, #20
 8004090:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800409a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3314      	adds	r3, #20
 80040aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e1      	bne.n	800408a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3314      	adds	r3, #20
 80040e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e3      	bne.n	80040c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800411c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411e:	f023 0310 	bic.w	r3, r3, #16
 8004122:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	330c      	adds	r3, #12
 800412c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004130:	65ba      	str	r2, [r7, #88]	; 0x58
 8004132:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004136:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800413e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e3      	bne.n	800410c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	4618      	mov	r0, r3
 800414a:	f7fe f93c 	bl	80023c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004156:	b29b      	uxth	r3, r3
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	b29b      	uxth	r3, r3
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f8b6 	bl	80042d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004164:	e099      	b.n	800429a <HAL_UART_IRQHandler+0x50e>
 8004166:	bf00      	nop
 8004168:	0800442b 	.word	0x0800442b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004174:	b29b      	uxth	r3, r3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 808b 	beq.w	800429e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004188:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8086 	beq.w	800429e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	330c      	adds	r3, #12
 8004198:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041b6:	647a      	str	r2, [r7, #68]	; 0x44
 80041b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e3      	bne.n	8004192 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3314      	adds	r3, #20
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	623b      	str	r3, [r7, #32]
   return(result);
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	f023 0301 	bic.w	r3, r3, #1
 80041e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3314      	adds	r3, #20
 80041ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041ee:	633a      	str	r2, [r7, #48]	; 0x30
 80041f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e3      	bne.n	80041ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0310 	bic.w	r3, r3, #16
 8004226:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004234:	61fa      	str	r2, [r7, #28]
 8004236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	69b9      	ldr	r1, [r7, #24]
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	617b      	str	r3, [r7, #20]
   return(result);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e3      	bne.n	8004210 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004248:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800424c:	4619      	mov	r1, r3
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f83e 	bl	80042d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004254:	e023      	b.n	800429e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <HAL_UART_IRQHandler+0x4ea>
 8004262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f8ef 	bl	8004452 <UART_Transmit_IT>
    return;
 8004274:	e014      	b.n	80042a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00e      	beq.n	80042a0 <HAL_UART_IRQHandler+0x514>
 8004282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f92f 	bl	80044f2 <UART_EndTransmit_IT>
    return;
 8004294:	e004      	b.n	80042a0 <HAL_UART_IRQHandler+0x514>
    return;
 8004296:	bf00      	nop
 8004298:	e002      	b.n	80042a0 <HAL_UART_IRQHandler+0x514>
      return;
 800429a:	bf00      	nop
 800429c:	e000      	b.n	80042a0 <HAL_UART_IRQHandler+0x514>
      return;
 800429e:	bf00      	nop
  }
}
 80042a0:	37e8      	adds	r7, #232	; 0xe8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop

080042a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	4613      	mov	r3, r2
 80042f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	88fa      	ldrh	r2, [r7, #6]
 8004300:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	88fa      	ldrh	r2, [r7, #6]
 8004306:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2222      	movs	r2, #34	; 0x22
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004334:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0201 	orr.w	r2, r2, #1
 8004344:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0220 	orr.w	r2, r2, #32
 8004354:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b095      	sub	sp, #84	; 0x54
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800438c:	643a      	str	r2, [r7, #64]	; 0x40
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004392:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e5      	bne.n	800436c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3314      	adds	r3, #20
 80043a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3314      	adds	r3, #20
 80043be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e5      	bne.n	80043a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d119      	bne.n	8004410 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f023 0310 	bic.w	r3, r3, #16
 80043f2:	647b      	str	r3, [r7, #68]	; 0x44
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043fc:	61ba      	str	r2, [r7, #24]
 80043fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6979      	ldr	r1, [r7, #20]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	613b      	str	r3, [r7, #16]
   return(result);
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e5      	bne.n	80043dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800441e:	bf00      	nop
 8004420:	3754      	adds	r7, #84	; 0x54
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f7ff ff39 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b21      	cmp	r3, #33	; 0x21
 8004464:	d13e      	bne.n	80044e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446e:	d114      	bne.n	800449a <UART_Transmit_IT+0x48>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d110      	bne.n	800449a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800448c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	1c9a      	adds	r2, r3, #2
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	621a      	str	r2, [r3, #32]
 8004498:	e008      	b.n	80044ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	1c59      	adds	r1, r3, #1
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6211      	str	r1, [r2, #32]
 80044a4:	781a      	ldrb	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	4619      	mov	r1, r3
 80044ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10f      	bne.n	80044e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e000      	b.n	80044e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044e4:	2302      	movs	r3, #2
  }
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004508:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff fec8 	bl	80042a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b08c      	sub	sp, #48	; 0x30
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b22      	cmp	r3, #34	; 0x22
 8004534:	f040 80ab 	bne.w	800468e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004540:	d117      	bne.n	8004572 <UART_Receive_IT+0x50>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d113      	bne.n	8004572 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	b29b      	uxth	r3, r3
 800455c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004560:	b29a      	uxth	r2, r3
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	1c9a      	adds	r2, r3, #2
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
 8004570:	e026      	b.n	80045c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004578:	2300      	movs	r3, #0
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004584:	d007      	beq.n	8004596 <UART_Receive_IT+0x74>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <UART_Receive_IT+0x82>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	e008      	b.n	80045b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4619      	mov	r1, r3
 80045ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d15a      	bne.n	800468a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0220 	bic.w	r2, r2, #32
 80045e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0201 	bic.w	r2, r2, #1
 8004602:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	2b01      	cmp	r3, #1
 8004612:	d135      	bne.n	8004680 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	330c      	adds	r3, #12
 8004620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	613b      	str	r3, [r7, #16]
   return(result);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f023 0310 	bic.w	r3, r3, #16
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	330c      	adds	r3, #12
 8004638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463a:	623a      	str	r2, [r7, #32]
 800463c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	69f9      	ldr	r1, [r7, #28]
 8004640:	6a3a      	ldr	r2, [r7, #32]
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	61bb      	str	r3, [r7, #24]
   return(result);
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e5      	bne.n	800461a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b10      	cmp	r3, #16
 800465a:	d10a      	bne.n	8004672 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800465c:	2300      	movs	r3, #0
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004676:	4619      	mov	r1, r3
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff fe29 	bl	80042d0 <HAL_UARTEx_RxEventCallback>
 800467e:	e002      	b.n	8004686 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7fc faa7 	bl	8000bd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	e002      	b.n	8004690 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	e000      	b.n	8004690 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800468e:	2302      	movs	r3, #2
  }
}
 8004690:	4618      	mov	r0, r3
 8004692:	3730      	adds	r7, #48	; 0x30
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800469c:	b0c0      	sub	sp, #256	; 0x100
 800469e:	af00      	add	r7, sp, #0
 80046a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	68d9      	ldr	r1, [r3, #12]
 80046b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	ea40 0301 	orr.w	r3, r0, r1
 80046c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046f0:	f021 010c 	bic.w	r1, r1, #12
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046fe:	430b      	orrs	r3, r1
 8004700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800470e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004712:	6999      	ldr	r1, [r3, #24]
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	ea40 0301 	orr.w	r3, r0, r1
 800471e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4b8f      	ldr	r3, [pc, #572]	; (8004964 <UART_SetConfig+0x2cc>)
 8004728:	429a      	cmp	r2, r3
 800472a:	d005      	beq.n	8004738 <UART_SetConfig+0xa0>
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b8d      	ldr	r3, [pc, #564]	; (8004968 <UART_SetConfig+0x2d0>)
 8004734:	429a      	cmp	r2, r3
 8004736:	d104      	bne.n	8004742 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004738:	f7fe fda2 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 800473c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004740:	e003      	b.n	800474a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004742:	f7fe fd89 	bl	8003258 <HAL_RCC_GetPCLK1Freq>
 8004746:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800474a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004754:	f040 810c 	bne.w	8004970 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800475c:	2200      	movs	r2, #0
 800475e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004762:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004766:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800476a:	4622      	mov	r2, r4
 800476c:	462b      	mov	r3, r5
 800476e:	1891      	adds	r1, r2, r2
 8004770:	65b9      	str	r1, [r7, #88]	; 0x58
 8004772:	415b      	adcs	r3, r3
 8004774:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004776:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800477a:	4621      	mov	r1, r4
 800477c:	eb12 0801 	adds.w	r8, r2, r1
 8004780:	4629      	mov	r1, r5
 8004782:	eb43 0901 	adc.w	r9, r3, r1
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800479a:	4690      	mov	r8, r2
 800479c:	4699      	mov	r9, r3
 800479e:	4623      	mov	r3, r4
 80047a0:	eb18 0303 	adds.w	r3, r8, r3
 80047a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047a8:	462b      	mov	r3, r5
 80047aa:	eb49 0303 	adc.w	r3, r9, r3
 80047ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047c6:	460b      	mov	r3, r1
 80047c8:	18db      	adds	r3, r3, r3
 80047ca:	653b      	str	r3, [r7, #80]	; 0x50
 80047cc:	4613      	mov	r3, r2
 80047ce:	eb42 0303 	adc.w	r3, r2, r3
 80047d2:	657b      	str	r3, [r7, #84]	; 0x54
 80047d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047dc:	f7fb fd70 	bl	80002c0 <__aeabi_uldivmod>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4b61      	ldr	r3, [pc, #388]	; (800496c <UART_SetConfig+0x2d4>)
 80047e6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	011c      	lsls	r4, r3, #4
 80047ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004800:	4642      	mov	r2, r8
 8004802:	464b      	mov	r3, r9
 8004804:	1891      	adds	r1, r2, r2
 8004806:	64b9      	str	r1, [r7, #72]	; 0x48
 8004808:	415b      	adcs	r3, r3
 800480a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800480c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004810:	4641      	mov	r1, r8
 8004812:	eb12 0a01 	adds.w	sl, r2, r1
 8004816:	4649      	mov	r1, r9
 8004818:	eb43 0b01 	adc.w	fp, r3, r1
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004828:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800482c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004830:	4692      	mov	sl, r2
 8004832:	469b      	mov	fp, r3
 8004834:	4643      	mov	r3, r8
 8004836:	eb1a 0303 	adds.w	r3, sl, r3
 800483a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800483e:	464b      	mov	r3, r9
 8004840:	eb4b 0303 	adc.w	r3, fp, r3
 8004844:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004854:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004858:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800485c:	460b      	mov	r3, r1
 800485e:	18db      	adds	r3, r3, r3
 8004860:	643b      	str	r3, [r7, #64]	; 0x40
 8004862:	4613      	mov	r3, r2
 8004864:	eb42 0303 	adc.w	r3, r2, r3
 8004868:	647b      	str	r3, [r7, #68]	; 0x44
 800486a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800486e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004872:	f7fb fd25 	bl	80002c0 <__aeabi_uldivmod>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4611      	mov	r1, r2
 800487c:	4b3b      	ldr	r3, [pc, #236]	; (800496c <UART_SetConfig+0x2d4>)
 800487e:	fba3 2301 	umull	r2, r3, r3, r1
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	2264      	movs	r2, #100	; 0x64
 8004886:	fb02 f303 	mul.w	r3, r2, r3
 800488a:	1acb      	subs	r3, r1, r3
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004892:	4b36      	ldr	r3, [pc, #216]	; (800496c <UART_SetConfig+0x2d4>)
 8004894:	fba3 2302 	umull	r2, r3, r3, r2
 8004898:	095b      	lsrs	r3, r3, #5
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048a0:	441c      	add	r4, r3
 80048a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048b4:	4642      	mov	r2, r8
 80048b6:	464b      	mov	r3, r9
 80048b8:	1891      	adds	r1, r2, r2
 80048ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80048bc:	415b      	adcs	r3, r3
 80048be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048c4:	4641      	mov	r1, r8
 80048c6:	1851      	adds	r1, r2, r1
 80048c8:	6339      	str	r1, [r7, #48]	; 0x30
 80048ca:	4649      	mov	r1, r9
 80048cc:	414b      	adcs	r3, r1
 80048ce:	637b      	str	r3, [r7, #52]	; 0x34
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048dc:	4659      	mov	r1, fp
 80048de:	00cb      	lsls	r3, r1, #3
 80048e0:	4651      	mov	r1, sl
 80048e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048e6:	4651      	mov	r1, sl
 80048e8:	00ca      	lsls	r2, r1, #3
 80048ea:	4610      	mov	r0, r2
 80048ec:	4619      	mov	r1, r3
 80048ee:	4603      	mov	r3, r0
 80048f0:	4642      	mov	r2, r8
 80048f2:	189b      	adds	r3, r3, r2
 80048f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048f8:	464b      	mov	r3, r9
 80048fa:	460a      	mov	r2, r1
 80048fc:	eb42 0303 	adc.w	r3, r2, r3
 8004900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004910:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004914:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004918:	460b      	mov	r3, r1
 800491a:	18db      	adds	r3, r3, r3
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
 800491e:	4613      	mov	r3, r2
 8004920:	eb42 0303 	adc.w	r3, r2, r3
 8004924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800492a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800492e:	f7fb fcc7 	bl	80002c0 <__aeabi_uldivmod>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4b0d      	ldr	r3, [pc, #52]	; (800496c <UART_SetConfig+0x2d4>)
 8004938:	fba3 1302 	umull	r1, r3, r3, r2
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	2164      	movs	r1, #100	; 0x64
 8004940:	fb01 f303 	mul.w	r3, r1, r3
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	3332      	adds	r3, #50	; 0x32
 800494a:	4a08      	ldr	r2, [pc, #32]	; (800496c <UART_SetConfig+0x2d4>)
 800494c:	fba2 2303 	umull	r2, r3, r2, r3
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	f003 0207 	and.w	r2, r3, #7
 8004956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4422      	add	r2, r4
 800495e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004960:	e105      	b.n	8004b6e <UART_SetConfig+0x4d6>
 8004962:	bf00      	nop
 8004964:	40011000 	.word	0x40011000
 8004968:	40011400 	.word	0x40011400
 800496c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004974:	2200      	movs	r2, #0
 8004976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800497a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800497e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004982:	4642      	mov	r2, r8
 8004984:	464b      	mov	r3, r9
 8004986:	1891      	adds	r1, r2, r2
 8004988:	6239      	str	r1, [r7, #32]
 800498a:	415b      	adcs	r3, r3
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
 800498e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004992:	4641      	mov	r1, r8
 8004994:	1854      	adds	r4, r2, r1
 8004996:	4649      	mov	r1, r9
 8004998:	eb43 0501 	adc.w	r5, r3, r1
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	00eb      	lsls	r3, r5, #3
 80049a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049aa:	00e2      	lsls	r2, r4, #3
 80049ac:	4614      	mov	r4, r2
 80049ae:	461d      	mov	r5, r3
 80049b0:	4643      	mov	r3, r8
 80049b2:	18e3      	adds	r3, r4, r3
 80049b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049b8:	464b      	mov	r3, r9
 80049ba:	eb45 0303 	adc.w	r3, r5, r3
 80049be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049de:	4629      	mov	r1, r5
 80049e0:	008b      	lsls	r3, r1, #2
 80049e2:	4621      	mov	r1, r4
 80049e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049e8:	4621      	mov	r1, r4
 80049ea:	008a      	lsls	r2, r1, #2
 80049ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049f0:	f7fb fc66 	bl	80002c0 <__aeabi_uldivmod>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4b60      	ldr	r3, [pc, #384]	; (8004b7c <UART_SetConfig+0x4e4>)
 80049fa:	fba3 2302 	umull	r2, r3, r3, r2
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	011c      	lsls	r4, r3, #4
 8004a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a14:	4642      	mov	r2, r8
 8004a16:	464b      	mov	r3, r9
 8004a18:	1891      	adds	r1, r2, r2
 8004a1a:	61b9      	str	r1, [r7, #24]
 8004a1c:	415b      	adcs	r3, r3
 8004a1e:	61fb      	str	r3, [r7, #28]
 8004a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a24:	4641      	mov	r1, r8
 8004a26:	1851      	adds	r1, r2, r1
 8004a28:	6139      	str	r1, [r7, #16]
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	414b      	adcs	r3, r1
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a3c:	4659      	mov	r1, fp
 8004a3e:	00cb      	lsls	r3, r1, #3
 8004a40:	4651      	mov	r1, sl
 8004a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a46:	4651      	mov	r1, sl
 8004a48:	00ca      	lsls	r2, r1, #3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4642      	mov	r2, r8
 8004a52:	189b      	adds	r3, r3, r2
 8004a54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a58:	464b      	mov	r3, r9
 8004a5a:	460a      	mov	r2, r1
 8004a5c:	eb42 0303 	adc.w	r3, r2, r3
 8004a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a7c:	4649      	mov	r1, r9
 8004a7e:	008b      	lsls	r3, r1, #2
 8004a80:	4641      	mov	r1, r8
 8004a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a86:	4641      	mov	r1, r8
 8004a88:	008a      	lsls	r2, r1, #2
 8004a8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a8e:	f7fb fc17 	bl	80002c0 <__aeabi_uldivmod>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4b39      	ldr	r3, [pc, #228]	; (8004b7c <UART_SetConfig+0x4e4>)
 8004a98:	fba3 1302 	umull	r1, r3, r3, r2
 8004a9c:	095b      	lsrs	r3, r3, #5
 8004a9e:	2164      	movs	r1, #100	; 0x64
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	3332      	adds	r3, #50	; 0x32
 8004aaa:	4a34      	ldr	r2, [pc, #208]	; (8004b7c <UART_SetConfig+0x4e4>)
 8004aac:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab0:	095b      	lsrs	r3, r3, #5
 8004ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ab6:	441c      	add	r4, r3
 8004ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004abc:	2200      	movs	r2, #0
 8004abe:	673b      	str	r3, [r7, #112]	; 0x70
 8004ac0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ac2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ac6:	4642      	mov	r2, r8
 8004ac8:	464b      	mov	r3, r9
 8004aca:	1891      	adds	r1, r2, r2
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	415b      	adcs	r3, r3
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ad6:	4641      	mov	r1, r8
 8004ad8:	1851      	adds	r1, r2, r1
 8004ada:	6039      	str	r1, [r7, #0]
 8004adc:	4649      	mov	r1, r9
 8004ade:	414b      	adcs	r3, r1
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004aee:	4659      	mov	r1, fp
 8004af0:	00cb      	lsls	r3, r1, #3
 8004af2:	4651      	mov	r1, sl
 8004af4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004af8:	4651      	mov	r1, sl
 8004afa:	00ca      	lsls	r2, r1, #3
 8004afc:	4610      	mov	r0, r2
 8004afe:	4619      	mov	r1, r3
 8004b00:	4603      	mov	r3, r0
 8004b02:	4642      	mov	r2, r8
 8004b04:	189b      	adds	r3, r3, r2
 8004b06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b08:	464b      	mov	r3, r9
 8004b0a:	460a      	mov	r2, r1
 8004b0c:	eb42 0303 	adc.w	r3, r2, r3
 8004b10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b1c:	667a      	str	r2, [r7, #100]	; 0x64
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	008b      	lsls	r3, r1, #2
 8004b2e:	4641      	mov	r1, r8
 8004b30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b34:	4641      	mov	r1, r8
 8004b36:	008a      	lsls	r2, r1, #2
 8004b38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b3c:	f7fb fbc0 	bl	80002c0 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <UART_SetConfig+0x4e4>)
 8004b46:	fba3 1302 	umull	r1, r3, r3, r2
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2164      	movs	r1, #100	; 0x64
 8004b4e:	fb01 f303 	mul.w	r3, r1, r3
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	3332      	adds	r3, #50	; 0x32
 8004b58:	4a08      	ldr	r2, [pc, #32]	; (8004b7c <UART_SetConfig+0x4e4>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	f003 020f 	and.w	r2, r3, #15
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4422      	add	r2, r4
 8004b6c:	609a      	str	r2, [r3, #8]
}
 8004b6e:	bf00      	nop
 8004b70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b74:	46bd      	mov	sp, r7
 8004b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b7a:	bf00      	nop
 8004b7c:	51eb851f 	.word	0x51eb851f

08004b80 <__errno>:
 8004b80:	4b01      	ldr	r3, [pc, #4]	; (8004b88 <__errno+0x8>)
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	2000000c 	.word	0x2000000c

08004b8c <__libc_init_array>:
 8004b8c:	b570      	push	{r4, r5, r6, lr}
 8004b8e:	4d0d      	ldr	r5, [pc, #52]	; (8004bc4 <__libc_init_array+0x38>)
 8004b90:	4c0d      	ldr	r4, [pc, #52]	; (8004bc8 <__libc_init_array+0x3c>)
 8004b92:	1b64      	subs	r4, r4, r5
 8004b94:	10a4      	asrs	r4, r4, #2
 8004b96:	2600      	movs	r6, #0
 8004b98:	42a6      	cmp	r6, r4
 8004b9a:	d109      	bne.n	8004bb0 <__libc_init_array+0x24>
 8004b9c:	4d0b      	ldr	r5, [pc, #44]	; (8004bcc <__libc_init_array+0x40>)
 8004b9e:	4c0c      	ldr	r4, [pc, #48]	; (8004bd0 <__libc_init_array+0x44>)
 8004ba0:	f001 f94a 	bl	8005e38 <_init>
 8004ba4:	1b64      	subs	r4, r4, r5
 8004ba6:	10a4      	asrs	r4, r4, #2
 8004ba8:	2600      	movs	r6, #0
 8004baa:	42a6      	cmp	r6, r4
 8004bac:	d105      	bne.n	8004bba <__libc_init_array+0x2e>
 8004bae:	bd70      	pop	{r4, r5, r6, pc}
 8004bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb4:	4798      	blx	r3
 8004bb6:	3601      	adds	r6, #1
 8004bb8:	e7ee      	b.n	8004b98 <__libc_init_array+0xc>
 8004bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bbe:	4798      	blx	r3
 8004bc0:	3601      	adds	r6, #1
 8004bc2:	e7f2      	b.n	8004baa <__libc_init_array+0x1e>
 8004bc4:	080060dc 	.word	0x080060dc
 8004bc8:	080060dc 	.word	0x080060dc
 8004bcc:	080060dc 	.word	0x080060dc
 8004bd0:	080060e0 	.word	0x080060e0

08004bd4 <memset>:
 8004bd4:	4402      	add	r2, r0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d100      	bne.n	8004bde <memset+0xa>
 8004bdc:	4770      	bx	lr
 8004bde:	f803 1b01 	strb.w	r1, [r3], #1
 8004be2:	e7f9      	b.n	8004bd8 <memset+0x4>

08004be4 <siprintf>:
 8004be4:	b40e      	push	{r1, r2, r3}
 8004be6:	b500      	push	{lr}
 8004be8:	b09c      	sub	sp, #112	; 0x70
 8004bea:	ab1d      	add	r3, sp, #116	; 0x74
 8004bec:	9002      	str	r0, [sp, #8]
 8004bee:	9006      	str	r0, [sp, #24]
 8004bf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bf4:	4809      	ldr	r0, [pc, #36]	; (8004c1c <siprintf+0x38>)
 8004bf6:	9107      	str	r1, [sp, #28]
 8004bf8:	9104      	str	r1, [sp, #16]
 8004bfa:	4909      	ldr	r1, [pc, #36]	; (8004c20 <siprintf+0x3c>)
 8004bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c00:	9105      	str	r1, [sp, #20]
 8004c02:	6800      	ldr	r0, [r0, #0]
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	a902      	add	r1, sp, #8
 8004c08:	f000 f896 	bl	8004d38 <_svfiprintf_r>
 8004c0c:	9b02      	ldr	r3, [sp, #8]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	b01c      	add	sp, #112	; 0x70
 8004c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c18:	b003      	add	sp, #12
 8004c1a:	4770      	bx	lr
 8004c1c:	2000000c 	.word	0x2000000c
 8004c20:	ffff0208 	.word	0xffff0208

08004c24 <siscanf>:
 8004c24:	b40e      	push	{r1, r2, r3}
 8004c26:	b510      	push	{r4, lr}
 8004c28:	b09f      	sub	sp, #124	; 0x7c
 8004c2a:	ac21      	add	r4, sp, #132	; 0x84
 8004c2c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004c30:	f854 2b04 	ldr.w	r2, [r4], #4
 8004c34:	9201      	str	r2, [sp, #4]
 8004c36:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004c3a:	9004      	str	r0, [sp, #16]
 8004c3c:	9008      	str	r0, [sp, #32]
 8004c3e:	f7fb fae1 	bl	8000204 <strlen>
 8004c42:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <siscanf+0x50>)
 8004c44:	9005      	str	r0, [sp, #20]
 8004c46:	9009      	str	r0, [sp, #36]	; 0x24
 8004c48:	930d      	str	r3, [sp, #52]	; 0x34
 8004c4a:	480b      	ldr	r0, [pc, #44]	; (8004c78 <siscanf+0x54>)
 8004c4c:	9a01      	ldr	r2, [sp, #4]
 8004c4e:	6800      	ldr	r0, [r0, #0]
 8004c50:	9403      	str	r4, [sp, #12]
 8004c52:	2300      	movs	r3, #0
 8004c54:	9311      	str	r3, [sp, #68]	; 0x44
 8004c56:	9316      	str	r3, [sp, #88]	; 0x58
 8004c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c5c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004c60:	a904      	add	r1, sp, #16
 8004c62:	4623      	mov	r3, r4
 8004c64:	f000 f9c2 	bl	8004fec <__ssvfiscanf_r>
 8004c68:	b01f      	add	sp, #124	; 0x7c
 8004c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c6e:	b003      	add	sp, #12
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	08004c7d 	.word	0x08004c7d
 8004c78:	2000000c 	.word	0x2000000c

08004c7c <__seofread>:
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	4770      	bx	lr

08004c80 <__ssputs_r>:
 8004c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c84:	688e      	ldr	r6, [r1, #8]
 8004c86:	429e      	cmp	r6, r3
 8004c88:	4682      	mov	sl, r0
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	4690      	mov	r8, r2
 8004c8e:	461f      	mov	r7, r3
 8004c90:	d838      	bhi.n	8004d04 <__ssputs_r+0x84>
 8004c92:	898a      	ldrh	r2, [r1, #12]
 8004c94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c98:	d032      	beq.n	8004d00 <__ssputs_r+0x80>
 8004c9a:	6825      	ldr	r5, [r4, #0]
 8004c9c:	6909      	ldr	r1, [r1, #16]
 8004c9e:	eba5 0901 	sub.w	r9, r5, r1
 8004ca2:	6965      	ldr	r5, [r4, #20]
 8004ca4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ca8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cac:	3301      	adds	r3, #1
 8004cae:	444b      	add	r3, r9
 8004cb0:	106d      	asrs	r5, r5, #1
 8004cb2:	429d      	cmp	r5, r3
 8004cb4:	bf38      	it	cc
 8004cb6:	461d      	movcc	r5, r3
 8004cb8:	0553      	lsls	r3, r2, #21
 8004cba:	d531      	bpl.n	8004d20 <__ssputs_r+0xa0>
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	f000 fff3 	bl	8005ca8 <_malloc_r>
 8004cc2:	4606      	mov	r6, r0
 8004cc4:	b950      	cbnz	r0, 8004cdc <__ssputs_r+0x5c>
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	f8ca 3000 	str.w	r3, [sl]
 8004ccc:	89a3      	ldrh	r3, [r4, #12]
 8004cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd2:	81a3      	strh	r3, [r4, #12]
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cdc:	6921      	ldr	r1, [r4, #16]
 8004cde:	464a      	mov	r2, r9
 8004ce0:	f000 ff4e 	bl	8005b80 <memcpy>
 8004ce4:	89a3      	ldrh	r3, [r4, #12]
 8004ce6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cee:	81a3      	strh	r3, [r4, #12]
 8004cf0:	6126      	str	r6, [r4, #16]
 8004cf2:	6165      	str	r5, [r4, #20]
 8004cf4:	444e      	add	r6, r9
 8004cf6:	eba5 0509 	sub.w	r5, r5, r9
 8004cfa:	6026      	str	r6, [r4, #0]
 8004cfc:	60a5      	str	r5, [r4, #8]
 8004cfe:	463e      	mov	r6, r7
 8004d00:	42be      	cmp	r6, r7
 8004d02:	d900      	bls.n	8004d06 <__ssputs_r+0x86>
 8004d04:	463e      	mov	r6, r7
 8004d06:	6820      	ldr	r0, [r4, #0]
 8004d08:	4632      	mov	r2, r6
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	f000 ff46 	bl	8005b9c <memmove>
 8004d10:	68a3      	ldr	r3, [r4, #8]
 8004d12:	1b9b      	subs	r3, r3, r6
 8004d14:	60a3      	str	r3, [r4, #8]
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	4433      	add	r3, r6
 8004d1a:	6023      	str	r3, [r4, #0]
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	e7db      	b.n	8004cd8 <__ssputs_r+0x58>
 8004d20:	462a      	mov	r2, r5
 8004d22:	f001 f835 	bl	8005d90 <_realloc_r>
 8004d26:	4606      	mov	r6, r0
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d1e1      	bne.n	8004cf0 <__ssputs_r+0x70>
 8004d2c:	6921      	ldr	r1, [r4, #16]
 8004d2e:	4650      	mov	r0, sl
 8004d30:	f000 ff4e 	bl	8005bd0 <_free_r>
 8004d34:	e7c7      	b.n	8004cc6 <__ssputs_r+0x46>
	...

08004d38 <_svfiprintf_r>:
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	4698      	mov	r8, r3
 8004d3e:	898b      	ldrh	r3, [r1, #12]
 8004d40:	061b      	lsls	r3, r3, #24
 8004d42:	b09d      	sub	sp, #116	; 0x74
 8004d44:	4607      	mov	r7, r0
 8004d46:	460d      	mov	r5, r1
 8004d48:	4614      	mov	r4, r2
 8004d4a:	d50e      	bpl.n	8004d6a <_svfiprintf_r+0x32>
 8004d4c:	690b      	ldr	r3, [r1, #16]
 8004d4e:	b963      	cbnz	r3, 8004d6a <_svfiprintf_r+0x32>
 8004d50:	2140      	movs	r1, #64	; 0x40
 8004d52:	f000 ffa9 	bl	8005ca8 <_malloc_r>
 8004d56:	6028      	str	r0, [r5, #0]
 8004d58:	6128      	str	r0, [r5, #16]
 8004d5a:	b920      	cbnz	r0, 8004d66 <_svfiprintf_r+0x2e>
 8004d5c:	230c      	movs	r3, #12
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	f04f 30ff 	mov.w	r0, #4294967295
 8004d64:	e0d1      	b.n	8004f0a <_svfiprintf_r+0x1d2>
 8004d66:	2340      	movs	r3, #64	; 0x40
 8004d68:	616b      	str	r3, [r5, #20]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d6e:	2320      	movs	r3, #32
 8004d70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d78:	2330      	movs	r3, #48	; 0x30
 8004d7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004f24 <_svfiprintf_r+0x1ec>
 8004d7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d82:	f04f 0901 	mov.w	r9, #1
 8004d86:	4623      	mov	r3, r4
 8004d88:	469a      	mov	sl, r3
 8004d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d8e:	b10a      	cbz	r2, 8004d94 <_svfiprintf_r+0x5c>
 8004d90:	2a25      	cmp	r2, #37	; 0x25
 8004d92:	d1f9      	bne.n	8004d88 <_svfiprintf_r+0x50>
 8004d94:	ebba 0b04 	subs.w	fp, sl, r4
 8004d98:	d00b      	beq.n	8004db2 <_svfiprintf_r+0x7a>
 8004d9a:	465b      	mov	r3, fp
 8004d9c:	4622      	mov	r2, r4
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4638      	mov	r0, r7
 8004da2:	f7ff ff6d 	bl	8004c80 <__ssputs_r>
 8004da6:	3001      	adds	r0, #1
 8004da8:	f000 80aa 	beq.w	8004f00 <_svfiprintf_r+0x1c8>
 8004dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dae:	445a      	add	r2, fp
 8004db0:	9209      	str	r2, [sp, #36]	; 0x24
 8004db2:	f89a 3000 	ldrb.w	r3, [sl]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f000 80a2 	beq.w	8004f00 <_svfiprintf_r+0x1c8>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dc6:	f10a 0a01 	add.w	sl, sl, #1
 8004dca:	9304      	str	r3, [sp, #16]
 8004dcc:	9307      	str	r3, [sp, #28]
 8004dce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dd2:	931a      	str	r3, [sp, #104]	; 0x68
 8004dd4:	4654      	mov	r4, sl
 8004dd6:	2205      	movs	r2, #5
 8004dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ddc:	4851      	ldr	r0, [pc, #324]	; (8004f24 <_svfiprintf_r+0x1ec>)
 8004dde:	f7fb fa1f 	bl	8000220 <memchr>
 8004de2:	9a04      	ldr	r2, [sp, #16]
 8004de4:	b9d8      	cbnz	r0, 8004e1e <_svfiprintf_r+0xe6>
 8004de6:	06d0      	lsls	r0, r2, #27
 8004de8:	bf44      	itt	mi
 8004dea:	2320      	movmi	r3, #32
 8004dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004df0:	0711      	lsls	r1, r2, #28
 8004df2:	bf44      	itt	mi
 8004df4:	232b      	movmi	r3, #43	; 0x2b
 8004df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8004dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8004e00:	d015      	beq.n	8004e2e <_svfiprintf_r+0xf6>
 8004e02:	9a07      	ldr	r2, [sp, #28]
 8004e04:	4654      	mov	r4, sl
 8004e06:	2000      	movs	r0, #0
 8004e08:	f04f 0c0a 	mov.w	ip, #10
 8004e0c:	4621      	mov	r1, r4
 8004e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e12:	3b30      	subs	r3, #48	; 0x30
 8004e14:	2b09      	cmp	r3, #9
 8004e16:	d94e      	bls.n	8004eb6 <_svfiprintf_r+0x17e>
 8004e18:	b1b0      	cbz	r0, 8004e48 <_svfiprintf_r+0x110>
 8004e1a:	9207      	str	r2, [sp, #28]
 8004e1c:	e014      	b.n	8004e48 <_svfiprintf_r+0x110>
 8004e1e:	eba0 0308 	sub.w	r3, r0, r8
 8004e22:	fa09 f303 	lsl.w	r3, r9, r3
 8004e26:	4313      	orrs	r3, r2
 8004e28:	9304      	str	r3, [sp, #16]
 8004e2a:	46a2      	mov	sl, r4
 8004e2c:	e7d2      	b.n	8004dd4 <_svfiprintf_r+0x9c>
 8004e2e:	9b03      	ldr	r3, [sp, #12]
 8004e30:	1d19      	adds	r1, r3, #4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	9103      	str	r1, [sp, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bfbb      	ittet	lt
 8004e3a:	425b      	neglt	r3, r3
 8004e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8004e40:	9307      	strge	r3, [sp, #28]
 8004e42:	9307      	strlt	r3, [sp, #28]
 8004e44:	bfb8      	it	lt
 8004e46:	9204      	strlt	r2, [sp, #16]
 8004e48:	7823      	ldrb	r3, [r4, #0]
 8004e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8004e4c:	d10c      	bne.n	8004e68 <_svfiprintf_r+0x130>
 8004e4e:	7863      	ldrb	r3, [r4, #1]
 8004e50:	2b2a      	cmp	r3, #42	; 0x2a
 8004e52:	d135      	bne.n	8004ec0 <_svfiprintf_r+0x188>
 8004e54:	9b03      	ldr	r3, [sp, #12]
 8004e56:	1d1a      	adds	r2, r3, #4
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	9203      	str	r2, [sp, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	bfb8      	it	lt
 8004e60:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e64:	3402      	adds	r4, #2
 8004e66:	9305      	str	r3, [sp, #20]
 8004e68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004f34 <_svfiprintf_r+0x1fc>
 8004e6c:	7821      	ldrb	r1, [r4, #0]
 8004e6e:	2203      	movs	r2, #3
 8004e70:	4650      	mov	r0, sl
 8004e72:	f7fb f9d5 	bl	8000220 <memchr>
 8004e76:	b140      	cbz	r0, 8004e8a <_svfiprintf_r+0x152>
 8004e78:	2340      	movs	r3, #64	; 0x40
 8004e7a:	eba0 000a 	sub.w	r0, r0, sl
 8004e7e:	fa03 f000 	lsl.w	r0, r3, r0
 8004e82:	9b04      	ldr	r3, [sp, #16]
 8004e84:	4303      	orrs	r3, r0
 8004e86:	3401      	adds	r4, #1
 8004e88:	9304      	str	r3, [sp, #16]
 8004e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e8e:	4826      	ldr	r0, [pc, #152]	; (8004f28 <_svfiprintf_r+0x1f0>)
 8004e90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e94:	2206      	movs	r2, #6
 8004e96:	f7fb f9c3 	bl	8000220 <memchr>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d038      	beq.n	8004f10 <_svfiprintf_r+0x1d8>
 8004e9e:	4b23      	ldr	r3, [pc, #140]	; (8004f2c <_svfiprintf_r+0x1f4>)
 8004ea0:	bb1b      	cbnz	r3, 8004eea <_svfiprintf_r+0x1b2>
 8004ea2:	9b03      	ldr	r3, [sp, #12]
 8004ea4:	3307      	adds	r3, #7
 8004ea6:	f023 0307 	bic.w	r3, r3, #7
 8004eaa:	3308      	adds	r3, #8
 8004eac:	9303      	str	r3, [sp, #12]
 8004eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb0:	4433      	add	r3, r6
 8004eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb4:	e767      	b.n	8004d86 <_svfiprintf_r+0x4e>
 8004eb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eba:	460c      	mov	r4, r1
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	e7a5      	b.n	8004e0c <_svfiprintf_r+0xd4>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	3401      	adds	r4, #1
 8004ec4:	9305      	str	r3, [sp, #20]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	f04f 0c0a 	mov.w	ip, #10
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ed2:	3a30      	subs	r2, #48	; 0x30
 8004ed4:	2a09      	cmp	r2, #9
 8004ed6:	d903      	bls.n	8004ee0 <_svfiprintf_r+0x1a8>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0c5      	beq.n	8004e68 <_svfiprintf_r+0x130>
 8004edc:	9105      	str	r1, [sp, #20]
 8004ede:	e7c3      	b.n	8004e68 <_svfiprintf_r+0x130>
 8004ee0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e7f0      	b.n	8004ecc <_svfiprintf_r+0x194>
 8004eea:	ab03      	add	r3, sp, #12
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	462a      	mov	r2, r5
 8004ef0:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <_svfiprintf_r+0x1f8>)
 8004ef2:	a904      	add	r1, sp, #16
 8004ef4:	4638      	mov	r0, r7
 8004ef6:	f3af 8000 	nop.w
 8004efa:	1c42      	adds	r2, r0, #1
 8004efc:	4606      	mov	r6, r0
 8004efe:	d1d6      	bne.n	8004eae <_svfiprintf_r+0x176>
 8004f00:	89ab      	ldrh	r3, [r5, #12]
 8004f02:	065b      	lsls	r3, r3, #25
 8004f04:	f53f af2c 	bmi.w	8004d60 <_svfiprintf_r+0x28>
 8004f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f0a:	b01d      	add	sp, #116	; 0x74
 8004f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f10:	ab03      	add	r3, sp, #12
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	462a      	mov	r2, r5
 8004f16:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <_svfiprintf_r+0x1f8>)
 8004f18:	a904      	add	r1, sp, #16
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	f000 fa4c 	bl	80053b8 <_printf_i>
 8004f20:	e7eb      	b.n	8004efa <_svfiprintf_r+0x1c2>
 8004f22:	bf00      	nop
 8004f24:	08005f24 	.word	0x08005f24
 8004f28:	08005f2e 	.word	0x08005f2e
 8004f2c:	00000000 	.word	0x00000000
 8004f30:	08004c81 	.word	0x08004c81
 8004f34:	08005f2a 	.word	0x08005f2a

08004f38 <_sungetc_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	1c4b      	adds	r3, r1, #1
 8004f3c:	4614      	mov	r4, r2
 8004f3e:	d103      	bne.n	8004f48 <_sungetc_r+0x10>
 8004f40:	f04f 35ff 	mov.w	r5, #4294967295
 8004f44:	4628      	mov	r0, r5
 8004f46:	bd38      	pop	{r3, r4, r5, pc}
 8004f48:	8993      	ldrh	r3, [r2, #12]
 8004f4a:	f023 0320 	bic.w	r3, r3, #32
 8004f4e:	8193      	strh	r3, [r2, #12]
 8004f50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f52:	6852      	ldr	r2, [r2, #4]
 8004f54:	b2cd      	uxtb	r5, r1
 8004f56:	b18b      	cbz	r3, 8004f7c <_sungetc_r+0x44>
 8004f58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	dd08      	ble.n	8004f70 <_sungetc_r+0x38>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	1e5a      	subs	r2, r3, #1
 8004f62:	6022      	str	r2, [r4, #0]
 8004f64:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004f68:	6863      	ldr	r3, [r4, #4]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	6063      	str	r3, [r4, #4]
 8004f6e:	e7e9      	b.n	8004f44 <_sungetc_r+0xc>
 8004f70:	4621      	mov	r1, r4
 8004f72:	f000 fdc9 	bl	8005b08 <__submore>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d0f1      	beq.n	8004f5e <_sungetc_r+0x26>
 8004f7a:	e7e1      	b.n	8004f40 <_sungetc_r+0x8>
 8004f7c:	6921      	ldr	r1, [r4, #16]
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	b151      	cbz	r1, 8004f98 <_sungetc_r+0x60>
 8004f82:	4299      	cmp	r1, r3
 8004f84:	d208      	bcs.n	8004f98 <_sungetc_r+0x60>
 8004f86:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004f8a:	42a9      	cmp	r1, r5
 8004f8c:	d104      	bne.n	8004f98 <_sungetc_r+0x60>
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	3201      	adds	r2, #1
 8004f92:	6023      	str	r3, [r4, #0]
 8004f94:	6062      	str	r2, [r4, #4]
 8004f96:	e7d5      	b.n	8004f44 <_sungetc_r+0xc>
 8004f98:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	63a3      	str	r3, [r4, #56]	; 0x38
 8004fa6:	4623      	mov	r3, r4
 8004fa8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e7dc      	b.n	8004f6c <_sungetc_r+0x34>

08004fb2 <__ssrefill_r>:
 8004fb2:	b510      	push	{r4, lr}
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004fb8:	b169      	cbz	r1, 8004fd6 <__ssrefill_r+0x24>
 8004fba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fbe:	4299      	cmp	r1, r3
 8004fc0:	d001      	beq.n	8004fc6 <__ssrefill_r+0x14>
 8004fc2:	f000 fe05 	bl	8005bd0 <_free_r>
 8004fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fc8:	6063      	str	r3, [r4, #4]
 8004fca:	2000      	movs	r0, #0
 8004fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8004fce:	b113      	cbz	r3, 8004fd6 <__ssrefill_r+0x24>
 8004fd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004fd2:	6023      	str	r3, [r4, #0]
 8004fd4:	bd10      	pop	{r4, pc}
 8004fd6:	6923      	ldr	r3, [r4, #16]
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	6063      	str	r3, [r4, #4]
 8004fde:	89a3      	ldrh	r3, [r4, #12]
 8004fe0:	f043 0320 	orr.w	r3, r3, #32
 8004fe4:	81a3      	strh	r3, [r4, #12]
 8004fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fea:	e7f3      	b.n	8004fd4 <__ssrefill_r+0x22>

08004fec <__ssvfiscanf_r>:
 8004fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004ffc:	49a6      	ldr	r1, [pc, #664]	; (8005298 <__ssvfiscanf_r+0x2ac>)
 8004ffe:	91a0      	str	r1, [sp, #640]	; 0x280
 8005000:	f10d 0804 	add.w	r8, sp, #4
 8005004:	49a5      	ldr	r1, [pc, #660]	; (800529c <__ssvfiscanf_r+0x2b0>)
 8005006:	4fa6      	ldr	r7, [pc, #664]	; (80052a0 <__ssvfiscanf_r+0x2b4>)
 8005008:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80052a4 <__ssvfiscanf_r+0x2b8>
 800500c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005010:	4606      	mov	r6, r0
 8005012:	91a1      	str	r1, [sp, #644]	; 0x284
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	7813      	ldrb	r3, [r2, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 815a 	beq.w	80052d2 <__ssvfiscanf_r+0x2e6>
 800501e:	5dd9      	ldrb	r1, [r3, r7]
 8005020:	f011 0108 	ands.w	r1, r1, #8
 8005024:	f102 0501 	add.w	r5, r2, #1
 8005028:	d019      	beq.n	800505e <__ssvfiscanf_r+0x72>
 800502a:	6863      	ldr	r3, [r4, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	dd0f      	ble.n	8005050 <__ssvfiscanf_r+0x64>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	781a      	ldrb	r2, [r3, #0]
 8005034:	5cba      	ldrb	r2, [r7, r2]
 8005036:	0712      	lsls	r2, r2, #28
 8005038:	d401      	bmi.n	800503e <__ssvfiscanf_r+0x52>
 800503a:	462a      	mov	r2, r5
 800503c:	e7eb      	b.n	8005016 <__ssvfiscanf_r+0x2a>
 800503e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005040:	3201      	adds	r2, #1
 8005042:	9245      	str	r2, [sp, #276]	; 0x114
 8005044:	6862      	ldr	r2, [r4, #4]
 8005046:	3301      	adds	r3, #1
 8005048:	3a01      	subs	r2, #1
 800504a:	6062      	str	r2, [r4, #4]
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	e7ec      	b.n	800502a <__ssvfiscanf_r+0x3e>
 8005050:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005052:	4621      	mov	r1, r4
 8005054:	4630      	mov	r0, r6
 8005056:	4798      	blx	r3
 8005058:	2800      	cmp	r0, #0
 800505a:	d0e9      	beq.n	8005030 <__ssvfiscanf_r+0x44>
 800505c:	e7ed      	b.n	800503a <__ssvfiscanf_r+0x4e>
 800505e:	2b25      	cmp	r3, #37	; 0x25
 8005060:	d012      	beq.n	8005088 <__ssvfiscanf_r+0x9c>
 8005062:	469a      	mov	sl, r3
 8005064:	6863      	ldr	r3, [r4, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f340 8091 	ble.w	800518e <__ssvfiscanf_r+0x1a2>
 800506c:	6822      	ldr	r2, [r4, #0]
 800506e:	7813      	ldrb	r3, [r2, #0]
 8005070:	4553      	cmp	r3, sl
 8005072:	f040 812e 	bne.w	80052d2 <__ssvfiscanf_r+0x2e6>
 8005076:	6863      	ldr	r3, [r4, #4]
 8005078:	3b01      	subs	r3, #1
 800507a:	6063      	str	r3, [r4, #4]
 800507c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800507e:	3201      	adds	r2, #1
 8005080:	3301      	adds	r3, #1
 8005082:	6022      	str	r2, [r4, #0]
 8005084:	9345      	str	r3, [sp, #276]	; 0x114
 8005086:	e7d8      	b.n	800503a <__ssvfiscanf_r+0x4e>
 8005088:	9141      	str	r1, [sp, #260]	; 0x104
 800508a:	9143      	str	r1, [sp, #268]	; 0x10c
 800508c:	7853      	ldrb	r3, [r2, #1]
 800508e:	2b2a      	cmp	r3, #42	; 0x2a
 8005090:	bf02      	ittt	eq
 8005092:	2310      	moveq	r3, #16
 8005094:	1c95      	addeq	r5, r2, #2
 8005096:	9341      	streq	r3, [sp, #260]	; 0x104
 8005098:	220a      	movs	r2, #10
 800509a:	46aa      	mov	sl, r5
 800509c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80050a0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80050a4:	2b09      	cmp	r3, #9
 80050a6:	d91d      	bls.n	80050e4 <__ssvfiscanf_r+0xf8>
 80050a8:	487e      	ldr	r0, [pc, #504]	; (80052a4 <__ssvfiscanf_r+0x2b8>)
 80050aa:	2203      	movs	r2, #3
 80050ac:	f7fb f8b8 	bl	8000220 <memchr>
 80050b0:	b140      	cbz	r0, 80050c4 <__ssvfiscanf_r+0xd8>
 80050b2:	2301      	movs	r3, #1
 80050b4:	eba0 0009 	sub.w	r0, r0, r9
 80050b8:	fa03 f000 	lsl.w	r0, r3, r0
 80050bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80050be:	4318      	orrs	r0, r3
 80050c0:	9041      	str	r0, [sp, #260]	; 0x104
 80050c2:	4655      	mov	r5, sl
 80050c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80050c8:	2b78      	cmp	r3, #120	; 0x78
 80050ca:	d806      	bhi.n	80050da <__ssvfiscanf_r+0xee>
 80050cc:	2b57      	cmp	r3, #87	; 0x57
 80050ce:	d810      	bhi.n	80050f2 <__ssvfiscanf_r+0x106>
 80050d0:	2b25      	cmp	r3, #37	; 0x25
 80050d2:	d0c6      	beq.n	8005062 <__ssvfiscanf_r+0x76>
 80050d4:	d856      	bhi.n	8005184 <__ssvfiscanf_r+0x198>
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d064      	beq.n	80051a4 <__ssvfiscanf_r+0x1b8>
 80050da:	2303      	movs	r3, #3
 80050dc:	9347      	str	r3, [sp, #284]	; 0x11c
 80050de:	230a      	movs	r3, #10
 80050e0:	9342      	str	r3, [sp, #264]	; 0x108
 80050e2:	e071      	b.n	80051c8 <__ssvfiscanf_r+0x1dc>
 80050e4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80050e6:	fb02 1103 	mla	r1, r2, r3, r1
 80050ea:	3930      	subs	r1, #48	; 0x30
 80050ec:	9143      	str	r1, [sp, #268]	; 0x10c
 80050ee:	4655      	mov	r5, sl
 80050f0:	e7d3      	b.n	800509a <__ssvfiscanf_r+0xae>
 80050f2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80050f6:	2a20      	cmp	r2, #32
 80050f8:	d8ef      	bhi.n	80050da <__ssvfiscanf_r+0xee>
 80050fa:	a101      	add	r1, pc, #4	; (adr r1, 8005100 <__ssvfiscanf_r+0x114>)
 80050fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005100:	080051b3 	.word	0x080051b3
 8005104:	080050db 	.word	0x080050db
 8005108:	080050db 	.word	0x080050db
 800510c:	08005211 	.word	0x08005211
 8005110:	080050db 	.word	0x080050db
 8005114:	080050db 	.word	0x080050db
 8005118:	080050db 	.word	0x080050db
 800511c:	080050db 	.word	0x080050db
 8005120:	080050db 	.word	0x080050db
 8005124:	080050db 	.word	0x080050db
 8005128:	080050db 	.word	0x080050db
 800512c:	08005227 	.word	0x08005227
 8005130:	080051fd 	.word	0x080051fd
 8005134:	0800518b 	.word	0x0800518b
 8005138:	0800518b 	.word	0x0800518b
 800513c:	0800518b 	.word	0x0800518b
 8005140:	080050db 	.word	0x080050db
 8005144:	08005201 	.word	0x08005201
 8005148:	080050db 	.word	0x080050db
 800514c:	080050db 	.word	0x080050db
 8005150:	080050db 	.word	0x080050db
 8005154:	080050db 	.word	0x080050db
 8005158:	08005237 	.word	0x08005237
 800515c:	08005209 	.word	0x08005209
 8005160:	080051ab 	.word	0x080051ab
 8005164:	080050db 	.word	0x080050db
 8005168:	080050db 	.word	0x080050db
 800516c:	08005233 	.word	0x08005233
 8005170:	080050db 	.word	0x080050db
 8005174:	080051fd 	.word	0x080051fd
 8005178:	080050db 	.word	0x080050db
 800517c:	080050db 	.word	0x080050db
 8005180:	080051b3 	.word	0x080051b3
 8005184:	3b45      	subs	r3, #69	; 0x45
 8005186:	2b02      	cmp	r3, #2
 8005188:	d8a7      	bhi.n	80050da <__ssvfiscanf_r+0xee>
 800518a:	2305      	movs	r3, #5
 800518c:	e01b      	b.n	80051c6 <__ssvfiscanf_r+0x1da>
 800518e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005190:	4621      	mov	r1, r4
 8005192:	4630      	mov	r0, r6
 8005194:	4798      	blx	r3
 8005196:	2800      	cmp	r0, #0
 8005198:	f43f af68 	beq.w	800506c <__ssvfiscanf_r+0x80>
 800519c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800519e:	2800      	cmp	r0, #0
 80051a0:	f040 808d 	bne.w	80052be <__ssvfiscanf_r+0x2d2>
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295
 80051a8:	e08f      	b.n	80052ca <__ssvfiscanf_r+0x2de>
 80051aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80051ac:	f042 0220 	orr.w	r2, r2, #32
 80051b0:	9241      	str	r2, [sp, #260]	; 0x104
 80051b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80051b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b8:	9241      	str	r2, [sp, #260]	; 0x104
 80051ba:	2210      	movs	r2, #16
 80051bc:	2b6f      	cmp	r3, #111	; 0x6f
 80051be:	9242      	str	r2, [sp, #264]	; 0x108
 80051c0:	bf34      	ite	cc
 80051c2:	2303      	movcc	r3, #3
 80051c4:	2304      	movcs	r3, #4
 80051c6:	9347      	str	r3, [sp, #284]	; 0x11c
 80051c8:	6863      	ldr	r3, [r4, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	dd42      	ble.n	8005254 <__ssvfiscanf_r+0x268>
 80051ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80051d0:	0659      	lsls	r1, r3, #25
 80051d2:	d404      	bmi.n	80051de <__ssvfiscanf_r+0x1f2>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	781a      	ldrb	r2, [r3, #0]
 80051d8:	5cba      	ldrb	r2, [r7, r2]
 80051da:	0712      	lsls	r2, r2, #28
 80051dc:	d441      	bmi.n	8005262 <__ssvfiscanf_r+0x276>
 80051de:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	dc50      	bgt.n	8005286 <__ssvfiscanf_r+0x29a>
 80051e4:	466b      	mov	r3, sp
 80051e6:	4622      	mov	r2, r4
 80051e8:	a941      	add	r1, sp, #260	; 0x104
 80051ea:	4630      	mov	r0, r6
 80051ec:	f000 fa0a 	bl	8005604 <_scanf_chars>
 80051f0:	2801      	cmp	r0, #1
 80051f2:	d06e      	beq.n	80052d2 <__ssvfiscanf_r+0x2e6>
 80051f4:	2802      	cmp	r0, #2
 80051f6:	f47f af20 	bne.w	800503a <__ssvfiscanf_r+0x4e>
 80051fa:	e7cf      	b.n	800519c <__ssvfiscanf_r+0x1b0>
 80051fc:	220a      	movs	r2, #10
 80051fe:	e7dd      	b.n	80051bc <__ssvfiscanf_r+0x1d0>
 8005200:	2300      	movs	r3, #0
 8005202:	9342      	str	r3, [sp, #264]	; 0x108
 8005204:	2303      	movs	r3, #3
 8005206:	e7de      	b.n	80051c6 <__ssvfiscanf_r+0x1da>
 8005208:	2308      	movs	r3, #8
 800520a:	9342      	str	r3, [sp, #264]	; 0x108
 800520c:	2304      	movs	r3, #4
 800520e:	e7da      	b.n	80051c6 <__ssvfiscanf_r+0x1da>
 8005210:	4629      	mov	r1, r5
 8005212:	4640      	mov	r0, r8
 8005214:	f000 fb48 	bl	80058a8 <__sccl>
 8005218:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800521a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800521e:	9341      	str	r3, [sp, #260]	; 0x104
 8005220:	4605      	mov	r5, r0
 8005222:	2301      	movs	r3, #1
 8005224:	e7cf      	b.n	80051c6 <__ssvfiscanf_r+0x1da>
 8005226:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800522c:	9341      	str	r3, [sp, #260]	; 0x104
 800522e:	2300      	movs	r3, #0
 8005230:	e7c9      	b.n	80051c6 <__ssvfiscanf_r+0x1da>
 8005232:	2302      	movs	r3, #2
 8005234:	e7c7      	b.n	80051c6 <__ssvfiscanf_r+0x1da>
 8005236:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005238:	06c3      	lsls	r3, r0, #27
 800523a:	f53f aefe 	bmi.w	800503a <__ssvfiscanf_r+0x4e>
 800523e:	9b00      	ldr	r3, [sp, #0]
 8005240:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005242:	1d19      	adds	r1, r3, #4
 8005244:	9100      	str	r1, [sp, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f010 0f01 	tst.w	r0, #1
 800524c:	bf14      	ite	ne
 800524e:	801a      	strhne	r2, [r3, #0]
 8005250:	601a      	streq	r2, [r3, #0]
 8005252:	e6f2      	b.n	800503a <__ssvfiscanf_r+0x4e>
 8005254:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005256:	4621      	mov	r1, r4
 8005258:	4630      	mov	r0, r6
 800525a:	4798      	blx	r3
 800525c:	2800      	cmp	r0, #0
 800525e:	d0b6      	beq.n	80051ce <__ssvfiscanf_r+0x1e2>
 8005260:	e79c      	b.n	800519c <__ssvfiscanf_r+0x1b0>
 8005262:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005264:	3201      	adds	r2, #1
 8005266:	9245      	str	r2, [sp, #276]	; 0x114
 8005268:	6862      	ldr	r2, [r4, #4]
 800526a:	3a01      	subs	r2, #1
 800526c:	2a00      	cmp	r2, #0
 800526e:	6062      	str	r2, [r4, #4]
 8005270:	dd02      	ble.n	8005278 <__ssvfiscanf_r+0x28c>
 8005272:	3301      	adds	r3, #1
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	e7ad      	b.n	80051d4 <__ssvfiscanf_r+0x1e8>
 8005278:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800527a:	4621      	mov	r1, r4
 800527c:	4630      	mov	r0, r6
 800527e:	4798      	blx	r3
 8005280:	2800      	cmp	r0, #0
 8005282:	d0a7      	beq.n	80051d4 <__ssvfiscanf_r+0x1e8>
 8005284:	e78a      	b.n	800519c <__ssvfiscanf_r+0x1b0>
 8005286:	2b04      	cmp	r3, #4
 8005288:	dc0e      	bgt.n	80052a8 <__ssvfiscanf_r+0x2bc>
 800528a:	466b      	mov	r3, sp
 800528c:	4622      	mov	r2, r4
 800528e:	a941      	add	r1, sp, #260	; 0x104
 8005290:	4630      	mov	r0, r6
 8005292:	f000 fa11 	bl	80056b8 <_scanf_i>
 8005296:	e7ab      	b.n	80051f0 <__ssvfiscanf_r+0x204>
 8005298:	08004f39 	.word	0x08004f39
 800529c:	08004fb3 	.word	0x08004fb3
 80052a0:	08005f73 	.word	0x08005f73
 80052a4:	08005f2a 	.word	0x08005f2a
 80052a8:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <__ssvfiscanf_r+0x2ec>)
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f43f aec5 	beq.w	800503a <__ssvfiscanf_r+0x4e>
 80052b0:	466b      	mov	r3, sp
 80052b2:	4622      	mov	r2, r4
 80052b4:	a941      	add	r1, sp, #260	; 0x104
 80052b6:	4630      	mov	r0, r6
 80052b8:	f3af 8000 	nop.w
 80052bc:	e798      	b.n	80051f0 <__ssvfiscanf_r+0x204>
 80052be:	89a3      	ldrh	r3, [r4, #12]
 80052c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80052c4:	bf18      	it	ne
 80052c6:	f04f 30ff 	movne.w	r0, #4294967295
 80052ca:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80052ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80052d4:	e7f9      	b.n	80052ca <__ssvfiscanf_r+0x2de>
 80052d6:	bf00      	nop
 80052d8:	00000000 	.word	0x00000000

080052dc <_printf_common>:
 80052dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e0:	4616      	mov	r6, r2
 80052e2:	4699      	mov	r9, r3
 80052e4:	688a      	ldr	r2, [r1, #8]
 80052e6:	690b      	ldr	r3, [r1, #16]
 80052e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052ec:	4293      	cmp	r3, r2
 80052ee:	bfb8      	it	lt
 80052f0:	4613      	movlt	r3, r2
 80052f2:	6033      	str	r3, [r6, #0]
 80052f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052f8:	4607      	mov	r7, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	b10a      	cbz	r2, 8005302 <_printf_common+0x26>
 80052fe:	3301      	adds	r3, #1
 8005300:	6033      	str	r3, [r6, #0]
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	0699      	lsls	r1, r3, #26
 8005306:	bf42      	ittt	mi
 8005308:	6833      	ldrmi	r3, [r6, #0]
 800530a:	3302      	addmi	r3, #2
 800530c:	6033      	strmi	r3, [r6, #0]
 800530e:	6825      	ldr	r5, [r4, #0]
 8005310:	f015 0506 	ands.w	r5, r5, #6
 8005314:	d106      	bne.n	8005324 <_printf_common+0x48>
 8005316:	f104 0a19 	add.w	sl, r4, #25
 800531a:	68e3      	ldr	r3, [r4, #12]
 800531c:	6832      	ldr	r2, [r6, #0]
 800531e:	1a9b      	subs	r3, r3, r2
 8005320:	42ab      	cmp	r3, r5
 8005322:	dc26      	bgt.n	8005372 <_printf_common+0x96>
 8005324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005328:	1e13      	subs	r3, r2, #0
 800532a:	6822      	ldr	r2, [r4, #0]
 800532c:	bf18      	it	ne
 800532e:	2301      	movne	r3, #1
 8005330:	0692      	lsls	r2, r2, #26
 8005332:	d42b      	bmi.n	800538c <_printf_common+0xb0>
 8005334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005338:	4649      	mov	r1, r9
 800533a:	4638      	mov	r0, r7
 800533c:	47c0      	blx	r8
 800533e:	3001      	adds	r0, #1
 8005340:	d01e      	beq.n	8005380 <_printf_common+0xa4>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	68e5      	ldr	r5, [r4, #12]
 8005346:	6832      	ldr	r2, [r6, #0]
 8005348:	f003 0306 	and.w	r3, r3, #6
 800534c:	2b04      	cmp	r3, #4
 800534e:	bf08      	it	eq
 8005350:	1aad      	subeq	r5, r5, r2
 8005352:	68a3      	ldr	r3, [r4, #8]
 8005354:	6922      	ldr	r2, [r4, #16]
 8005356:	bf0c      	ite	eq
 8005358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800535c:	2500      	movne	r5, #0
 800535e:	4293      	cmp	r3, r2
 8005360:	bfc4      	itt	gt
 8005362:	1a9b      	subgt	r3, r3, r2
 8005364:	18ed      	addgt	r5, r5, r3
 8005366:	2600      	movs	r6, #0
 8005368:	341a      	adds	r4, #26
 800536a:	42b5      	cmp	r5, r6
 800536c:	d11a      	bne.n	80053a4 <_printf_common+0xc8>
 800536e:	2000      	movs	r0, #0
 8005370:	e008      	b.n	8005384 <_printf_common+0xa8>
 8005372:	2301      	movs	r3, #1
 8005374:	4652      	mov	r2, sl
 8005376:	4649      	mov	r1, r9
 8005378:	4638      	mov	r0, r7
 800537a:	47c0      	blx	r8
 800537c:	3001      	adds	r0, #1
 800537e:	d103      	bne.n	8005388 <_printf_common+0xac>
 8005380:	f04f 30ff 	mov.w	r0, #4294967295
 8005384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005388:	3501      	adds	r5, #1
 800538a:	e7c6      	b.n	800531a <_printf_common+0x3e>
 800538c:	18e1      	adds	r1, r4, r3
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	2030      	movs	r0, #48	; 0x30
 8005392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005396:	4422      	add	r2, r4
 8005398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800539c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053a0:	3302      	adds	r3, #2
 80053a2:	e7c7      	b.n	8005334 <_printf_common+0x58>
 80053a4:	2301      	movs	r3, #1
 80053a6:	4622      	mov	r2, r4
 80053a8:	4649      	mov	r1, r9
 80053aa:	4638      	mov	r0, r7
 80053ac:	47c0      	blx	r8
 80053ae:	3001      	adds	r0, #1
 80053b0:	d0e6      	beq.n	8005380 <_printf_common+0xa4>
 80053b2:	3601      	adds	r6, #1
 80053b4:	e7d9      	b.n	800536a <_printf_common+0x8e>
	...

080053b8 <_printf_i>:
 80053b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053bc:	7e0f      	ldrb	r7, [r1, #24]
 80053be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053c0:	2f78      	cmp	r7, #120	; 0x78
 80053c2:	4691      	mov	r9, r2
 80053c4:	4680      	mov	r8, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	469a      	mov	sl, r3
 80053ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053ce:	d807      	bhi.n	80053e0 <_printf_i+0x28>
 80053d0:	2f62      	cmp	r7, #98	; 0x62
 80053d2:	d80a      	bhi.n	80053ea <_printf_i+0x32>
 80053d4:	2f00      	cmp	r7, #0
 80053d6:	f000 80d8 	beq.w	800558a <_printf_i+0x1d2>
 80053da:	2f58      	cmp	r7, #88	; 0x58
 80053dc:	f000 80a3 	beq.w	8005526 <_printf_i+0x16e>
 80053e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053e8:	e03a      	b.n	8005460 <_printf_i+0xa8>
 80053ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053ee:	2b15      	cmp	r3, #21
 80053f0:	d8f6      	bhi.n	80053e0 <_printf_i+0x28>
 80053f2:	a101      	add	r1, pc, #4	; (adr r1, 80053f8 <_printf_i+0x40>)
 80053f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053f8:	08005451 	.word	0x08005451
 80053fc:	08005465 	.word	0x08005465
 8005400:	080053e1 	.word	0x080053e1
 8005404:	080053e1 	.word	0x080053e1
 8005408:	080053e1 	.word	0x080053e1
 800540c:	080053e1 	.word	0x080053e1
 8005410:	08005465 	.word	0x08005465
 8005414:	080053e1 	.word	0x080053e1
 8005418:	080053e1 	.word	0x080053e1
 800541c:	080053e1 	.word	0x080053e1
 8005420:	080053e1 	.word	0x080053e1
 8005424:	08005571 	.word	0x08005571
 8005428:	08005495 	.word	0x08005495
 800542c:	08005553 	.word	0x08005553
 8005430:	080053e1 	.word	0x080053e1
 8005434:	080053e1 	.word	0x080053e1
 8005438:	08005593 	.word	0x08005593
 800543c:	080053e1 	.word	0x080053e1
 8005440:	08005495 	.word	0x08005495
 8005444:	080053e1 	.word	0x080053e1
 8005448:	080053e1 	.word	0x080053e1
 800544c:	0800555b 	.word	0x0800555b
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	1d1a      	adds	r2, r3, #4
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	602a      	str	r2, [r5, #0]
 8005458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800545c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005460:	2301      	movs	r3, #1
 8005462:	e0a3      	b.n	80055ac <_printf_i+0x1f4>
 8005464:	6820      	ldr	r0, [r4, #0]
 8005466:	6829      	ldr	r1, [r5, #0]
 8005468:	0606      	lsls	r6, r0, #24
 800546a:	f101 0304 	add.w	r3, r1, #4
 800546e:	d50a      	bpl.n	8005486 <_printf_i+0xce>
 8005470:	680e      	ldr	r6, [r1, #0]
 8005472:	602b      	str	r3, [r5, #0]
 8005474:	2e00      	cmp	r6, #0
 8005476:	da03      	bge.n	8005480 <_printf_i+0xc8>
 8005478:	232d      	movs	r3, #45	; 0x2d
 800547a:	4276      	negs	r6, r6
 800547c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005480:	485e      	ldr	r0, [pc, #376]	; (80055fc <_printf_i+0x244>)
 8005482:	230a      	movs	r3, #10
 8005484:	e019      	b.n	80054ba <_printf_i+0x102>
 8005486:	680e      	ldr	r6, [r1, #0]
 8005488:	602b      	str	r3, [r5, #0]
 800548a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800548e:	bf18      	it	ne
 8005490:	b236      	sxthne	r6, r6
 8005492:	e7ef      	b.n	8005474 <_printf_i+0xbc>
 8005494:	682b      	ldr	r3, [r5, #0]
 8005496:	6820      	ldr	r0, [r4, #0]
 8005498:	1d19      	adds	r1, r3, #4
 800549a:	6029      	str	r1, [r5, #0]
 800549c:	0601      	lsls	r1, r0, #24
 800549e:	d501      	bpl.n	80054a4 <_printf_i+0xec>
 80054a0:	681e      	ldr	r6, [r3, #0]
 80054a2:	e002      	b.n	80054aa <_printf_i+0xf2>
 80054a4:	0646      	lsls	r6, r0, #25
 80054a6:	d5fb      	bpl.n	80054a0 <_printf_i+0xe8>
 80054a8:	881e      	ldrh	r6, [r3, #0]
 80054aa:	4854      	ldr	r0, [pc, #336]	; (80055fc <_printf_i+0x244>)
 80054ac:	2f6f      	cmp	r7, #111	; 0x6f
 80054ae:	bf0c      	ite	eq
 80054b0:	2308      	moveq	r3, #8
 80054b2:	230a      	movne	r3, #10
 80054b4:	2100      	movs	r1, #0
 80054b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054ba:	6865      	ldr	r5, [r4, #4]
 80054bc:	60a5      	str	r5, [r4, #8]
 80054be:	2d00      	cmp	r5, #0
 80054c0:	bfa2      	ittt	ge
 80054c2:	6821      	ldrge	r1, [r4, #0]
 80054c4:	f021 0104 	bicge.w	r1, r1, #4
 80054c8:	6021      	strge	r1, [r4, #0]
 80054ca:	b90e      	cbnz	r6, 80054d0 <_printf_i+0x118>
 80054cc:	2d00      	cmp	r5, #0
 80054ce:	d04d      	beq.n	800556c <_printf_i+0x1b4>
 80054d0:	4615      	mov	r5, r2
 80054d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80054d6:	fb03 6711 	mls	r7, r3, r1, r6
 80054da:	5dc7      	ldrb	r7, [r0, r7]
 80054dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054e0:	4637      	mov	r7, r6
 80054e2:	42bb      	cmp	r3, r7
 80054e4:	460e      	mov	r6, r1
 80054e6:	d9f4      	bls.n	80054d2 <_printf_i+0x11a>
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d10b      	bne.n	8005504 <_printf_i+0x14c>
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	07de      	lsls	r6, r3, #31
 80054f0:	d508      	bpl.n	8005504 <_printf_i+0x14c>
 80054f2:	6923      	ldr	r3, [r4, #16]
 80054f4:	6861      	ldr	r1, [r4, #4]
 80054f6:	4299      	cmp	r1, r3
 80054f8:	bfde      	ittt	le
 80054fa:	2330      	movle	r3, #48	; 0x30
 80054fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005500:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005504:	1b52      	subs	r2, r2, r5
 8005506:	6122      	str	r2, [r4, #16]
 8005508:	f8cd a000 	str.w	sl, [sp]
 800550c:	464b      	mov	r3, r9
 800550e:	aa03      	add	r2, sp, #12
 8005510:	4621      	mov	r1, r4
 8005512:	4640      	mov	r0, r8
 8005514:	f7ff fee2 	bl	80052dc <_printf_common>
 8005518:	3001      	adds	r0, #1
 800551a:	d14c      	bne.n	80055b6 <_printf_i+0x1fe>
 800551c:	f04f 30ff 	mov.w	r0, #4294967295
 8005520:	b004      	add	sp, #16
 8005522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005526:	4835      	ldr	r0, [pc, #212]	; (80055fc <_printf_i+0x244>)
 8005528:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800552c:	6829      	ldr	r1, [r5, #0]
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	f851 6b04 	ldr.w	r6, [r1], #4
 8005534:	6029      	str	r1, [r5, #0]
 8005536:	061d      	lsls	r5, r3, #24
 8005538:	d514      	bpl.n	8005564 <_printf_i+0x1ac>
 800553a:	07df      	lsls	r7, r3, #31
 800553c:	bf44      	itt	mi
 800553e:	f043 0320 	orrmi.w	r3, r3, #32
 8005542:	6023      	strmi	r3, [r4, #0]
 8005544:	b91e      	cbnz	r6, 800554e <_printf_i+0x196>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	f023 0320 	bic.w	r3, r3, #32
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	2310      	movs	r3, #16
 8005550:	e7b0      	b.n	80054b4 <_printf_i+0xfc>
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	f043 0320 	orr.w	r3, r3, #32
 8005558:	6023      	str	r3, [r4, #0]
 800555a:	2378      	movs	r3, #120	; 0x78
 800555c:	4828      	ldr	r0, [pc, #160]	; (8005600 <_printf_i+0x248>)
 800555e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005562:	e7e3      	b.n	800552c <_printf_i+0x174>
 8005564:	0659      	lsls	r1, r3, #25
 8005566:	bf48      	it	mi
 8005568:	b2b6      	uxthmi	r6, r6
 800556a:	e7e6      	b.n	800553a <_printf_i+0x182>
 800556c:	4615      	mov	r5, r2
 800556e:	e7bb      	b.n	80054e8 <_printf_i+0x130>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	6826      	ldr	r6, [r4, #0]
 8005574:	6961      	ldr	r1, [r4, #20]
 8005576:	1d18      	adds	r0, r3, #4
 8005578:	6028      	str	r0, [r5, #0]
 800557a:	0635      	lsls	r5, r6, #24
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	d501      	bpl.n	8005584 <_printf_i+0x1cc>
 8005580:	6019      	str	r1, [r3, #0]
 8005582:	e002      	b.n	800558a <_printf_i+0x1d2>
 8005584:	0670      	lsls	r0, r6, #25
 8005586:	d5fb      	bpl.n	8005580 <_printf_i+0x1c8>
 8005588:	8019      	strh	r1, [r3, #0]
 800558a:	2300      	movs	r3, #0
 800558c:	6123      	str	r3, [r4, #16]
 800558e:	4615      	mov	r5, r2
 8005590:	e7ba      	b.n	8005508 <_printf_i+0x150>
 8005592:	682b      	ldr	r3, [r5, #0]
 8005594:	1d1a      	adds	r2, r3, #4
 8005596:	602a      	str	r2, [r5, #0]
 8005598:	681d      	ldr	r5, [r3, #0]
 800559a:	6862      	ldr	r2, [r4, #4]
 800559c:	2100      	movs	r1, #0
 800559e:	4628      	mov	r0, r5
 80055a0:	f7fa fe3e 	bl	8000220 <memchr>
 80055a4:	b108      	cbz	r0, 80055aa <_printf_i+0x1f2>
 80055a6:	1b40      	subs	r0, r0, r5
 80055a8:	6060      	str	r0, [r4, #4]
 80055aa:	6863      	ldr	r3, [r4, #4]
 80055ac:	6123      	str	r3, [r4, #16]
 80055ae:	2300      	movs	r3, #0
 80055b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055b4:	e7a8      	b.n	8005508 <_printf_i+0x150>
 80055b6:	6923      	ldr	r3, [r4, #16]
 80055b8:	462a      	mov	r2, r5
 80055ba:	4649      	mov	r1, r9
 80055bc:	4640      	mov	r0, r8
 80055be:	47d0      	blx	sl
 80055c0:	3001      	adds	r0, #1
 80055c2:	d0ab      	beq.n	800551c <_printf_i+0x164>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	079b      	lsls	r3, r3, #30
 80055c8:	d413      	bmi.n	80055f2 <_printf_i+0x23a>
 80055ca:	68e0      	ldr	r0, [r4, #12]
 80055cc:	9b03      	ldr	r3, [sp, #12]
 80055ce:	4298      	cmp	r0, r3
 80055d0:	bfb8      	it	lt
 80055d2:	4618      	movlt	r0, r3
 80055d4:	e7a4      	b.n	8005520 <_printf_i+0x168>
 80055d6:	2301      	movs	r3, #1
 80055d8:	4632      	mov	r2, r6
 80055da:	4649      	mov	r1, r9
 80055dc:	4640      	mov	r0, r8
 80055de:	47d0      	blx	sl
 80055e0:	3001      	adds	r0, #1
 80055e2:	d09b      	beq.n	800551c <_printf_i+0x164>
 80055e4:	3501      	adds	r5, #1
 80055e6:	68e3      	ldr	r3, [r4, #12]
 80055e8:	9903      	ldr	r1, [sp, #12]
 80055ea:	1a5b      	subs	r3, r3, r1
 80055ec:	42ab      	cmp	r3, r5
 80055ee:	dcf2      	bgt.n	80055d6 <_printf_i+0x21e>
 80055f0:	e7eb      	b.n	80055ca <_printf_i+0x212>
 80055f2:	2500      	movs	r5, #0
 80055f4:	f104 0619 	add.w	r6, r4, #25
 80055f8:	e7f5      	b.n	80055e6 <_printf_i+0x22e>
 80055fa:	bf00      	nop
 80055fc:	08005f35 	.word	0x08005f35
 8005600:	08005f46 	.word	0x08005f46

08005604 <_scanf_chars>:
 8005604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005608:	4615      	mov	r5, r2
 800560a:	688a      	ldr	r2, [r1, #8]
 800560c:	4680      	mov	r8, r0
 800560e:	460c      	mov	r4, r1
 8005610:	b932      	cbnz	r2, 8005620 <_scanf_chars+0x1c>
 8005612:	698a      	ldr	r2, [r1, #24]
 8005614:	2a00      	cmp	r2, #0
 8005616:	bf0c      	ite	eq
 8005618:	2201      	moveq	r2, #1
 800561a:	f04f 32ff 	movne.w	r2, #4294967295
 800561e:	608a      	str	r2, [r1, #8]
 8005620:	6822      	ldr	r2, [r4, #0]
 8005622:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80056b4 <_scanf_chars+0xb0>
 8005626:	06d1      	lsls	r1, r2, #27
 8005628:	bf5f      	itttt	pl
 800562a:	681a      	ldrpl	r2, [r3, #0]
 800562c:	1d11      	addpl	r1, r2, #4
 800562e:	6019      	strpl	r1, [r3, #0]
 8005630:	6816      	ldrpl	r6, [r2, #0]
 8005632:	2700      	movs	r7, #0
 8005634:	69a0      	ldr	r0, [r4, #24]
 8005636:	b188      	cbz	r0, 800565c <_scanf_chars+0x58>
 8005638:	2801      	cmp	r0, #1
 800563a:	d107      	bne.n	800564c <_scanf_chars+0x48>
 800563c:	682a      	ldr	r2, [r5, #0]
 800563e:	7811      	ldrb	r1, [r2, #0]
 8005640:	6962      	ldr	r2, [r4, #20]
 8005642:	5c52      	ldrb	r2, [r2, r1]
 8005644:	b952      	cbnz	r2, 800565c <_scanf_chars+0x58>
 8005646:	2f00      	cmp	r7, #0
 8005648:	d031      	beq.n	80056ae <_scanf_chars+0xaa>
 800564a:	e022      	b.n	8005692 <_scanf_chars+0x8e>
 800564c:	2802      	cmp	r0, #2
 800564e:	d120      	bne.n	8005692 <_scanf_chars+0x8e>
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005658:	071b      	lsls	r3, r3, #28
 800565a:	d41a      	bmi.n	8005692 <_scanf_chars+0x8e>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	06da      	lsls	r2, r3, #27
 8005660:	bf5e      	ittt	pl
 8005662:	682b      	ldrpl	r3, [r5, #0]
 8005664:	781b      	ldrbpl	r3, [r3, #0]
 8005666:	f806 3b01 	strbpl.w	r3, [r6], #1
 800566a:	682a      	ldr	r2, [r5, #0]
 800566c:	686b      	ldr	r3, [r5, #4]
 800566e:	3201      	adds	r2, #1
 8005670:	602a      	str	r2, [r5, #0]
 8005672:	68a2      	ldr	r2, [r4, #8]
 8005674:	3b01      	subs	r3, #1
 8005676:	3a01      	subs	r2, #1
 8005678:	606b      	str	r3, [r5, #4]
 800567a:	3701      	adds	r7, #1
 800567c:	60a2      	str	r2, [r4, #8]
 800567e:	b142      	cbz	r2, 8005692 <_scanf_chars+0x8e>
 8005680:	2b00      	cmp	r3, #0
 8005682:	dcd7      	bgt.n	8005634 <_scanf_chars+0x30>
 8005684:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005688:	4629      	mov	r1, r5
 800568a:	4640      	mov	r0, r8
 800568c:	4798      	blx	r3
 800568e:	2800      	cmp	r0, #0
 8005690:	d0d0      	beq.n	8005634 <_scanf_chars+0x30>
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	f013 0310 	ands.w	r3, r3, #16
 8005698:	d105      	bne.n	80056a6 <_scanf_chars+0xa2>
 800569a:	68e2      	ldr	r2, [r4, #12]
 800569c:	3201      	adds	r2, #1
 800569e:	60e2      	str	r2, [r4, #12]
 80056a0:	69a2      	ldr	r2, [r4, #24]
 80056a2:	b102      	cbz	r2, 80056a6 <_scanf_chars+0xa2>
 80056a4:	7033      	strb	r3, [r6, #0]
 80056a6:	6923      	ldr	r3, [r4, #16]
 80056a8:	443b      	add	r3, r7
 80056aa:	6123      	str	r3, [r4, #16]
 80056ac:	2000      	movs	r0, #0
 80056ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056b2:	bf00      	nop
 80056b4:	08005f73 	.word	0x08005f73

080056b8 <_scanf_i>:
 80056b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056bc:	4698      	mov	r8, r3
 80056be:	4b76      	ldr	r3, [pc, #472]	; (8005898 <_scanf_i+0x1e0>)
 80056c0:	460c      	mov	r4, r1
 80056c2:	4682      	mov	sl, r0
 80056c4:	4616      	mov	r6, r2
 80056c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056ca:	b087      	sub	sp, #28
 80056cc:	ab03      	add	r3, sp, #12
 80056ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80056d2:	4b72      	ldr	r3, [pc, #456]	; (800589c <_scanf_i+0x1e4>)
 80056d4:	69a1      	ldr	r1, [r4, #24]
 80056d6:	4a72      	ldr	r2, [pc, #456]	; (80058a0 <_scanf_i+0x1e8>)
 80056d8:	2903      	cmp	r1, #3
 80056da:	bf18      	it	ne
 80056dc:	461a      	movne	r2, r3
 80056de:	68a3      	ldr	r3, [r4, #8]
 80056e0:	9201      	str	r2, [sp, #4]
 80056e2:	1e5a      	subs	r2, r3, #1
 80056e4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80056e8:	bf88      	it	hi
 80056ea:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80056ee:	4627      	mov	r7, r4
 80056f0:	bf82      	ittt	hi
 80056f2:	eb03 0905 	addhi.w	r9, r3, r5
 80056f6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80056fa:	60a3      	strhi	r3, [r4, #8]
 80056fc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005700:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005704:	bf98      	it	ls
 8005706:	f04f 0900 	movls.w	r9, #0
 800570a:	6023      	str	r3, [r4, #0]
 800570c:	463d      	mov	r5, r7
 800570e:	f04f 0b00 	mov.w	fp, #0
 8005712:	6831      	ldr	r1, [r6, #0]
 8005714:	ab03      	add	r3, sp, #12
 8005716:	7809      	ldrb	r1, [r1, #0]
 8005718:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800571c:	2202      	movs	r2, #2
 800571e:	f7fa fd7f 	bl	8000220 <memchr>
 8005722:	b328      	cbz	r0, 8005770 <_scanf_i+0xb8>
 8005724:	f1bb 0f01 	cmp.w	fp, #1
 8005728:	d159      	bne.n	80057de <_scanf_i+0x126>
 800572a:	6862      	ldr	r2, [r4, #4]
 800572c:	b92a      	cbnz	r2, 800573a <_scanf_i+0x82>
 800572e:	6822      	ldr	r2, [r4, #0]
 8005730:	2308      	movs	r3, #8
 8005732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005736:	6063      	str	r3, [r4, #4]
 8005738:	6022      	str	r2, [r4, #0]
 800573a:	6822      	ldr	r2, [r4, #0]
 800573c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005740:	6022      	str	r2, [r4, #0]
 8005742:	68a2      	ldr	r2, [r4, #8]
 8005744:	1e51      	subs	r1, r2, #1
 8005746:	60a1      	str	r1, [r4, #8]
 8005748:	b192      	cbz	r2, 8005770 <_scanf_i+0xb8>
 800574a:	6832      	ldr	r2, [r6, #0]
 800574c:	1c51      	adds	r1, r2, #1
 800574e:	6031      	str	r1, [r6, #0]
 8005750:	7812      	ldrb	r2, [r2, #0]
 8005752:	f805 2b01 	strb.w	r2, [r5], #1
 8005756:	6872      	ldr	r2, [r6, #4]
 8005758:	3a01      	subs	r2, #1
 800575a:	2a00      	cmp	r2, #0
 800575c:	6072      	str	r2, [r6, #4]
 800575e:	dc07      	bgt.n	8005770 <_scanf_i+0xb8>
 8005760:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005764:	4631      	mov	r1, r6
 8005766:	4650      	mov	r0, sl
 8005768:	4790      	blx	r2
 800576a:	2800      	cmp	r0, #0
 800576c:	f040 8085 	bne.w	800587a <_scanf_i+0x1c2>
 8005770:	f10b 0b01 	add.w	fp, fp, #1
 8005774:	f1bb 0f03 	cmp.w	fp, #3
 8005778:	d1cb      	bne.n	8005712 <_scanf_i+0x5a>
 800577a:	6863      	ldr	r3, [r4, #4]
 800577c:	b90b      	cbnz	r3, 8005782 <_scanf_i+0xca>
 800577e:	230a      	movs	r3, #10
 8005780:	6063      	str	r3, [r4, #4]
 8005782:	6863      	ldr	r3, [r4, #4]
 8005784:	4947      	ldr	r1, [pc, #284]	; (80058a4 <_scanf_i+0x1ec>)
 8005786:	6960      	ldr	r0, [r4, #20]
 8005788:	1ac9      	subs	r1, r1, r3
 800578a:	f000 f88d 	bl	80058a8 <__sccl>
 800578e:	f04f 0b00 	mov.w	fp, #0
 8005792:	68a3      	ldr	r3, [r4, #8]
 8005794:	6822      	ldr	r2, [r4, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d03d      	beq.n	8005816 <_scanf_i+0x15e>
 800579a:	6831      	ldr	r1, [r6, #0]
 800579c:	6960      	ldr	r0, [r4, #20]
 800579e:	f891 c000 	ldrb.w	ip, [r1]
 80057a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80057a6:	2800      	cmp	r0, #0
 80057a8:	d035      	beq.n	8005816 <_scanf_i+0x15e>
 80057aa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80057ae:	d124      	bne.n	80057fa <_scanf_i+0x142>
 80057b0:	0510      	lsls	r0, r2, #20
 80057b2:	d522      	bpl.n	80057fa <_scanf_i+0x142>
 80057b4:	f10b 0b01 	add.w	fp, fp, #1
 80057b8:	f1b9 0f00 	cmp.w	r9, #0
 80057bc:	d003      	beq.n	80057c6 <_scanf_i+0x10e>
 80057be:	3301      	adds	r3, #1
 80057c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80057c4:	60a3      	str	r3, [r4, #8]
 80057c6:	6873      	ldr	r3, [r6, #4]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	6073      	str	r3, [r6, #4]
 80057ce:	dd1b      	ble.n	8005808 <_scanf_i+0x150>
 80057d0:	6833      	ldr	r3, [r6, #0]
 80057d2:	3301      	adds	r3, #1
 80057d4:	6033      	str	r3, [r6, #0]
 80057d6:	68a3      	ldr	r3, [r4, #8]
 80057d8:	3b01      	subs	r3, #1
 80057da:	60a3      	str	r3, [r4, #8]
 80057dc:	e7d9      	b.n	8005792 <_scanf_i+0xda>
 80057de:	f1bb 0f02 	cmp.w	fp, #2
 80057e2:	d1ae      	bne.n	8005742 <_scanf_i+0x8a>
 80057e4:	6822      	ldr	r2, [r4, #0]
 80057e6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80057ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80057ee:	d1bf      	bne.n	8005770 <_scanf_i+0xb8>
 80057f0:	2310      	movs	r3, #16
 80057f2:	6063      	str	r3, [r4, #4]
 80057f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057f8:	e7a2      	b.n	8005740 <_scanf_i+0x88>
 80057fa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80057fe:	6022      	str	r2, [r4, #0]
 8005800:	780b      	ldrb	r3, [r1, #0]
 8005802:	f805 3b01 	strb.w	r3, [r5], #1
 8005806:	e7de      	b.n	80057c6 <_scanf_i+0x10e>
 8005808:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800580c:	4631      	mov	r1, r6
 800580e:	4650      	mov	r0, sl
 8005810:	4798      	blx	r3
 8005812:	2800      	cmp	r0, #0
 8005814:	d0df      	beq.n	80057d6 <_scanf_i+0x11e>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	05db      	lsls	r3, r3, #23
 800581a:	d50d      	bpl.n	8005838 <_scanf_i+0x180>
 800581c:	42bd      	cmp	r5, r7
 800581e:	d909      	bls.n	8005834 <_scanf_i+0x17c>
 8005820:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005828:	4632      	mov	r2, r6
 800582a:	4650      	mov	r0, sl
 800582c:	4798      	blx	r3
 800582e:	f105 39ff 	add.w	r9, r5, #4294967295
 8005832:	464d      	mov	r5, r9
 8005834:	42bd      	cmp	r5, r7
 8005836:	d02d      	beq.n	8005894 <_scanf_i+0x1dc>
 8005838:	6822      	ldr	r2, [r4, #0]
 800583a:	f012 0210 	ands.w	r2, r2, #16
 800583e:	d113      	bne.n	8005868 <_scanf_i+0x1b0>
 8005840:	702a      	strb	r2, [r5, #0]
 8005842:	6863      	ldr	r3, [r4, #4]
 8005844:	9e01      	ldr	r6, [sp, #4]
 8005846:	4639      	mov	r1, r7
 8005848:	4650      	mov	r0, sl
 800584a:	47b0      	blx	r6
 800584c:	6821      	ldr	r1, [r4, #0]
 800584e:	f8d8 3000 	ldr.w	r3, [r8]
 8005852:	f011 0f20 	tst.w	r1, #32
 8005856:	d013      	beq.n	8005880 <_scanf_i+0x1c8>
 8005858:	1d1a      	adds	r2, r3, #4
 800585a:	f8c8 2000 	str.w	r2, [r8]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6018      	str	r0, [r3, #0]
 8005862:	68e3      	ldr	r3, [r4, #12]
 8005864:	3301      	adds	r3, #1
 8005866:	60e3      	str	r3, [r4, #12]
 8005868:	1bed      	subs	r5, r5, r7
 800586a:	44ab      	add	fp, r5
 800586c:	6925      	ldr	r5, [r4, #16]
 800586e:	445d      	add	r5, fp
 8005870:	6125      	str	r5, [r4, #16]
 8005872:	2000      	movs	r0, #0
 8005874:	b007      	add	sp, #28
 8005876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587a:	f04f 0b00 	mov.w	fp, #0
 800587e:	e7ca      	b.n	8005816 <_scanf_i+0x15e>
 8005880:	1d1a      	adds	r2, r3, #4
 8005882:	f8c8 2000 	str.w	r2, [r8]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f011 0f01 	tst.w	r1, #1
 800588c:	bf14      	ite	ne
 800588e:	8018      	strhne	r0, [r3, #0]
 8005890:	6018      	streq	r0, [r3, #0]
 8005892:	e7e6      	b.n	8005862 <_scanf_i+0x1aa>
 8005894:	2001      	movs	r0, #1
 8005896:	e7ed      	b.n	8005874 <_scanf_i+0x1bc>
 8005898:	08005f00 	.word	0x08005f00
 800589c:	08005b05 	.word	0x08005b05
 80058a0:	08005a1d 	.word	0x08005a1d
 80058a4:	08005f70 	.word	0x08005f70

080058a8 <__sccl>:
 80058a8:	b570      	push	{r4, r5, r6, lr}
 80058aa:	780b      	ldrb	r3, [r1, #0]
 80058ac:	4604      	mov	r4, r0
 80058ae:	2b5e      	cmp	r3, #94	; 0x5e
 80058b0:	bf0b      	itete	eq
 80058b2:	784b      	ldrbeq	r3, [r1, #1]
 80058b4:	1c48      	addne	r0, r1, #1
 80058b6:	1c88      	addeq	r0, r1, #2
 80058b8:	2200      	movne	r2, #0
 80058ba:	bf08      	it	eq
 80058bc:	2201      	moveq	r2, #1
 80058be:	1e61      	subs	r1, r4, #1
 80058c0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80058c4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80058c8:	42a9      	cmp	r1, r5
 80058ca:	d1fb      	bne.n	80058c4 <__sccl+0x1c>
 80058cc:	b90b      	cbnz	r3, 80058d2 <__sccl+0x2a>
 80058ce:	3801      	subs	r0, #1
 80058d0:	bd70      	pop	{r4, r5, r6, pc}
 80058d2:	f082 0201 	eor.w	r2, r2, #1
 80058d6:	54e2      	strb	r2, [r4, r3]
 80058d8:	4605      	mov	r5, r0
 80058da:	4628      	mov	r0, r5
 80058dc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80058e0:	292d      	cmp	r1, #45	; 0x2d
 80058e2:	d006      	beq.n	80058f2 <__sccl+0x4a>
 80058e4:	295d      	cmp	r1, #93	; 0x5d
 80058e6:	d0f3      	beq.n	80058d0 <__sccl+0x28>
 80058e8:	b909      	cbnz	r1, 80058ee <__sccl+0x46>
 80058ea:	4628      	mov	r0, r5
 80058ec:	e7f0      	b.n	80058d0 <__sccl+0x28>
 80058ee:	460b      	mov	r3, r1
 80058f0:	e7f1      	b.n	80058d6 <__sccl+0x2e>
 80058f2:	786e      	ldrb	r6, [r5, #1]
 80058f4:	2e5d      	cmp	r6, #93	; 0x5d
 80058f6:	d0fa      	beq.n	80058ee <__sccl+0x46>
 80058f8:	42b3      	cmp	r3, r6
 80058fa:	dcf8      	bgt.n	80058ee <__sccl+0x46>
 80058fc:	3502      	adds	r5, #2
 80058fe:	4619      	mov	r1, r3
 8005900:	3101      	adds	r1, #1
 8005902:	428e      	cmp	r6, r1
 8005904:	5462      	strb	r2, [r4, r1]
 8005906:	dcfb      	bgt.n	8005900 <__sccl+0x58>
 8005908:	1af1      	subs	r1, r6, r3
 800590a:	3901      	subs	r1, #1
 800590c:	1c58      	adds	r0, r3, #1
 800590e:	42b3      	cmp	r3, r6
 8005910:	bfa8      	it	ge
 8005912:	2100      	movge	r1, #0
 8005914:	1843      	adds	r3, r0, r1
 8005916:	e7e0      	b.n	80058da <__sccl+0x32>

08005918 <_strtol_l.constprop.0>:
 8005918:	2b01      	cmp	r3, #1
 800591a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800591e:	d001      	beq.n	8005924 <_strtol_l.constprop.0+0xc>
 8005920:	2b24      	cmp	r3, #36	; 0x24
 8005922:	d906      	bls.n	8005932 <_strtol_l.constprop.0+0x1a>
 8005924:	f7ff f92c 	bl	8004b80 <__errno>
 8005928:	2316      	movs	r3, #22
 800592a:	6003      	str	r3, [r0, #0]
 800592c:	2000      	movs	r0, #0
 800592e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005932:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005a18 <_strtol_l.constprop.0+0x100>
 8005936:	460d      	mov	r5, r1
 8005938:	462e      	mov	r6, r5
 800593a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800593e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005942:	f017 0708 	ands.w	r7, r7, #8
 8005946:	d1f7      	bne.n	8005938 <_strtol_l.constprop.0+0x20>
 8005948:	2c2d      	cmp	r4, #45	; 0x2d
 800594a:	d132      	bne.n	80059b2 <_strtol_l.constprop.0+0x9a>
 800594c:	782c      	ldrb	r4, [r5, #0]
 800594e:	2701      	movs	r7, #1
 8005950:	1cb5      	adds	r5, r6, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d05b      	beq.n	8005a0e <_strtol_l.constprop.0+0xf6>
 8005956:	2b10      	cmp	r3, #16
 8005958:	d109      	bne.n	800596e <_strtol_l.constprop.0+0x56>
 800595a:	2c30      	cmp	r4, #48	; 0x30
 800595c:	d107      	bne.n	800596e <_strtol_l.constprop.0+0x56>
 800595e:	782c      	ldrb	r4, [r5, #0]
 8005960:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005964:	2c58      	cmp	r4, #88	; 0x58
 8005966:	d14d      	bne.n	8005a04 <_strtol_l.constprop.0+0xec>
 8005968:	786c      	ldrb	r4, [r5, #1]
 800596a:	2310      	movs	r3, #16
 800596c:	3502      	adds	r5, #2
 800596e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005972:	f108 38ff 	add.w	r8, r8, #4294967295
 8005976:	f04f 0c00 	mov.w	ip, #0
 800597a:	fbb8 f9f3 	udiv	r9, r8, r3
 800597e:	4666      	mov	r6, ip
 8005980:	fb03 8a19 	mls	sl, r3, r9, r8
 8005984:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005988:	f1be 0f09 	cmp.w	lr, #9
 800598c:	d816      	bhi.n	80059bc <_strtol_l.constprop.0+0xa4>
 800598e:	4674      	mov	r4, lr
 8005990:	42a3      	cmp	r3, r4
 8005992:	dd24      	ble.n	80059de <_strtol_l.constprop.0+0xc6>
 8005994:	f1bc 0f00 	cmp.w	ip, #0
 8005998:	db1e      	blt.n	80059d8 <_strtol_l.constprop.0+0xc0>
 800599a:	45b1      	cmp	r9, r6
 800599c:	d31c      	bcc.n	80059d8 <_strtol_l.constprop.0+0xc0>
 800599e:	d101      	bne.n	80059a4 <_strtol_l.constprop.0+0x8c>
 80059a0:	45a2      	cmp	sl, r4
 80059a2:	db19      	blt.n	80059d8 <_strtol_l.constprop.0+0xc0>
 80059a4:	fb06 4603 	mla	r6, r6, r3, r4
 80059a8:	f04f 0c01 	mov.w	ip, #1
 80059ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059b0:	e7e8      	b.n	8005984 <_strtol_l.constprop.0+0x6c>
 80059b2:	2c2b      	cmp	r4, #43	; 0x2b
 80059b4:	bf04      	itt	eq
 80059b6:	782c      	ldrbeq	r4, [r5, #0]
 80059b8:	1cb5      	addeq	r5, r6, #2
 80059ba:	e7ca      	b.n	8005952 <_strtol_l.constprop.0+0x3a>
 80059bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80059c0:	f1be 0f19 	cmp.w	lr, #25
 80059c4:	d801      	bhi.n	80059ca <_strtol_l.constprop.0+0xb2>
 80059c6:	3c37      	subs	r4, #55	; 0x37
 80059c8:	e7e2      	b.n	8005990 <_strtol_l.constprop.0+0x78>
 80059ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80059ce:	f1be 0f19 	cmp.w	lr, #25
 80059d2:	d804      	bhi.n	80059de <_strtol_l.constprop.0+0xc6>
 80059d4:	3c57      	subs	r4, #87	; 0x57
 80059d6:	e7db      	b.n	8005990 <_strtol_l.constprop.0+0x78>
 80059d8:	f04f 3cff 	mov.w	ip, #4294967295
 80059dc:	e7e6      	b.n	80059ac <_strtol_l.constprop.0+0x94>
 80059de:	f1bc 0f00 	cmp.w	ip, #0
 80059e2:	da05      	bge.n	80059f0 <_strtol_l.constprop.0+0xd8>
 80059e4:	2322      	movs	r3, #34	; 0x22
 80059e6:	6003      	str	r3, [r0, #0]
 80059e8:	4646      	mov	r6, r8
 80059ea:	b942      	cbnz	r2, 80059fe <_strtol_l.constprop.0+0xe6>
 80059ec:	4630      	mov	r0, r6
 80059ee:	e79e      	b.n	800592e <_strtol_l.constprop.0+0x16>
 80059f0:	b107      	cbz	r7, 80059f4 <_strtol_l.constprop.0+0xdc>
 80059f2:	4276      	negs	r6, r6
 80059f4:	2a00      	cmp	r2, #0
 80059f6:	d0f9      	beq.n	80059ec <_strtol_l.constprop.0+0xd4>
 80059f8:	f1bc 0f00 	cmp.w	ip, #0
 80059fc:	d000      	beq.n	8005a00 <_strtol_l.constprop.0+0xe8>
 80059fe:	1e69      	subs	r1, r5, #1
 8005a00:	6011      	str	r1, [r2, #0]
 8005a02:	e7f3      	b.n	80059ec <_strtol_l.constprop.0+0xd4>
 8005a04:	2430      	movs	r4, #48	; 0x30
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1b1      	bne.n	800596e <_strtol_l.constprop.0+0x56>
 8005a0a:	2308      	movs	r3, #8
 8005a0c:	e7af      	b.n	800596e <_strtol_l.constprop.0+0x56>
 8005a0e:	2c30      	cmp	r4, #48	; 0x30
 8005a10:	d0a5      	beq.n	800595e <_strtol_l.constprop.0+0x46>
 8005a12:	230a      	movs	r3, #10
 8005a14:	e7ab      	b.n	800596e <_strtol_l.constprop.0+0x56>
 8005a16:	bf00      	nop
 8005a18:	08005f73 	.word	0x08005f73

08005a1c <_strtol_r>:
 8005a1c:	f7ff bf7c 	b.w	8005918 <_strtol_l.constprop.0>

08005a20 <_strtoul_l.constprop.0>:
 8005a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a24:	4f36      	ldr	r7, [pc, #216]	; (8005b00 <_strtoul_l.constprop.0+0xe0>)
 8005a26:	4686      	mov	lr, r0
 8005a28:	460d      	mov	r5, r1
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a30:	5de6      	ldrb	r6, [r4, r7]
 8005a32:	f016 0608 	ands.w	r6, r6, #8
 8005a36:	d1f8      	bne.n	8005a2a <_strtoul_l.constprop.0+0xa>
 8005a38:	2c2d      	cmp	r4, #45	; 0x2d
 8005a3a:	d12f      	bne.n	8005a9c <_strtoul_l.constprop.0+0x7c>
 8005a3c:	782c      	ldrb	r4, [r5, #0]
 8005a3e:	2601      	movs	r6, #1
 8005a40:	1c85      	adds	r5, r0, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d057      	beq.n	8005af6 <_strtoul_l.constprop.0+0xd6>
 8005a46:	2b10      	cmp	r3, #16
 8005a48:	d109      	bne.n	8005a5e <_strtoul_l.constprop.0+0x3e>
 8005a4a:	2c30      	cmp	r4, #48	; 0x30
 8005a4c:	d107      	bne.n	8005a5e <_strtoul_l.constprop.0+0x3e>
 8005a4e:	7828      	ldrb	r0, [r5, #0]
 8005a50:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005a54:	2858      	cmp	r0, #88	; 0x58
 8005a56:	d149      	bne.n	8005aec <_strtoul_l.constprop.0+0xcc>
 8005a58:	786c      	ldrb	r4, [r5, #1]
 8005a5a:	2310      	movs	r3, #16
 8005a5c:	3502      	adds	r5, #2
 8005a5e:	f04f 38ff 	mov.w	r8, #4294967295
 8005a62:	2700      	movs	r7, #0
 8005a64:	fbb8 f8f3 	udiv	r8, r8, r3
 8005a68:	fb03 f908 	mul.w	r9, r3, r8
 8005a6c:	ea6f 0909 	mvn.w	r9, r9
 8005a70:	4638      	mov	r0, r7
 8005a72:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005a76:	f1bc 0f09 	cmp.w	ip, #9
 8005a7a:	d814      	bhi.n	8005aa6 <_strtoul_l.constprop.0+0x86>
 8005a7c:	4664      	mov	r4, ip
 8005a7e:	42a3      	cmp	r3, r4
 8005a80:	dd22      	ble.n	8005ac8 <_strtoul_l.constprop.0+0xa8>
 8005a82:	2f00      	cmp	r7, #0
 8005a84:	db1d      	blt.n	8005ac2 <_strtoul_l.constprop.0+0xa2>
 8005a86:	4580      	cmp	r8, r0
 8005a88:	d31b      	bcc.n	8005ac2 <_strtoul_l.constprop.0+0xa2>
 8005a8a:	d101      	bne.n	8005a90 <_strtoul_l.constprop.0+0x70>
 8005a8c:	45a1      	cmp	r9, r4
 8005a8e:	db18      	blt.n	8005ac2 <_strtoul_l.constprop.0+0xa2>
 8005a90:	fb00 4003 	mla	r0, r0, r3, r4
 8005a94:	2701      	movs	r7, #1
 8005a96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a9a:	e7ea      	b.n	8005a72 <_strtoul_l.constprop.0+0x52>
 8005a9c:	2c2b      	cmp	r4, #43	; 0x2b
 8005a9e:	bf04      	itt	eq
 8005aa0:	782c      	ldrbeq	r4, [r5, #0]
 8005aa2:	1c85      	addeq	r5, r0, #2
 8005aa4:	e7cd      	b.n	8005a42 <_strtoul_l.constprop.0+0x22>
 8005aa6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005aaa:	f1bc 0f19 	cmp.w	ip, #25
 8005aae:	d801      	bhi.n	8005ab4 <_strtoul_l.constprop.0+0x94>
 8005ab0:	3c37      	subs	r4, #55	; 0x37
 8005ab2:	e7e4      	b.n	8005a7e <_strtoul_l.constprop.0+0x5e>
 8005ab4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005ab8:	f1bc 0f19 	cmp.w	ip, #25
 8005abc:	d804      	bhi.n	8005ac8 <_strtoul_l.constprop.0+0xa8>
 8005abe:	3c57      	subs	r4, #87	; 0x57
 8005ac0:	e7dd      	b.n	8005a7e <_strtoul_l.constprop.0+0x5e>
 8005ac2:	f04f 37ff 	mov.w	r7, #4294967295
 8005ac6:	e7e6      	b.n	8005a96 <_strtoul_l.constprop.0+0x76>
 8005ac8:	2f00      	cmp	r7, #0
 8005aca:	da07      	bge.n	8005adc <_strtoul_l.constprop.0+0xbc>
 8005acc:	2322      	movs	r3, #34	; 0x22
 8005ace:	f8ce 3000 	str.w	r3, [lr]
 8005ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad6:	b932      	cbnz	r2, 8005ae6 <_strtoul_l.constprop.0+0xc6>
 8005ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005adc:	b106      	cbz	r6, 8005ae0 <_strtoul_l.constprop.0+0xc0>
 8005ade:	4240      	negs	r0, r0
 8005ae0:	2a00      	cmp	r2, #0
 8005ae2:	d0f9      	beq.n	8005ad8 <_strtoul_l.constprop.0+0xb8>
 8005ae4:	b107      	cbz	r7, 8005ae8 <_strtoul_l.constprop.0+0xc8>
 8005ae6:	1e69      	subs	r1, r5, #1
 8005ae8:	6011      	str	r1, [r2, #0]
 8005aea:	e7f5      	b.n	8005ad8 <_strtoul_l.constprop.0+0xb8>
 8005aec:	2430      	movs	r4, #48	; 0x30
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1b5      	bne.n	8005a5e <_strtoul_l.constprop.0+0x3e>
 8005af2:	2308      	movs	r3, #8
 8005af4:	e7b3      	b.n	8005a5e <_strtoul_l.constprop.0+0x3e>
 8005af6:	2c30      	cmp	r4, #48	; 0x30
 8005af8:	d0a9      	beq.n	8005a4e <_strtoul_l.constprop.0+0x2e>
 8005afa:	230a      	movs	r3, #10
 8005afc:	e7af      	b.n	8005a5e <_strtoul_l.constprop.0+0x3e>
 8005afe:	bf00      	nop
 8005b00:	08005f73 	.word	0x08005f73

08005b04 <_strtoul_r>:
 8005b04:	f7ff bf8c 	b.w	8005a20 <_strtoul_l.constprop.0>

08005b08 <__submore>:
 8005b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b14:	4299      	cmp	r1, r3
 8005b16:	d11d      	bne.n	8005b54 <__submore+0x4c>
 8005b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b1c:	f000 f8c4 	bl	8005ca8 <_malloc_r>
 8005b20:	b918      	cbnz	r0, 8005b2a <__submore+0x22>
 8005b22:	f04f 30ff 	mov.w	r0, #4294967295
 8005b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005b30:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005b34:	6360      	str	r0, [r4, #52]	; 0x34
 8005b36:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005b3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005b3e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005b42:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005b46:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005b4a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005b4e:	6020      	str	r0, [r4, #0]
 8005b50:	2000      	movs	r0, #0
 8005b52:	e7e8      	b.n	8005b26 <__submore+0x1e>
 8005b54:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005b56:	0077      	lsls	r7, r6, #1
 8005b58:	463a      	mov	r2, r7
 8005b5a:	f000 f919 	bl	8005d90 <_realloc_r>
 8005b5e:	4605      	mov	r5, r0
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d0de      	beq.n	8005b22 <__submore+0x1a>
 8005b64:	eb00 0806 	add.w	r8, r0, r6
 8005b68:	4601      	mov	r1, r0
 8005b6a:	4632      	mov	r2, r6
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	f000 f807 	bl	8005b80 <memcpy>
 8005b72:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005b76:	f8c4 8000 	str.w	r8, [r4]
 8005b7a:	e7e9      	b.n	8005b50 <__submore+0x48>

08005b7c <__retarget_lock_acquire_recursive>:
 8005b7c:	4770      	bx	lr

08005b7e <__retarget_lock_release_recursive>:
 8005b7e:	4770      	bx	lr

08005b80 <memcpy>:
 8005b80:	440a      	add	r2, r1
 8005b82:	4291      	cmp	r1, r2
 8005b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b88:	d100      	bne.n	8005b8c <memcpy+0xc>
 8005b8a:	4770      	bx	lr
 8005b8c:	b510      	push	{r4, lr}
 8005b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b96:	4291      	cmp	r1, r2
 8005b98:	d1f9      	bne.n	8005b8e <memcpy+0xe>
 8005b9a:	bd10      	pop	{r4, pc}

08005b9c <memmove>:
 8005b9c:	4288      	cmp	r0, r1
 8005b9e:	b510      	push	{r4, lr}
 8005ba0:	eb01 0402 	add.w	r4, r1, r2
 8005ba4:	d902      	bls.n	8005bac <memmove+0x10>
 8005ba6:	4284      	cmp	r4, r0
 8005ba8:	4623      	mov	r3, r4
 8005baa:	d807      	bhi.n	8005bbc <memmove+0x20>
 8005bac:	1e43      	subs	r3, r0, #1
 8005bae:	42a1      	cmp	r1, r4
 8005bb0:	d008      	beq.n	8005bc4 <memmove+0x28>
 8005bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bba:	e7f8      	b.n	8005bae <memmove+0x12>
 8005bbc:	4402      	add	r2, r0
 8005bbe:	4601      	mov	r1, r0
 8005bc0:	428a      	cmp	r2, r1
 8005bc2:	d100      	bne.n	8005bc6 <memmove+0x2a>
 8005bc4:	bd10      	pop	{r4, pc}
 8005bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bce:	e7f7      	b.n	8005bc0 <memmove+0x24>

08005bd0 <_free_r>:
 8005bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bd2:	2900      	cmp	r1, #0
 8005bd4:	d044      	beq.n	8005c60 <_free_r+0x90>
 8005bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bda:	9001      	str	r0, [sp, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f1a1 0404 	sub.w	r4, r1, #4
 8005be2:	bfb8      	it	lt
 8005be4:	18e4      	addlt	r4, r4, r3
 8005be6:	f000 f913 	bl	8005e10 <__malloc_lock>
 8005bea:	4a1e      	ldr	r2, [pc, #120]	; (8005c64 <_free_r+0x94>)
 8005bec:	9801      	ldr	r0, [sp, #4]
 8005bee:	6813      	ldr	r3, [r2, #0]
 8005bf0:	b933      	cbnz	r3, 8005c00 <_free_r+0x30>
 8005bf2:	6063      	str	r3, [r4, #4]
 8005bf4:	6014      	str	r4, [r2, #0]
 8005bf6:	b003      	add	sp, #12
 8005bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bfc:	f000 b90e 	b.w	8005e1c <__malloc_unlock>
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	d908      	bls.n	8005c16 <_free_r+0x46>
 8005c04:	6825      	ldr	r5, [r4, #0]
 8005c06:	1961      	adds	r1, r4, r5
 8005c08:	428b      	cmp	r3, r1
 8005c0a:	bf01      	itttt	eq
 8005c0c:	6819      	ldreq	r1, [r3, #0]
 8005c0e:	685b      	ldreq	r3, [r3, #4]
 8005c10:	1949      	addeq	r1, r1, r5
 8005c12:	6021      	streq	r1, [r4, #0]
 8005c14:	e7ed      	b.n	8005bf2 <_free_r+0x22>
 8005c16:	461a      	mov	r2, r3
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	b10b      	cbz	r3, 8005c20 <_free_r+0x50>
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	d9fa      	bls.n	8005c16 <_free_r+0x46>
 8005c20:	6811      	ldr	r1, [r2, #0]
 8005c22:	1855      	adds	r5, r2, r1
 8005c24:	42a5      	cmp	r5, r4
 8005c26:	d10b      	bne.n	8005c40 <_free_r+0x70>
 8005c28:	6824      	ldr	r4, [r4, #0]
 8005c2a:	4421      	add	r1, r4
 8005c2c:	1854      	adds	r4, r2, r1
 8005c2e:	42a3      	cmp	r3, r4
 8005c30:	6011      	str	r1, [r2, #0]
 8005c32:	d1e0      	bne.n	8005bf6 <_free_r+0x26>
 8005c34:	681c      	ldr	r4, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	6053      	str	r3, [r2, #4]
 8005c3a:	4421      	add	r1, r4
 8005c3c:	6011      	str	r1, [r2, #0]
 8005c3e:	e7da      	b.n	8005bf6 <_free_r+0x26>
 8005c40:	d902      	bls.n	8005c48 <_free_r+0x78>
 8005c42:	230c      	movs	r3, #12
 8005c44:	6003      	str	r3, [r0, #0]
 8005c46:	e7d6      	b.n	8005bf6 <_free_r+0x26>
 8005c48:	6825      	ldr	r5, [r4, #0]
 8005c4a:	1961      	adds	r1, r4, r5
 8005c4c:	428b      	cmp	r3, r1
 8005c4e:	bf04      	itt	eq
 8005c50:	6819      	ldreq	r1, [r3, #0]
 8005c52:	685b      	ldreq	r3, [r3, #4]
 8005c54:	6063      	str	r3, [r4, #4]
 8005c56:	bf04      	itt	eq
 8005c58:	1949      	addeq	r1, r1, r5
 8005c5a:	6021      	streq	r1, [r4, #0]
 8005c5c:	6054      	str	r4, [r2, #4]
 8005c5e:	e7ca      	b.n	8005bf6 <_free_r+0x26>
 8005c60:	b003      	add	sp, #12
 8005c62:	bd30      	pop	{r4, r5, pc}
 8005c64:	200001ac 	.word	0x200001ac

08005c68 <sbrk_aligned>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	4e0e      	ldr	r6, [pc, #56]	; (8005ca4 <sbrk_aligned+0x3c>)
 8005c6c:	460c      	mov	r4, r1
 8005c6e:	6831      	ldr	r1, [r6, #0]
 8005c70:	4605      	mov	r5, r0
 8005c72:	b911      	cbnz	r1, 8005c7a <sbrk_aligned+0x12>
 8005c74:	f000 f8bc 	bl	8005df0 <_sbrk_r>
 8005c78:	6030      	str	r0, [r6, #0]
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f000 f8b7 	bl	8005df0 <_sbrk_r>
 8005c82:	1c43      	adds	r3, r0, #1
 8005c84:	d00a      	beq.n	8005c9c <sbrk_aligned+0x34>
 8005c86:	1cc4      	adds	r4, r0, #3
 8005c88:	f024 0403 	bic.w	r4, r4, #3
 8005c8c:	42a0      	cmp	r0, r4
 8005c8e:	d007      	beq.n	8005ca0 <sbrk_aligned+0x38>
 8005c90:	1a21      	subs	r1, r4, r0
 8005c92:	4628      	mov	r0, r5
 8005c94:	f000 f8ac 	bl	8005df0 <_sbrk_r>
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d101      	bne.n	8005ca0 <sbrk_aligned+0x38>
 8005c9c:	f04f 34ff 	mov.w	r4, #4294967295
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	200001b0 	.word	0x200001b0

08005ca8 <_malloc_r>:
 8005ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cac:	1ccd      	adds	r5, r1, #3
 8005cae:	f025 0503 	bic.w	r5, r5, #3
 8005cb2:	3508      	adds	r5, #8
 8005cb4:	2d0c      	cmp	r5, #12
 8005cb6:	bf38      	it	cc
 8005cb8:	250c      	movcc	r5, #12
 8005cba:	2d00      	cmp	r5, #0
 8005cbc:	4607      	mov	r7, r0
 8005cbe:	db01      	blt.n	8005cc4 <_malloc_r+0x1c>
 8005cc0:	42a9      	cmp	r1, r5
 8005cc2:	d905      	bls.n	8005cd0 <_malloc_r+0x28>
 8005cc4:	230c      	movs	r3, #12
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	2600      	movs	r6, #0
 8005cca:	4630      	mov	r0, r6
 8005ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cd0:	4e2e      	ldr	r6, [pc, #184]	; (8005d8c <_malloc_r+0xe4>)
 8005cd2:	f000 f89d 	bl	8005e10 <__malloc_lock>
 8005cd6:	6833      	ldr	r3, [r6, #0]
 8005cd8:	461c      	mov	r4, r3
 8005cda:	bb34      	cbnz	r4, 8005d2a <_malloc_r+0x82>
 8005cdc:	4629      	mov	r1, r5
 8005cde:	4638      	mov	r0, r7
 8005ce0:	f7ff ffc2 	bl	8005c68 <sbrk_aligned>
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	d14d      	bne.n	8005d86 <_malloc_r+0xde>
 8005cea:	6834      	ldr	r4, [r6, #0]
 8005cec:	4626      	mov	r6, r4
 8005cee:	2e00      	cmp	r6, #0
 8005cf0:	d140      	bne.n	8005d74 <_malloc_r+0xcc>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	eb04 0803 	add.w	r8, r4, r3
 8005cfc:	f000 f878 	bl	8005df0 <_sbrk_r>
 8005d00:	4580      	cmp	r8, r0
 8005d02:	d13a      	bne.n	8005d7a <_malloc_r+0xd2>
 8005d04:	6821      	ldr	r1, [r4, #0]
 8005d06:	3503      	adds	r5, #3
 8005d08:	1a6d      	subs	r5, r5, r1
 8005d0a:	f025 0503 	bic.w	r5, r5, #3
 8005d0e:	3508      	adds	r5, #8
 8005d10:	2d0c      	cmp	r5, #12
 8005d12:	bf38      	it	cc
 8005d14:	250c      	movcc	r5, #12
 8005d16:	4629      	mov	r1, r5
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f7ff ffa5 	bl	8005c68 <sbrk_aligned>
 8005d1e:	3001      	adds	r0, #1
 8005d20:	d02b      	beq.n	8005d7a <_malloc_r+0xd2>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	442b      	add	r3, r5
 8005d26:	6023      	str	r3, [r4, #0]
 8005d28:	e00e      	b.n	8005d48 <_malloc_r+0xa0>
 8005d2a:	6822      	ldr	r2, [r4, #0]
 8005d2c:	1b52      	subs	r2, r2, r5
 8005d2e:	d41e      	bmi.n	8005d6e <_malloc_r+0xc6>
 8005d30:	2a0b      	cmp	r2, #11
 8005d32:	d916      	bls.n	8005d62 <_malloc_r+0xba>
 8005d34:	1961      	adds	r1, r4, r5
 8005d36:	42a3      	cmp	r3, r4
 8005d38:	6025      	str	r5, [r4, #0]
 8005d3a:	bf18      	it	ne
 8005d3c:	6059      	strne	r1, [r3, #4]
 8005d3e:	6863      	ldr	r3, [r4, #4]
 8005d40:	bf08      	it	eq
 8005d42:	6031      	streq	r1, [r6, #0]
 8005d44:	5162      	str	r2, [r4, r5]
 8005d46:	604b      	str	r3, [r1, #4]
 8005d48:	4638      	mov	r0, r7
 8005d4a:	f104 060b 	add.w	r6, r4, #11
 8005d4e:	f000 f865 	bl	8005e1c <__malloc_unlock>
 8005d52:	f026 0607 	bic.w	r6, r6, #7
 8005d56:	1d23      	adds	r3, r4, #4
 8005d58:	1af2      	subs	r2, r6, r3
 8005d5a:	d0b6      	beq.n	8005cca <_malloc_r+0x22>
 8005d5c:	1b9b      	subs	r3, r3, r6
 8005d5e:	50a3      	str	r3, [r4, r2]
 8005d60:	e7b3      	b.n	8005cca <_malloc_r+0x22>
 8005d62:	6862      	ldr	r2, [r4, #4]
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	bf0c      	ite	eq
 8005d68:	6032      	streq	r2, [r6, #0]
 8005d6a:	605a      	strne	r2, [r3, #4]
 8005d6c:	e7ec      	b.n	8005d48 <_malloc_r+0xa0>
 8005d6e:	4623      	mov	r3, r4
 8005d70:	6864      	ldr	r4, [r4, #4]
 8005d72:	e7b2      	b.n	8005cda <_malloc_r+0x32>
 8005d74:	4634      	mov	r4, r6
 8005d76:	6876      	ldr	r6, [r6, #4]
 8005d78:	e7b9      	b.n	8005cee <_malloc_r+0x46>
 8005d7a:	230c      	movs	r3, #12
 8005d7c:	603b      	str	r3, [r7, #0]
 8005d7e:	4638      	mov	r0, r7
 8005d80:	f000 f84c 	bl	8005e1c <__malloc_unlock>
 8005d84:	e7a1      	b.n	8005cca <_malloc_r+0x22>
 8005d86:	6025      	str	r5, [r4, #0]
 8005d88:	e7de      	b.n	8005d48 <_malloc_r+0xa0>
 8005d8a:	bf00      	nop
 8005d8c:	200001ac 	.word	0x200001ac

08005d90 <_realloc_r>:
 8005d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d94:	4680      	mov	r8, r0
 8005d96:	4614      	mov	r4, r2
 8005d98:	460e      	mov	r6, r1
 8005d9a:	b921      	cbnz	r1, 8005da6 <_realloc_r+0x16>
 8005d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005da0:	4611      	mov	r1, r2
 8005da2:	f7ff bf81 	b.w	8005ca8 <_malloc_r>
 8005da6:	b92a      	cbnz	r2, 8005db4 <_realloc_r+0x24>
 8005da8:	f7ff ff12 	bl	8005bd0 <_free_r>
 8005dac:	4625      	mov	r5, r4
 8005dae:	4628      	mov	r0, r5
 8005db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db4:	f000 f838 	bl	8005e28 <_malloc_usable_size_r>
 8005db8:	4284      	cmp	r4, r0
 8005dba:	4607      	mov	r7, r0
 8005dbc:	d802      	bhi.n	8005dc4 <_realloc_r+0x34>
 8005dbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dc2:	d812      	bhi.n	8005dea <_realloc_r+0x5a>
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	f7ff ff6e 	bl	8005ca8 <_malloc_r>
 8005dcc:	4605      	mov	r5, r0
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	d0ed      	beq.n	8005dae <_realloc_r+0x1e>
 8005dd2:	42bc      	cmp	r4, r7
 8005dd4:	4622      	mov	r2, r4
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	bf28      	it	cs
 8005dda:	463a      	movcs	r2, r7
 8005ddc:	f7ff fed0 	bl	8005b80 <memcpy>
 8005de0:	4631      	mov	r1, r6
 8005de2:	4640      	mov	r0, r8
 8005de4:	f7ff fef4 	bl	8005bd0 <_free_r>
 8005de8:	e7e1      	b.n	8005dae <_realloc_r+0x1e>
 8005dea:	4635      	mov	r5, r6
 8005dec:	e7df      	b.n	8005dae <_realloc_r+0x1e>
	...

08005df0 <_sbrk_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	4d06      	ldr	r5, [pc, #24]	; (8005e0c <_sbrk_r+0x1c>)
 8005df4:	2300      	movs	r3, #0
 8005df6:	4604      	mov	r4, r0
 8005df8:	4608      	mov	r0, r1
 8005dfa:	602b      	str	r3, [r5, #0]
 8005dfc:	f7fb f880 	bl	8000f00 <_sbrk>
 8005e00:	1c43      	adds	r3, r0, #1
 8005e02:	d102      	bne.n	8005e0a <_sbrk_r+0x1a>
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	b103      	cbz	r3, 8005e0a <_sbrk_r+0x1a>
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	bd38      	pop	{r3, r4, r5, pc}
 8005e0c:	200001a4 	.word	0x200001a4

08005e10 <__malloc_lock>:
 8005e10:	4801      	ldr	r0, [pc, #4]	; (8005e18 <__malloc_lock+0x8>)
 8005e12:	f7ff beb3 	b.w	8005b7c <__retarget_lock_acquire_recursive>
 8005e16:	bf00      	nop
 8005e18:	200001a8 	.word	0x200001a8

08005e1c <__malloc_unlock>:
 8005e1c:	4801      	ldr	r0, [pc, #4]	; (8005e24 <__malloc_unlock+0x8>)
 8005e1e:	f7ff beae 	b.w	8005b7e <__retarget_lock_release_recursive>
 8005e22:	bf00      	nop
 8005e24:	200001a8 	.word	0x200001a8

08005e28 <_malloc_usable_size_r>:
 8005e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e2c:	1f18      	subs	r0, r3, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	bfbc      	itt	lt
 8005e32:	580b      	ldrlt	r3, [r1, r0]
 8005e34:	18c0      	addlt	r0, r0, r3
 8005e36:	4770      	bx	lr

08005e38 <_init>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	bf00      	nop
 8005e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3e:	bc08      	pop	{r3}
 8005e40:	469e      	mov	lr, r3
 8005e42:	4770      	bx	lr

08005e44 <_fini>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	bf00      	nop
 8005e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4a:	bc08      	pop	{r3}
 8005e4c:	469e      	mov	lr, r3
 8005e4e:	4770      	bx	lr
