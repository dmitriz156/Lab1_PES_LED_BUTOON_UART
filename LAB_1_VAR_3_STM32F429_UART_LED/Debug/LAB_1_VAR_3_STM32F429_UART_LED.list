
LAB_1_VAR_3_STM32F429_UART_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d94  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  08008f48  08008f48  00018f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094cc  080094cc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080094cc  080094cc  000194cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094d4  080094d4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094d4  080094d4  000194d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094d8  080094d8  000194d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080094dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000144  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000320  20000320  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a16  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aef  00000000  00000000  00032c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  00035718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e58  00000000  00000000  00036698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026491  00000000  00000000  000374f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013181  00000000  00000000  0005d981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e829b  00000000  00000000  00070b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158d9d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005468  00000000  00000000  00158df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008f2c 	.word	0x08008f2c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08008f2c 	.word	0x08008f2c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f92:	f107 0320 	add.w	r3, r7, #32
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f004 fc1c 	bl	80057e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fac:	4b36      	ldr	r3, [pc, #216]	; (8001088 <MX_ADC1_Init+0xfc>)
 8000fae:	4a37      	ldr	r2, [pc, #220]	; (800108c <MX_ADC1_Init+0x100>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fb2:	4b35      	ldr	r3, [pc, #212]	; (8001088 <MX_ADC1_Init+0xfc>)
 8000fb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fba:	4b33      	ldr	r3, [pc, #204]	; (8001088 <MX_ADC1_Init+0xfc>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fc0:	4b31      	ldr	r3, [pc, #196]	; (8001088 <MX_ADC1_Init+0xfc>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fc6:	4b30      	ldr	r3, [pc, #192]	; (8001088 <MX_ADC1_Init+0xfc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fcc:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <MX_ADC1_Init+0xfc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <MX_ADC1_Init+0xfc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <MX_ADC1_Init+0xfc>)
 8000fdc:	4a2c      	ldr	r2, [pc, #176]	; (8001090 <MX_ADC1_Init+0x104>)
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <MX_ADC1_Init+0xfc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <MX_ADC1_Init+0xfc>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fec:	4b26      	ldr	r3, [pc, #152]	; (8001088 <MX_ADC1_Init+0xfc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff4:	4b24      	ldr	r3, [pc, #144]	; (8001088 <MX_ADC1_Init+0xfc>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ffa:	4823      	ldr	r0, [pc, #140]	; (8001088 <MX_ADC1_Init+0xfc>)
 8000ffc:	f000 ff8c 	bl	8001f18 <HAL_ADC_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8001006:	f000 fc6c 	bl	80018e2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800100a:	4b22      	ldr	r3, [pc, #136]	; (8001094 <MX_ADC1_Init+0x108>)
 800100c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800100e:	2301      	movs	r3, #1
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	4619      	mov	r1, r3
 800101c:	481a      	ldr	r0, [pc, #104]	; (8001088 <MX_ADC1_Init+0xfc>)
 800101e:	f001 f977 	bl	8002310 <HAL_ADC_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001028:	f000 fc5b 	bl	80018e2 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_TEMPSENSOR;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_ADC1_Init+0x108>)
 800102e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8001030:	2301      	movs	r3, #1
 8001032:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001034:	2302      	movs	r3, #2
 8001036:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001038:	2303      	movs	r3, #3
 800103a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_ADC1_Init+0x10c>)
 8001042:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <MX_ADC1_Init+0xfc>)
 8001056:	f001 fce1 	bl	8002a1c <HAL_ADCEx_InjectedConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001060:	f000 fc3f 	bl	80018e2 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VREFINT;
 8001064:	2311      	movs	r3, #17
 8001066:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8001068:	2302      	movs	r3, #2
 800106a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_ADC1_Init+0xfc>)
 8001072:	f001 fcd3 	bl	8002a1c <HAL_ADCEx_InjectedConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800107c:	f000 fc31 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3730      	adds	r7, #48	; 0x30
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200001f8 	.word	0x200001f8
 800108c:	40012000 	.word	0x40012000
 8001090:	0f000001 	.word	0x0f000001
 8001094:	10000012 	.word	0x10000012
 8001098:	000f0001 	.word	0x000f0001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <HAL_ADC_MspInit+0x48>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d115      	bne.n	80010da <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <HAL_ADC_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a0c      	ldr	r2, [pc, #48]	; (80010e8 <HAL_ADC_MspInit+0x4c>)
 80010b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_ADC_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2012      	movs	r0, #18
 80010d0:	f001 ff3d 	bl	8002f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010d4:	2012      	movs	r0, #18
 80010d6:	f001 ff56 	bl	8002f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40012000 	.word	0x40012000
 80010e8:	40023800 	.word	0x40023800

080010ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b39      	ldr	r3, [pc, #228]	; (80011ec <MX_GPIO_Init+0x100>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a38      	ldr	r2, [pc, #224]	; (80011ec <MX_GPIO_Init+0x100>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b36      	ldr	r3, [pc, #216]	; (80011ec <MX_GPIO_Init+0x100>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b32      	ldr	r3, [pc, #200]	; (80011ec <MX_GPIO_Init+0x100>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a31      	ldr	r2, [pc, #196]	; (80011ec <MX_GPIO_Init+0x100>)
 8001128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b2f      	ldr	r3, [pc, #188]	; (80011ec <MX_GPIO_Init+0x100>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <MX_GPIO_Init+0x100>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a2a      	ldr	r2, [pc, #168]	; (80011ec <MX_GPIO_Init+0x100>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <MX_GPIO_Init+0x100>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b24      	ldr	r3, [pc, #144]	; (80011ec <MX_GPIO_Init+0x100>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <MX_GPIO_Init+0x100>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <MX_GPIO_Init+0x100>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_GPIO_Init+0x100>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <MX_GPIO_Init+0x100>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_GPIO_Init+0x100>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001194:	4816      	ldr	r0, [pc, #88]	; (80011f0 <MX_GPIO_Init+0x104>)
 8001196:	f002 f975 	bl	8003484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800119a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	4810      	ldr	r0, [pc, #64]	; (80011f4 <MX_GPIO_Init+0x108>)
 80011b2:	f001 ffa3 	bl	80030fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80011b6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <MX_GPIO_Init+0x104>)
 80011d0:	f001 ff94 	bl	80030fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	2028      	movs	r0, #40	; 0x28
 80011da:	f001 feb8 	bl	8002f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011de:	2028      	movs	r0, #40	; 0x28
 80011e0:	f001 fed1 	bl	8002f86 <HAL_NVIC_EnableIRQ>

}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020800 	.word	0x40020800

080011f8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0c      	blt.n	8001224 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <__NVIC_ClearPendingIRQ+0x38>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	3360      	adds	r3, #96	; 0x60
 8001220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	00000000 	.word	0x00000000

08001238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b0cf      	sub	sp, #316	; 0x13c
 800123c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123e:	f000 fdd5 	bl	8001dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001242:	f000 f981 	bl	8001548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001246:	f7ff ff51 	bl	80010ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800124a:	f000 fd2b 	bl	8001ca4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800124e:	f000 fca7 	bl	8001ba0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001252:	f7ff fe9b 	bl	8000f8c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ring_init(&uart_ring, buff, sizeof(buff) / sizeof(buff[0]) ); // Initialize UART receiver ring buffer.
 8001256:	2220      	movs	r2, #32
 8001258:	49a5      	ldr	r1, [pc, #660]	; (80014f0 <main+0x2b8>)
 800125a:	48a6      	ldr	r0, [pc, #664]	; (80014f4 <main+0x2bc>)
 800125c:	f000 fa76 	bl	800174c <ring_init>
  sprintf((char*)tstring,"UART IT Enter command 'T MCU','V REF' or 'ALL SENS' ('t mcu','v ref','all sens')\r\n");
 8001260:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001264:	49a4      	ldr	r1, [pc, #656]	; (80014f8 <main+0x2c0>)
 8001266:	4618      	mov	r0, r3
 8001268:	f004 ff2e 	bl	80060c8 <siprintf>
  HAL_UART_Transmit_IT(&huart3,tstring,strlen((char*)tstring));
 800126c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001270:	4618      	mov	r0, r3
 8001272:	f7fe ffc7 	bl	8000204 <strlen>
 8001276:	4603      	mov	r3, r0
 8001278:	b29a      	uxth	r2, r3
 800127a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800127e:	4619      	mov	r1, r3
 8001280:	489e      	ldr	r0, [pc, #632]	; (80014fc <main+0x2c4>)
 8001282:	f003 fb16 	bl	80048b2 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart3,uart_ring.buffer,1);						 // Start UART receiver in the non blocking mode
 8001286:	4b9b      	ldr	r3, [pc, #620]	; (80014f4 <main+0x2bc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	4619      	mov	r1, r3
 800128e:	489b      	ldr	r0, [pc, #620]	; (80014fc <main+0x2c4>)
 8001290:	f003 fb54 	bl	800493c <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //btn_cur = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
	  HAL_ADCEx_InjectedStart(&hadc1);
 8001294:	489a      	ldr	r0, [pc, #616]	; (8001500 <main+0x2c8>)
 8001296:	f001 fa69 	bl	800276c <HAL_ADCEx_InjectedStart>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 800129a:	2164      	movs	r1, #100	; 0x64
 800129c:	4898      	ldr	r0, [pc, #608]	; (8001500 <main+0x2c8>)
 800129e:	f000 fe7e 	bl	8001f9e <HAL_ADC_PollForConversion>
	  //temprt = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
	  //Temperature (in °C) = {(VSENSE – V25) / Avg_Slope} + 25
	  temprt = ((3.3*HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1)/4095-0.76)/0.0025)+25;
 80012a2:	2101      	movs	r1, #1
 80012a4:	4896      	ldr	r0, [pc, #600]	; (8001500 <main+0x2c8>)
 80012a6:	f001 fb77 	bl	8002998 <HAL_ADCEx_InjectedGetValue>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f949 	bl	8000544 <__aeabi_ui2d>
 80012b2:	a387      	add	r3, pc, #540	; (adr r3, 80014d0 <main+0x298>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f7ff f9be 	bl	8000638 <__aeabi_dmul>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	a384      	add	r3, pc, #528	; (adr r3, 80014d8 <main+0x2a0>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	f7ff fadf 	bl	800088c <__aeabi_ddiv>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	a382      	add	r3, pc, #520	; (adr r3, 80014e0 <main+0x2a8>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7fe fff4 	bl	80002c8 <__aeabi_dsub>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	a37f      	add	r3, pc, #508	; (adr r3, 80014e8 <main+0x2b0>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff facd 	bl	800088c <__aeabi_ddiv>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b81      	ldr	r3, [pc, #516]	; (8001504 <main+0x2cc>)
 8001300:	f7fe ffe4 	bl	80002cc <__adddf3>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f7ff fc6c 	bl	8000be8 <__aeabi_d2f>
 8001310:	4603      	mov	r3, r0
 8001312:	4a7d      	ldr	r2, [pc, #500]	; (8001508 <main+0x2d0>)
 8001314:	6013      	str	r3, [r2, #0]
	  voltag = ((float)HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2)*3/4096);
 8001316:	2102      	movs	r1, #2
 8001318:	4879      	ldr	r0, [pc, #484]	; (8001500 <main+0x2c8>)
 800131a:	f001 fb3d 	bl	8002998 <HAL_ADCEx_InjectedGetValue>
 800131e:	ee07 0a90 	vmov	s15, r0
 8001322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001326:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800132a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800132e:	eddf 6a77 	vldr	s13, [pc, #476]	; 800150c <main+0x2d4>
 8001332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001336:	4b76      	ldr	r3, [pc, #472]	; (8001510 <main+0x2d8>)
 8001338:	edc3 7a00 	vstr	s15, [r3]
	  HAL_ADCEx_InjectedStop(&hadc1);
 800133c:	4870      	ldr	r0, [pc, #448]	; (8001500 <main+0x2c8>)
 800133e:	f001 fadf 	bl	8002900 <HAL_ADCEx_InjectedStop>


	  if (ring_get_message(&uart_ring, rstring)){
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	4619      	mov	r1, r3
 8001348:	486a      	ldr	r0, [pc, #424]	; (80014f4 <main+0x2bc>)
 800134a:	f000 fa6c 	bl	8001826 <ring_get_message>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 8082 	beq.w	800145a <main+0x222>
		  sscanf((char*)rstring,"%25[TMCUVREFALSNtmcuvrefalsn ]", string);
 8001356:	1d3a      	adds	r2, r7, #4
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	496d      	ldr	r1, [pc, #436]	; (8001514 <main+0x2dc>)
 800135e:	4618      	mov	r0, r3
 8001360:	f004 fed2 	bl	8006108 <siscanf>

		  if(!strcmp(string,"T MCU") || !strcmp(string,"t mcu"))
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	496c      	ldr	r1, [pc, #432]	; (8001518 <main+0x2e0>)
 8001368:	4618      	mov	r0, r3
 800136a:	f7fe ff41 	bl	80001f0 <strcmp>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <main+0x14c>
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	4969      	ldr	r1, [pc, #420]	; (800151c <main+0x2e4>)
 8001378:	4618      	mov	r0, r3
 800137a:	f7fe ff39 	bl	80001f0 <strcmp>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10f      	bne.n	80013a4 <main+0x16c>
		  {
			  sprintf((char*)tstring,"T MCU = %d C\r\n",(uint16_t)temprt);
 8001384:	4b60      	ldr	r3, [pc, #384]	; (8001508 <main+0x2d0>)
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800138e:	ee17 3a90 	vmov	r3, s15
 8001392:	b29b      	uxth	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800139a:	4961      	ldr	r1, [pc, #388]	; (8001520 <main+0x2e8>)
 800139c:	4618      	mov	r0, r3
 800139e:	f004 fe93 	bl	80060c8 <siprintf>
 80013a2:	e04d      	b.n	8001440 <main+0x208>
		  }
		  else if(!strcmp(string,"V REF") || !strcmp(string,"v ref"))
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	495f      	ldr	r1, [pc, #380]	; (8001524 <main+0x2ec>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7fe ff21 	bl	80001f0 <strcmp>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d007      	beq.n	80013c4 <main+0x18c>
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	495c      	ldr	r1, [pc, #368]	; (8001528 <main+0x2f0>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7fe ff19 	bl	80001f0 <strcmp>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10c      	bne.n	80013de <main+0x1a6>
		  {
			  sprintf((char*)tstring,"V REF = %.2f V\r\n",voltag);
 80013c4:	4b52      	ldr	r3, [pc, #328]	; (8001510 <main+0x2d8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8dd 	bl	8000588 <__aeabi_f2d>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80013d6:	4955      	ldr	r1, [pc, #340]	; (800152c <main+0x2f4>)
 80013d8:	f004 fe76 	bl	80060c8 <siprintf>
 80013dc:	e030      	b.n	8001440 <main+0x208>
		  }
		  else if(!strcmp(string,"ALL SENS") || !strcmp(string,"all sens"))
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	4953      	ldr	r1, [pc, #332]	; (8001530 <main+0x2f8>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7fe ff04 	bl	80001f0 <strcmp>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d007      	beq.n	80013fe <main+0x1c6>
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4950      	ldr	r1, [pc, #320]	; (8001534 <main+0x2fc>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe fefc 	bl	80001f0 <strcmp>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d118      	bne.n	8001430 <main+0x1f8>
		  {
			  sprintf((char*)tstring,"T MCU = %d C\r\n" "V REF = %.2f V\r\n",(uint16_t)temprt,voltag);
 80013fe:	4b42      	ldr	r3, [pc, #264]	; (8001508 <main+0x2d0>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001408:	ee17 3a90 	vmov	r3, s15
 800140c:	b29b      	uxth	r3, r3
 800140e:	461c      	mov	r4, r3
 8001410:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <main+0x2d8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f8b7 	bl	8000588 <__aeabi_f2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001422:	e9cd 2300 	strd	r2, r3, [sp]
 8001426:	4622      	mov	r2, r4
 8001428:	4943      	ldr	r1, [pc, #268]	; (8001538 <main+0x300>)
 800142a:	f004 fe4d 	bl	80060c8 <siprintf>
 800142e:	e007      	b.n	8001440 <main+0x208>
			  //sprintf((char*)tstring,"V REF = %.2f C\r\n",voltag);
		  }
		  else
		  {
			  // Transmit (in non blocking mode) back to the UART the last entered line and prompt for the next input
			  sprintf((char*)tstring,"Incorrect command Echo: %s\n" "Enter the correct command 'T MCU','V REF' or 'ALL SENS' ('t mcu','v ref','all sens')\r\n",rstring);
 8001430:	f107 020c 	add.w	r2, r7, #12
 8001434:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001438:	4940      	ldr	r1, [pc, #256]	; (800153c <main+0x304>)
 800143a:	4618      	mov	r0, r3
 800143c:	f004 fe44 	bl	80060c8 <siprintf>
		  }

		  HAL_UART_Transmit_IT(&huart3,tstring,strlen((char*)tstring));
 8001440:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001444:	4618      	mov	r0, r3
 8001446:	f7fe fedd 	bl	8000204 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	b29a      	uxth	r2, r3
 800144e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001452:	4619      	mov	r1, r3
 8001454:	4829      	ldr	r0, [pc, #164]	; (80014fc <main+0x2c4>)
 8001456:	f003 fa2c 	bl	80048b2 <HAL_UART_Transmit_IT>
	  }


	  if(btn_state == 0)
 800145a:	4b39      	ldr	r3, [pc, #228]	; (8001540 <main+0x308>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f47f af18 	bne.w	8001294 <main+0x5c>
	  {
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, 1);
 8001464:	2201      	movs	r2, #1
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	4836      	ldr	r0, [pc, #216]	; (8001544 <main+0x30c>)
 800146a:	f002 f80b 	bl	8003484 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800146e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001472:	f000 fd2d 	bl	8001ed0 <HAL_Delay>
		  if(btn_state == 0)
 8001476:	4b32      	ldr	r3, [pc, #200]	; (8001540 <main+0x308>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f47f af0a 	bne.w	8001294 <main+0x5c>
		  {
			  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001486:	482f      	ldr	r0, [pc, #188]	; (8001544 <main+0x30c>)
 8001488:	f001 fffc 	bl	8003484 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 800148c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001490:	f000 fd1e 	bl	8001ed0 <HAL_Delay>
			  if(btn_state == 0)
 8001494:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <main+0x308>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	f47f aefb 	bne.w	8001294 <main+0x5c>
			  {
				  HAL_GPIO_WritePin(GPIOB, LD2_Pin, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2180      	movs	r1, #128	; 0x80
 80014a2:	4828      	ldr	r0, [pc, #160]	; (8001544 <main+0x30c>)
 80014a4:	f001 ffee 	bl	8003484 <HAL_GPIO_WritePin>
				  HAL_Delay(500);
 80014a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014ac:	f000 fd10 	bl	8001ed0 <HAL_Delay>
				  if(btn_state == 0)
 80014b0:	4b23      	ldr	r3, [pc, #140]	; (8001540 <main+0x308>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f47f aeed 	bne.w	8001294 <main+0x5c>
				  {
					  HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014c0:	4820      	ldr	r0, [pc, #128]	; (8001544 <main+0x30c>)
 80014c2:	f001 ffdf 	bl	8003484 <HAL_GPIO_WritePin>
					  HAL_Delay(500);
 80014c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014ca:	f000 fd01 	bl	8001ed0 <HAL_Delay>
	  HAL_ADCEx_InjectedStart(&hadc1);
 80014ce:	e6e1      	b.n	8001294 <main+0x5c>
 80014d0:	66666666 	.word	0x66666666
 80014d4:	400a6666 	.word	0x400a6666
 80014d8:	00000000 	.word	0x00000000
 80014dc:	40affe00 	.word	0x40affe00
 80014e0:	851eb852 	.word	0x851eb852
 80014e4:	3fe851eb 	.word	0x3fe851eb
 80014e8:	47ae147b 	.word	0x47ae147b
 80014ec:	3f647ae1 	.word	0x3f647ae1
 80014f0:	20000244 	.word	0x20000244
 80014f4:	20000264 	.word	0x20000264
 80014f8:	08008f48 	.word	0x08008f48
 80014fc:	200002c8 	.word	0x200002c8
 8001500:	200001f8 	.word	0x200001f8
 8001504:	40390000 	.word	0x40390000
 8001508:	20000274 	.word	0x20000274
 800150c:	45800000 	.word	0x45800000
 8001510:	20000278 	.word	0x20000278
 8001514:	08008f9c 	.word	0x08008f9c
 8001518:	08008fbc 	.word	0x08008fbc
 800151c:	08008fc4 	.word	0x08008fc4
 8001520:	08008fcc 	.word	0x08008fcc
 8001524:	08008fdc 	.word	0x08008fdc
 8001528:	08008fe4 	.word	0x08008fe4
 800152c:	08008fec 	.word	0x08008fec
 8001530:	08009000 	.word	0x08009000
 8001534:	0800900c 	.word	0x0800900c
 8001538:	08009018 	.word	0x08009018
 800153c:	08009038 	.word	0x08009038
 8001540:	20000240 	.word	0x20000240
 8001544:	40020400 	.word	0x40020400

08001548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b094      	sub	sp, #80	; 0x50
 800154c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154e:	f107 0320 	add.w	r3, r7, #32
 8001552:	2230      	movs	r2, #48	; 0x30
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f004 f944 	bl	80057e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <SystemClock_Config+0xd8>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	4a2a      	ldr	r2, [pc, #168]	; (8001620 <SystemClock_Config+0xd8>)
 8001576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157a:	6413      	str	r3, [r2, #64]	; 0x40
 800157c:	4b28      	ldr	r3, [pc, #160]	; (8001620 <SystemClock_Config+0xd8>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	4b25      	ldr	r3, [pc, #148]	; (8001624 <SystemClock_Config+0xdc>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a24      	ldr	r2, [pc, #144]	; (8001624 <SystemClock_Config+0xdc>)
 8001592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <SystemClock_Config+0xdc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ae:	2302      	movs	r3, #2
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015b8:	2304      	movs	r3, #4
 80015ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80015bc:	23b4      	movs	r3, #180	; 0xb4
 80015be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c0:	2302      	movs	r3, #2
 80015c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015c4:	2304      	movs	r3, #4
 80015c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c8:	f107 0320 	add.w	r3, r7, #32
 80015cc:	4618      	mov	r0, r3
 80015ce:	f001 ffdb 	bl	8003588 <HAL_RCC_OscConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015d8:	f000 f983 	bl	80018e2 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015dc:	f001 ff84 	bl	80034e8 <HAL_PWREx_EnableOverDrive>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80015e6:	f000 f97c 	bl	80018e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ea:	230f      	movs	r3, #15
 80015ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ee:	2302      	movs	r3, #2
 80015f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001600:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	2105      	movs	r1, #5
 8001608:	4618      	mov	r0, r3
 800160a:	f002 fa35 	bl	8003a78 <HAL_RCC_ClockConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001614:	f000 f965 	bl	80018e2 <Error_Handler>
  }
}
 8001618:	bf00      	nop
 800161a:	3750      	adds	r7, #80	; 0x50
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	40007000 	.word	0x40007000

08001628 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001638:	d105      	bne.n	8001646 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // сразу же отключаем прерывания на этом пине
 800163a:	2028      	movs	r0, #40	; 0x28
 800163c:	f001 fcb1 	bl	8002fa2 <HAL_NVIC_DisableIRQ>
		// либо выполняем какое-то действие прямо тут, либо поднимаем флажок
		HAL_TIM_Base_Start_IT(&htim1); // запускаем таймер
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <HAL_GPIO_EXTI_Callback+0x28>)
 8001642:	f002 fc89 	bl	8003f58 <HAL_TIM_Base_Start_IT>
	}
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000280 	.word	0x20000280

08001654 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d11f      	bne.n	80016a6 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		HAL_TIM_Base_Stop_IT(&htim1); // останавливаем таймер
 8001666:	4813      	ldr	r0, [pc, #76]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001668:	f002 fce6 	bl	8004038 <HAL_TIM_Base_Stop_IT>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);  // очищаем бит EXTI_PR (бит прерывания)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800166e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001672:	615a      	str	r2, [r3, #20]
		NVIC_ClearPendingIRQ(EXTI15_10_IRQn); // очищаем бит NVIC_ICPRx (бит очереди)
 8001674:	2028      	movs	r0, #40	; 0x28
 8001676:	f7ff fdbf 	bl	80011f8 <__NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);   // включаем внешнее прерывание
 800167a:	2028      	movs	r0, #40	; 0x28
 800167c:	f001 fc83 	bl	8002f86 <HAL_NVIC_EnableIRQ>
		//btn_cur = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8001680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001684:	480d      	ldr	r0, [pc, #52]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001686:	f001 fee5 	bl	8003454 <HAL_GPIO_ReadPin>
 800168a:	4603      	mov	r3, r0
 800168c:	2b01      	cmp	r3, #1
 800168e:	d10a      	bne.n	80016a6 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			if(btn_state == 0)
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d103      	bne.n	80016a0 <HAL_TIM_PeriodElapsedCallback+0x4c>
			{
				btn_state = 1;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
		}
		/*if((btn_prev == 0) && (btn_cur != 0))
		{
		}*/
	}
}
 800169e:	e002      	b.n	80016a6 <HAL_TIM_PeriodElapsedCallback+0x52>
			else btn_state = 0;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40010000 	.word	0x40010000
 80016b4:	20000280 	.word	0x20000280
 80016b8:	40013c00 	.word	0x40013c00
 80016bc:	40020800 	.word	0x40020800
 80016c0:	20000240 	.word	0x20000240

080016c4 <HAL_UART_RxCpltCallback>:
//////////////////////////////////////////////////////////UART_IT////////////////////////////////////////////////////////////////
// UART receive interrupt callback function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	// Check that interrupt caused by UART1
	if (huart == &huart3)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <HAL_UART_RxCpltCallback+0x80>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d133      	bne.n	800173c <HAL_UART_RxCpltCallback+0x78>
		{
			// Put new character from the UART receiver data register (RDR) to the ring buffer
			ring_putchar(&uart_ring,huart->Instance->DR);                                             //питання RDR чи DR?
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	4619      	mov	r1, r3
 80016de:	481a      	ldr	r0, [pc, #104]	; (8001748 <HAL_UART_RxCpltCallback+0x84>)
 80016e0:	f000 f862 	bl	80017a8 <ring_putchar>
			// Set the overrun flag if the message is longer than ring buffer can hold
			if (uart_ring.end == uart_ring.start) uart_ring.flag.BufferOverrun = 1;
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_UART_RxCpltCallback+0x84>)
 80016e6:	88da      	ldrh	r2, [r3, #6]
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_UART_RxCpltCallback+0x84>)
 80016ea:	889b      	ldrh	r3, [r3, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d104      	bne.n	80016fa <HAL_UART_RxCpltCallback+0x36>
 80016f0:	4a15      	ldr	r2, [pc, #84]	; (8001748 <HAL_UART_RxCpltCallback+0x84>)
 80016f2:	7b13      	ldrb	r3, [r2, #12]
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	7313      	strb	r3, [r2, #12]
			// Set the message ready flag if the end of line character has been received
			if ((uart_ring.buffer[uart_ring.end -1] == '\r') ||
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <HAL_UART_RxCpltCallback+0x84>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_UART_RxCpltCallback+0x84>)
 8001700:	88db      	ldrh	r3, [r3, #6]
 8001702:	3b01      	subs	r3, #1
 8001704:	4413      	add	r3, r2
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b0d      	cmp	r3, #13
 800170a:	d008      	beq.n	800171e <HAL_UART_RxCpltCallback+0x5a>
					(uart_ring.buffer[uart_ring.end -1] == '\n'))
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_UART_RxCpltCallback+0x84>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <HAL_UART_RxCpltCallback+0x84>)
 8001712:	88db      	ldrh	r3, [r3, #6]
 8001714:	3b01      	subs	r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	781b      	ldrb	r3, [r3, #0]
			if ((uart_ring.buffer[uart_ring.end -1] == '\r') ||
 800171a:	2b0a      	cmp	r3, #10
 800171c:	d104      	bne.n	8001728 <HAL_UART_RxCpltCallback+0x64>
				uart_ring.flag.MessageReady = 1;
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_UART_RxCpltCallback+0x84>)
 8001720:	7b13      	ldrb	r3, [r2, #12]
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	7313      	strb	r3, [r2, #12]
			// Receive the next character from UART in non blocking mode
			HAL_UART_Receive_IT(&huart3,&uart_ring.buffer[uart_ring.end],1);
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <HAL_UART_RxCpltCallback+0x84>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_UART_RxCpltCallback+0x84>)
 800172e:	88d2      	ldrh	r2, [r2, #6]
 8001730:	4413      	add	r3, r2
 8001732:	2201      	movs	r2, #1
 8001734:	4619      	mov	r1, r3
 8001736:	4803      	ldr	r0, [pc, #12]	; (8001744 <HAL_UART_RxCpltCallback+0x80>)
 8001738:	f003 f900 	bl	800493c <HAL_UART_Receive_IT>
		}
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200002c8 	.word	0x200002c8
 8001748:	20000264 	.word	0x20000264

0800174c <ring_init>:
// Initializes the ring buffer
void ring_init(uart_ring_buff_t * uart_ring, uint8_t * buff, uint16_t buff_size)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	4613      	mov	r3, r2
 8001758:	80fb      	strh	r3, [r7, #6]
	uart_ring->buffer = buff;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	601a      	str	r2, [r3, #0]
	uart_ring->size = buff_size;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	88fa      	ldrh	r2, [r7, #6]
 8001764:	811a      	strh	r2, [r3, #8]
	ring_clear(uart_ring);
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 f804 	bl	8001774 <ring_clear>
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <ring_clear>:
// Clears the ring buffer
void ring_clear(uart_ring_buff_t * uart_ring)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	uart_ring->start = 0;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	809a      	strh	r2, [r3, #4]
	uart_ring->end = 0;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	80da      	strh	r2, [r3, #6]
	uart_ring->flag.BufferOverrun = 0;
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	7b13      	ldrb	r3, [r2, #12]
 800178c:	f36f 0341 	bfc	r3, #1, #1
 8001790:	7313      	strb	r3, [r2, #12]
	uart_ring->flag.MessageReady = 0;
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	7b13      	ldrb	r3, [r2, #12]
 8001796:	f36f 0300 	bfc	r3, #0, #1
 800179a:	7313      	strb	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <ring_putchar>:
// Puts a new character to the ring buffer
void ring_putchar(uart_ring_buff_t * uart_ring, uint8_t ch)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
	uart_ring->buffer[uart_ring->end++] = ch;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	88db      	ldrh	r3, [r3, #6]
 80017bc:	1c59      	adds	r1, r3, #1
 80017be:	b288      	uxth	r0, r1
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	80c8      	strh	r0, [r1, #6]
 80017c4:	4413      	add	r3, r2
 80017c6:	78fa      	ldrb	r2, [r7, #3]
 80017c8:	701a      	strb	r2, [r3, #0]
	if (uart_ring->end >= uart_ring->size) uart_ring->end = 0;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	88da      	ldrh	r2, [r3, #6]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	891b      	ldrh	r3, [r3, #8]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d302      	bcc.n	80017dc <ring_putchar+0x34>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	80da      	strh	r2, [r3, #6]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <ring_getchar>:
// Gets one character from the ring buffer
uint8_t ring_getchar(uart_ring_buff_t * uart_ring)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	uint8_t ch = uart_ring->buffer[uart_ring->start++];
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	889b      	ldrh	r3, [r3, #4]
 80017f8:	1c59      	adds	r1, r3, #1
 80017fa:	b288      	uxth	r0, r1
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	8088      	strh	r0, [r1, #4]
 8001800:	4413      	add	r3, r2
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	73fb      	strb	r3, [r7, #15]
	if (uart_ring->start >= uart_ring->size) uart_ring->start = 0;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	889a      	ldrh	r2, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	891b      	ldrh	r3, [r3, #8]
 800180e:	429a      	cmp	r2, r3
 8001810:	d302      	bcc.n	8001818 <ring_getchar+0x30>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	809a      	strh	r2, [r3, #4]
	return ch;
 8001818:	7bfb      	ldrb	r3, [r7, #15]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <ring_get_message>:
// Reads full message from the ring buffer and clears appropriate flags
uint8_t ring_get_message(uart_ring_buff_t * uart_ring, uint8_t * string)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
	uint16_t char_count = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	81fb      	strh	r3, [r7, #14]
	// Check if the message has been received
	if (uart_ring->flag.MessageReady)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7b1b      	ldrb	r3, [r3, #12]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d049      	beq.n	80018d6 <ring_get_message+0xb0>
		{
			if (uart_ring->flag.BufferOverrun)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7b1b      	ldrb	r3, [r3, #12]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d016      	beq.n	800187e <ring_get_message+0x58>
				{
					uart_ring->start = uart_ring->end;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	88da      	ldrh	r2, [r3, #6]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	809a      	strh	r2, [r3, #4]
					uart_ring->flag.BufferOverrun = 0;
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	7b13      	ldrb	r3, [r2, #12]
 800185c:	f36f 0341 	bfc	r3, #1, #1
 8001860:	7313      	strb	r3, [r2, #12]
				}
			while ((uart_ring->buffer[uart_ring->start] != '\r') &&
 8001862:	e00c      	b.n	800187e <ring_get_message+0x58>
						 (uart_ring->buffer[uart_ring->start] != '\n') &&
						 (uart_ring->size != char_count - 1))
				{
					*string =  ring_getchar(uart_ring);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ffbf 	bl	80017e8 <ring_getchar>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	701a      	strb	r2, [r3, #0]
					string++;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	3301      	adds	r3, #1
 8001876:	603b      	str	r3, [r7, #0]
					char_count++;
 8001878:	89fb      	ldrh	r3, [r7, #14]
 800187a:	3301      	adds	r3, #1
 800187c:	81fb      	strh	r3, [r7, #14]
			while ((uart_ring->buffer[uart_ring->start] != '\r') &&
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	8892      	ldrh	r2, [r2, #4]
 8001886:	4413      	add	r3, r2
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b0d      	cmp	r3, #13
 800188c:	d00e      	beq.n	80018ac <ring_get_message+0x86>
						 (uart_ring->buffer[uart_ring->start] != '\n') &&
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	8892      	ldrh	r2, [r2, #4]
 8001896:	4413      	add	r3, r2
 8001898:	781b      	ldrb	r3, [r3, #0]
			while ((uart_ring->buffer[uart_ring->start] != '\r') &&
 800189a:	2b0a      	cmp	r3, #10
 800189c:	d006      	beq.n	80018ac <ring_get_message+0x86>
						 (uart_ring->size != char_count - 1))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	891b      	ldrh	r3, [r3, #8]
 80018a2:	461a      	mov	r2, r3
 80018a4:	89fb      	ldrh	r3, [r7, #14]
 80018a6:	3b01      	subs	r3, #1
						 (uart_ring->buffer[uart_ring->start] != '\n') &&
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d1db      	bne.n	8001864 <ring_get_message+0x3e>
				}
			*string =  ring_getchar(uart_ring);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff9b 	bl	80017e8 <ring_getchar>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	701a      	strb	r2, [r3, #0]
			string++;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	3301      	adds	r3, #1
 80018be:	603b      	str	r3, [r7, #0]
			char_count++;
 80018c0:	89fb      	ldrh	r3, [r7, #14]
 80018c2:	3301      	adds	r3, #1
 80018c4:	81fb      	strh	r3, [r7, #14]
			*string = '\0';
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
			uart_ring->flag.MessageReady = 0;
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	7b13      	ldrb	r3, [r2, #12]
 80018d0:	f36f 0300 	bfc	r3, #0, #1
 80018d4:	7313      	strb	r3, [r2, #12]
		}
	return char_count;
 80018d6:	89fb      	ldrh	r3, [r7, #14]
 80018d8:	b2db      	uxtb	r3, r3
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e6:	b672      	cpsid	i
}
 80018e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ea:	e7fe      	b.n	80018ea <Error_Handler+0x8>

080018ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_MspInit+0x4c>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_MspInit+0x4c>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_MspInit+0x4c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_MspInit+0x4c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_MspInit+0x4c>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_MspInit+0x4c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x4>

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001988:	f000 fa82 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <ADC_IRQHandler+0x10>)
 8001996:	f000 fb8d 	bl	80020b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200001f8 	.word	0x200001f8

080019a4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80019aa:	f002 fb74 	bl	8004096 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000280 	.word	0x20000280

080019b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019be:	f002 fb6a 	bl	8004096 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000280 	.word	0x20000280

080019cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <USART3_IRQHandler+0x10>)
 80019d2:	f002 ffe3 	bl	800499c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200002c8 	.word	0x200002c8

080019e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80019e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019e8:	f001 fd66 	bl	80034b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
	return 1;
 80019f4:	2301      	movs	r3, #1
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_kill>:

int _kill(int pid, int sig)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a0a:	f003 fec1 	bl	8005790 <__errno>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2216      	movs	r2, #22
 8001a12:	601a      	str	r2, [r3, #0]
	return -1;
 8001a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_exit>:

void _exit (int status)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ffe7 	bl	8001a00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a32:	e7fe      	b.n	8001a32 <_exit+0x12>

08001a34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e00a      	b.n	8001a5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a46:	f3af 8000 	nop.w
 8001a4a:	4601      	mov	r1, r0
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	60ba      	str	r2, [r7, #8]
 8001a52:	b2ca      	uxtb	r2, r1
 8001a54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	dbf0      	blt.n	8001a46 <_read+0x12>
	}

return len;
 8001a64:	687b      	ldr	r3, [r7, #4]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e009      	b.n	8001a94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	60ba      	str	r2, [r7, #8]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	3301      	adds	r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	dbf1      	blt.n	8001a80 <_write+0x12>
	}
	return len;
 8001a9c:	687b      	ldr	r3, [r7, #4]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <_close>:

int _close(int file)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
	return -1;
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ace:	605a      	str	r2, [r3, #4]
	return 0;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <_isatty>:

int _isatty(int file)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ae6:	2301      	movs	r3, #1
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
	return 0;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b18:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <_sbrk+0x5c>)
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <_sbrk+0x60>)
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <_sbrk+0x64>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <_sbrk+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d207      	bcs.n	8001b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b40:	f003 fe26 	bl	8005790 <__errno>
 8001b44:	4603      	mov	r3, r0
 8001b46:	220c      	movs	r2, #12
 8001b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	e009      	b.n	8001b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <_sbrk+0x64>)
 8001b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20030000 	.word	0x20030000
 8001b70:	00000400 	.word	0x00000400
 8001b74:	2000027c 	.word	0x2000027c
 8001b78:	20000320 	.word	0x20000320

08001b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <SystemInit+0x20>)
 8001b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b86:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <SystemInit+0x20>)
 8001b88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <MX_TIM1_Init+0x9c>)
 8001bbe:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <MX_TIM1_Init+0xa0>)
 8001bc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 900-1;
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <MX_TIM1_Init+0x9c>)
 8001bc4:	f240 3283 	movw	r2, #899	; 0x383
 8001bc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <MX_TIM1_Init+0x9c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <MX_TIM1_Init+0x9c>)
 8001bd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MX_TIM1_Init+0x9c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <MX_TIM1_Init+0x9c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <MX_TIM1_Init+0x9c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bea:	4814      	ldr	r0, [pc, #80]	; (8001c3c <MX_TIM1_Init+0x9c>)
 8001bec:	f002 f964 	bl	8003eb8 <HAL_TIM_Base_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001bf6:	f7ff fe74 	bl	80018e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c00:	f107 0308 	add.w	r3, r7, #8
 8001c04:	4619      	mov	r1, r3
 8001c06:	480d      	ldr	r0, [pc, #52]	; (8001c3c <MX_TIM1_Init+0x9c>)
 8001c08:	f002 fb4d 	bl	80042a6 <HAL_TIM_ConfigClockSource>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001c12:	f7ff fe66 	bl	80018e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c1e:	463b      	mov	r3, r7
 8001c20:	4619      	mov	r1, r3
 8001c22:	4806      	ldr	r0, [pc, #24]	; (8001c3c <MX_TIM1_Init+0x9c>)
 8001c24:	f002 fd68 	bl	80046f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001c2e:	f7ff fe58 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000280 	.word	0x20000280
 8001c40:	40010000 	.word	0x40010000

08001c44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <HAL_TIM_Base_MspInit+0x58>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d11d      	bne.n	8001c92 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_TIM_Base_MspInit+0x5c>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_TIM_Base_MspInit+0x5c>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_TIM_Base_MspInit+0x5c>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	2018      	movs	r0, #24
 8001c78:	f001 f969 	bl	8002f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001c7c:	2018      	movs	r0, #24
 8001c7e:	f001 f982 	bl	8002f86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	2019      	movs	r0, #25
 8001c88:	f001 f961 	bl	8002f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c8c:	2019      	movs	r0, #25
 8001c8e:	f001 f97a 	bl	8002f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40010000 	.word	0x40010000
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <MX_USART3_UART_Init+0x50>)
 8001cac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cca:	220c      	movs	r2, #12
 8001ccc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_USART3_UART_Init+0x4c>)
 8001cdc:	f002 fd9c 	bl	8004818 <HAL_UART_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ce6:	f7ff fdfc 	bl	80018e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200002c8 	.word	0x200002c8
 8001cf4:	40004800 	.word	0x40004800

08001cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <HAL_UART_MspInit+0x94>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d134      	bne.n	8001d84 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d40:	f043 0308 	orr.w	r3, r3, #8
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_UART_MspInit+0x98>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d64:	2307      	movs	r3, #7
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4809      	ldr	r0, [pc, #36]	; (8001d94 <HAL_UART_MspInit+0x9c>)
 8001d70:	f001 f9c4 	bl	80030fc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	2027      	movs	r0, #39	; 0x27
 8001d7a:	f001 f8e8 	bl	8002f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d7e:	2027      	movs	r0, #39	; 0x27
 8001d80:	f001 f901 	bl	8002f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40004800 	.word	0x40004800
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020c00 	.word	0x40020c00

08001d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d9c:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d9e:	490e      	ldr	r1, [pc, #56]	; (8001dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001da0:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da4:	e002      	b.n	8001dac <LoopCopyDataInit>

08001da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001daa:	3304      	adds	r3, #4

08001dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db0:	d3f9      	bcc.n	8001da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db2:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001db4:	4c0b      	ldr	r4, [pc, #44]	; (8001de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db8:	e001      	b.n	8001dbe <LoopFillZerobss>

08001dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dbc:	3204      	adds	r2, #4

08001dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc0:	d3fb      	bcc.n	8001dba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dc2:	f7ff fedb 	bl	8001b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f003 fce9 	bl	800579c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dca:	f7ff fa35 	bl	8001238 <main>
  bx  lr    
 8001dce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001dd0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ddc:	080094dc 	.word	0x080094dc
  ldr r2, =_sbss
 8001de0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001de4:	20000320 	.word	0x20000320

08001de8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <CAN1_RX0_IRQHandler>
	...

08001dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <HAL_Init+0x40>)
 8001df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_Init+0x40>)
 8001e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <HAL_Init+0x40>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f001 f88f 	bl	8002f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1a:	200f      	movs	r0, #15
 8001e1c:	f000 f808 	bl	8001e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e20:	f7ff fd64 	bl	80018ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023c00 	.word	0x40023c00

08001e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_InitTick+0x54>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_InitTick+0x58>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f001 f8b5 	bl	8002fbe <HAL_SYSTICK_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00e      	b.n	8001e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0f      	cmp	r3, #15
 8001e62:	d80a      	bhi.n	8001e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e64:	2200      	movs	r2, #0
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f001 f86f 	bl	8002f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e70:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <HAL_InitTick+0x5c>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	20000004 	.word	0x20000004

08001e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_IncTick+0x20>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_IncTick+0x24>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <HAL_IncTick+0x24>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	2000030c 	.word	0x2000030c

08001eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_GetTick+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2000030c 	.word	0x2000030c

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff ffee 	bl	8001eb8 <HAL_GetTick>
 8001edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_Delay+0x44>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ffde 	bl	8001eb8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
  {
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000008 	.word	0x20000008

08001f18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e033      	b.n	8001f96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff f8b0 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d118      	bne.n	8001f88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f5e:	f023 0302 	bic.w	r3, r3, #2
 8001f62:	f043 0202 	orr.w	r2, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fb02 	bl	8002574 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f023 0303 	bic.w	r3, r3, #3
 8001f7e:	f043 0201 	orr.w	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
 8001f86:	e001      	b.n	8001f8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fba:	d113      	bne.n	8001fe4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fca:	d10b      	bne.n	8001fe4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	f043 0220 	orr.w	r2, r3, #32
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e063      	b.n	80020ac <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001fe4:	f7ff ff68 	bl	8001eb8 <HAL_GetTick>
 8001fe8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fea:	e021      	b.n	8002030 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff2:	d01d      	beq.n	8002030 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <HAL_ADC_PollForConversion+0x6c>
 8001ffa:	f7ff ff5d 	bl	8001eb8 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d212      	bcs.n	8002030 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b02      	cmp	r3, #2
 8002016:	d00b      	beq.n	8002030 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f043 0204 	orr.w	r2, r3, #4
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e03d      	b.n	80020ac <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b02      	cmp	r3, #2
 800203c:	d1d6      	bne.n	8001fec <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f06f 0212 	mvn.w	r2, #18
 8002046:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d123      	bne.n	80020aa <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11f      	bne.n	80020aa <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002074:	2b00      	cmp	r3, #0
 8002076:	d006      	beq.n	8002086 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002082:	2b00      	cmp	r3, #0
 8002084:	d111      	bne.n	80020aa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d105      	bne.n	80020aa <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d049      	beq.n	800217e <HAL_ADC_IRQHandler+0xca>
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d046      	beq.n	800217e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d12b      	bne.n	800216e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800211a:	2b00      	cmp	r3, #0
 800211c:	d127      	bne.n	800216e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002136:	2b00      	cmp	r3, #0
 8002138:	d119      	bne.n	800216e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0220 	bic.w	r2, r2, #32
 8002148:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d105      	bne.n	800216e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f043 0201 	orr.w	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8b0 	bl	80022d4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0212 	mvn.w	r2, #18
 800217c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d057      	beq.n	8002244 <HAL_ADC_IRQHandler+0x190>
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d054      	beq.n	8002244 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d105      	bne.n	80021b2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d139      	bne.n	8002234 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d12b      	bne.n	8002234 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d124      	bne.n	8002234 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d11d      	bne.n	8002234 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d119      	bne.n	8002234 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800220e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d105      	bne.n	8002234 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f043 0201 	orr.w	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fbe7 	bl	8002a08 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f06f 020c 	mvn.w	r2, #12
 8002242:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002252:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d017      	beq.n	800228a <HAL_ADC_IRQHandler+0x1d6>
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d014      	beq.n	800228a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b01      	cmp	r3, #1
 800226c:	d10d      	bne.n	800228a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f834 	bl	80022e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0201 	mvn.w	r2, #1
 8002288:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002298:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d015      	beq.n	80022cc <HAL_ADC_IRQHandler+0x218>
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d012      	beq.n	80022cc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f043 0202 	orr.w	r2, r3, #2
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f06f 0220 	mvn.w	r2, #32
 80022ba:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f81d 	bl	80022fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f06f 0220 	mvn.w	r2, #32
 80022ca:	601a      	str	r2, [r3, #0]
  }
}
 80022cc:	bf00      	nop
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_ADC_ConfigChannel+0x1c>
 8002328:	2302      	movs	r3, #2
 800232a:	e113      	b.n	8002554 <HAL_ADC_ConfigChannel+0x244>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b09      	cmp	r3, #9
 800233a:	d925      	bls.n	8002388 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68d9      	ldr	r1, [r3, #12]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	3b1e      	subs	r3, #30
 8002352:	2207      	movs	r2, #7
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43da      	mvns	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	400a      	ands	r2, r1
 8002360:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68d9      	ldr	r1, [r3, #12]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	b29b      	uxth	r3, r3
 8002372:	4618      	mov	r0, r3
 8002374:	4603      	mov	r3, r0
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4403      	add	r3, r0
 800237a:	3b1e      	subs	r3, #30
 800237c:	409a      	lsls	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	e022      	b.n	80023ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6919      	ldr	r1, [r3, #16]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	4613      	mov	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	2207      	movs	r2, #7
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	400a      	ands	r2, r1
 80023aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6919      	ldr	r1, [r3, #16]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4618      	mov	r0, r3
 80023be:	4603      	mov	r3, r0
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4403      	add	r3, r0
 80023c4:	409a      	lsls	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d824      	bhi.n	8002420 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	3b05      	subs	r3, #5
 80023e8:	221f      	movs	r2, #31
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	400a      	ands	r2, r1
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	3b05      	subs	r3, #5
 8002412:	fa00 f203 	lsl.w	r2, r0, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	635a      	str	r2, [r3, #52]	; 0x34
 800241e:	e04c      	b.n	80024ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	d824      	bhi.n	8002472 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	3b23      	subs	r3, #35	; 0x23
 800243a:	221f      	movs	r2, #31
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43da      	mvns	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	400a      	ands	r2, r1
 8002448:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	b29b      	uxth	r3, r3
 8002456:	4618      	mov	r0, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	3b23      	subs	r3, #35	; 0x23
 8002464:	fa00 f203 	lsl.w	r2, r0, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
 8002470:	e023      	b.n	80024ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	3b41      	subs	r3, #65	; 0x41
 8002484:	221f      	movs	r2, #31
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	400a      	ands	r2, r1
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	4618      	mov	r0, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	3b41      	subs	r3, #65	; 0x41
 80024ae:	fa00 f203 	lsl.w	r2, r0, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <HAL_ADC_ConfigChannel+0x250>)
 80024bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a28      	ldr	r2, [pc, #160]	; (8002564 <HAL_ADC_ConfigChannel+0x254>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d10f      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x1d8>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b12      	cmp	r3, #18
 80024ce:	d10b      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <HAL_ADC_ConfigChannel+0x254>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d12b      	bne.n	800254a <HAL_ADC_ConfigChannel+0x23a>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <HAL_ADC_ConfigChannel+0x258>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d003      	beq.n	8002504 <HAL_ADC_ConfigChannel+0x1f4>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b11      	cmp	r3, #17
 8002502:	d122      	bne.n	800254a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a11      	ldr	r2, [pc, #68]	; (8002568 <HAL_ADC_ConfigChannel+0x258>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d111      	bne.n	800254a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_ADC_ConfigChannel+0x25c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a11      	ldr	r2, [pc, #68]	; (8002570 <HAL_ADC_ConfigChannel+0x260>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	0c9a      	lsrs	r2, r3, #18
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800253c:	e002      	b.n	8002544 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	3b01      	subs	r3, #1
 8002542:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f9      	bne.n	800253e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	40012300 	.word	0x40012300
 8002564:	40012000 	.word	0x40012000
 8002568:	10000012 	.word	0x10000012
 800256c:	20000000 	.word	0x20000000
 8002570:	431bde83 	.word	0x431bde83

08002574 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800257c:	4b79      	ldr	r3, [pc, #484]	; (8002764 <ADC_Init+0x1f0>)
 800257e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	431a      	orrs	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	021a      	lsls	r2, r3, #8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6899      	ldr	r1, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	4a58      	ldr	r2, [pc, #352]	; (8002768 <ADC_Init+0x1f4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d022      	beq.n	8002652 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800261a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6899      	ldr	r1, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800263c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6899      	ldr	r1, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	e00f      	b.n	8002672 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002670:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0202 	bic.w	r2, r2, #2
 8002680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6899      	ldr	r1, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7e1b      	ldrb	r3, [r3, #24]
 800268c:	005a      	lsls	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01b      	beq.n	80026d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	3b01      	subs	r3, #1
 80026cc:	035a      	lsls	r2, r3, #13
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	e007      	b.n	80026e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	3b01      	subs	r3, #1
 8002704:	051a      	lsls	r2, r3, #20
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800271c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6899      	ldr	r1, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800272a:	025a      	lsls	r2, r3, #9
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6899      	ldr	r1, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	029a      	lsls	r2, r3, #10
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	609a      	str	r2, [r3, #8]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40012300 	.word	0x40012300
 8002768:	0f000001 	.word	0x0f000001

0800276c <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_ADCEx_InjectedStart+0x22>
 800278a:	2302      	movs	r3, #2
 800278c:	e0aa      	b.n	80028e4 <HAL_ADCEx_InjectedStart+0x178>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d018      	beq.n	80027d6 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027b4:	4b4e      	ldr	r3, [pc, #312]	; (80028f0 <HAL_ADCEx_InjectedStart+0x184>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a4e      	ldr	r2, [pc, #312]	; (80028f4 <HAL_ADCEx_InjectedStart+0x188>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0c9a      	lsrs	r2, r3, #18
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027c8:	e002      	b.n	80027d0 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f9      	bne.n	80027ca <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d172      	bne.n	80028ca <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f06f 0204 	mvn.w	r2, #4
 800281a:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800281c:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <HAL_ADCEx_InjectedStart+0x18c>)
 800281e:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	2b00      	cmp	r3, #0
 800282a:	d124      	bne.n	8002876 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002836:	2b00      	cmp	r3, #0
 8002838:	bf0c      	ite	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	2300      	movne	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf0c      	ite	eq
 8002850:	2301      	moveq	r3, #1
 8002852:	2300      	movne	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d041      	beq.n	80028e2 <HAL_ADCEx_InjectedStart+0x176>
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d03e      	beq.n	80028e2 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	e035      	b.n	80028e2 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002896:	2b00      	cmp	r3, #0
 8002898:	bf0c      	ite	eq
 800289a:	2301      	moveq	r3, #1
 800289c:	2300      	movne	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a15      	ldr	r2, [pc, #84]	; (80028fc <HAL_ADCEx_InjectedStart+0x190>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d11a      	bne.n	80028e2 <HAL_ADCEx_InjectedStart+0x176>
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d017      	beq.n	80028e2 <HAL_ADCEx_InjectedStart+0x176>
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d014      	beq.n	80028e2 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	e00b      	b.n	80028e2 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f043 0210 	orr.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f043 0201 	orr.w	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	20000000 	.word	0x20000000
 80028f4:	431bde83 	.word	0x431bde83
 80028f8:	40012300 	.word	0x40012300
 80028fc:	40012000 	.word	0x40012000

08002900 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_ADCEx_InjectedStop+0x1a>
 8002916:	2302      	movs	r3, #2
 8002918:	e037      	b.n	800298a <HAL_ADCEx_InjectedStop+0x8a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d120      	bne.n	8002970 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8002938:	2b00      	cmp	r3, #0
 800293a:	d119      	bne.n	8002970 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0201 	bic.w	r2, r2, #1
 800294a:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d112      	bne.n	8002980 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800296e:	e007      	b.n	8002980 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f043 0220 	orr.w	r2, r3, #32
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f06f 0204 	mvn.w	r2, #4
 80029ae:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d81f      	bhi.n	80029f8 <HAL_ADCEx_InjectedGetValue+0x60>
 80029b8:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <HAL_ADCEx_InjectedGetValue+0x28>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	080029ef 	.word	0x080029ef
 80029c4:	080029e5 	.word	0x080029e5
 80029c8:	080029db 	.word	0x080029db
 80029cc:	080029d1 	.word	0x080029d1
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d6:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80029d8:	e00f      	b.n	80029fa <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	60fb      	str	r3, [r7, #12]
    }  
    break;
 80029e2:	e00a      	b.n	80029fa <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	60fb      	str	r3, [r7, #12]
    }
    break;
 80029ec:	e005      	b.n	80029fa <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f4:	60fb      	str	r3, [r7, #12]
    }
    break;
 80029f6:	e000      	b.n	80029fa <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 80029f8:	bf00      	nop
  }
  return tmp;
 80029fa:	68fb      	ldr	r3, [r7, #12]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e17e      	b.n	8002d32 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b09      	cmp	r3, #9
 8002a42:	d925      	bls.n	8002a90 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68d9      	ldr	r1, [r3, #12]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	3b1e      	subs	r3, #30
 8002a5a:	2207      	movs	r2, #7
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43da      	mvns	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	400a      	ands	r2, r1
 8002a68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68d9      	ldr	r1, [r3, #12]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4403      	add	r3, r0
 8002a82:	3b1e      	subs	r3, #30
 8002a84:	409a      	lsls	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	e022      	b.n	8002ad6 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6919      	ldr	r1, [r3, #16]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6919      	ldr	r1, [r3, #16]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4403      	add	r3, r0
 8002acc:	409a      	lsls	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	051a      	lsls	r2, r3, #20
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3303      	adds	r3, #3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	221f      	movs	r2, #31
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43da      	mvns	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	3303      	adds	r3, #3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	fa00 f203 	lsl.w	r2, r0, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	4a75      	ldr	r2, [pc, #468]	; (8002d40 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d022      	beq.n	8002bb4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6899      	ldr	r1, [r3, #8]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	699a      	ldr	r2, [r3, #24]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002b9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6899      	ldr	r1, [r3, #8]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	69da      	ldr	r2, [r3, #28]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	e00f      	b.n	8002bd4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002bc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002bd2:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	7d5b      	ldrb	r3, [r3, #21]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	e007      	b.n	8002bfe <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfc:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	7d1b      	ldrb	r3, [r3, #20]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	e007      	b.n	8002c28 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c26:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d02e      	beq.n	8002c8e <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d840      	bhi.n	8002cb6 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d002      	beq.n	8002c3e <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d014      	beq.n	8002c66 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002c3c:	e03b      	b.n	8002cb6 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c4c:	f023 030f 	bic.w	r3, r3, #15
 8002c50:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6959      	ldr	r1, [r3, #20]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	615a      	str	r2, [r3, #20]
      break;
 8002c64:	e03b      	b.n	8002cde <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c74:	f023 030f 	bic.w	r3, r3, #15
 8002c78:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6999      	ldr	r1, [r3, #24]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	619a      	str	r2, [r3, #24]
      break;
 8002c8c:	e027      	b.n	8002cde <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c9c:	f023 030f 	bic.w	r3, r3, #15
 8002ca0:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69d9      	ldr	r1, [r3, #28]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	61da      	str	r2, [r3, #28]
      break;
 8002cb4:	e013      	b.n	8002cde <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002cc4:	f023 030f 	bic.w	r3, r3, #15
 8002cc8:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6a19      	ldr	r1, [r3, #32]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	621a      	str	r2, [r3, #32]
      break;
 8002cdc:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cde:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d109      	bne.n	8002d00 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b12      	cmp	r3, #18
 8002cf2:	d105      	bne.n	8002d00 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a10      	ldr	r2, [pc, #64]	; (8002d48 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10e      	bne.n	8002d28 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a0f      	ldr	r2, [pc, #60]	; (8002d4c <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d003      	beq.n	8002d1c <HAL_ADCEx_InjectedConfigChannel+0x300>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b11      	cmp	r3, #17
 8002d1a:	d105      	bne.n	8002d28 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	000f0001 	.word	0x000f0001
 8002d44:	40012300 	.word	0x40012300
 8002d48:	40012000 	.word	0x40012000
 8002d4c:	10000012 	.word	0x10000012

08002d50 <__NVIC_SetPriorityGrouping>:
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d82:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	60d3      	str	r3, [r2, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <__NVIC_GetPriorityGrouping>:
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	f003 0307 	and.w	r3, r3, #7
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_EnableIRQ>:
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	db0b      	blt.n	8002dde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	f003 021f 	and.w	r2, r3, #31
 8002dcc:	4907      	ldr	r1, [pc, #28]	; (8002dec <__NVIC_EnableIRQ+0x38>)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000e100 	.word	0xe000e100

08002df0 <__NVIC_DisableIRQ>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	db12      	blt.n	8002e28 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	f003 021f 	and.w	r2, r3, #31
 8002e08:	490a      	ldr	r1, [pc, #40]	; (8002e34 <__NVIC_DisableIRQ+0x44>)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	2001      	movs	r0, #1
 8002e12:	fa00 f202 	lsl.w	r2, r0, r2
 8002e16:	3320      	adds	r3, #32
 8002e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e1c:	f3bf 8f4f 	dsb	sy
}
 8002e20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e22:	f3bf 8f6f 	isb	sy
}
 8002e26:	bf00      	nop
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000e100 	.word	0xe000e100

08002e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	6039      	str	r1, [r7, #0]
 8002e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	db0a      	blt.n	8002e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	490c      	ldr	r1, [pc, #48]	; (8002e84 <__NVIC_SetPriority+0x4c>)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	0112      	lsls	r2, r2, #4
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e60:	e00a      	b.n	8002e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4908      	ldr	r1, [pc, #32]	; (8002e88 <__NVIC_SetPriority+0x50>)
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	3b04      	subs	r3, #4
 8002e70:	0112      	lsls	r2, r2, #4
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	440b      	add	r3, r1
 8002e76:	761a      	strb	r2, [r3, #24]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000e100 	.word	0xe000e100
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b089      	sub	sp, #36	; 0x24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f1c3 0307 	rsb	r3, r3, #7
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	bf28      	it	cs
 8002eaa:	2304      	movcs	r3, #4
 8002eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	2b06      	cmp	r3, #6
 8002eb4:	d902      	bls.n	8002ebc <NVIC_EncodePriority+0x30>
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3b03      	subs	r3, #3
 8002eba:	e000      	b.n	8002ebe <NVIC_EncodePriority+0x32>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	401a      	ands	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	43d9      	mvns	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	4313      	orrs	r3, r2
         );
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3724      	adds	r7, #36	; 0x24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f04:	d301      	bcc.n	8002f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f06:	2301      	movs	r3, #1
 8002f08:	e00f      	b.n	8002f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0a:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <SysTick_Config+0x40>)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f12:	210f      	movs	r1, #15
 8002f14:	f04f 30ff 	mov.w	r0, #4294967295
 8002f18:	f7ff ff8e 	bl	8002e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <SysTick_Config+0x40>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f22:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <SysTick_Config+0x40>)
 8002f24:	2207      	movs	r2, #7
 8002f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	e000e010 	.word	0xe000e010

08002f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ff05 	bl	8002d50 <__NVIC_SetPriorityGrouping>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b086      	sub	sp, #24
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f60:	f7ff ff1a 	bl	8002d98 <__NVIC_GetPriorityGrouping>
 8002f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	6978      	ldr	r0, [r7, #20]
 8002f6c:	f7ff ff8e 	bl	8002e8c <NVIC_EncodePriority>
 8002f70:	4602      	mov	r2, r0
 8002f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff5d 	bl	8002e38 <__NVIC_SetPriority>
}
 8002f7e:	bf00      	nop
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff0d 	bl	8002db4 <__NVIC_EnableIRQ>
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	4603      	mov	r3, r0
 8002faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff1d 	bl	8002df0 <__NVIC_DisableIRQ>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff ff94 	bl	8002ef4 <SysTick_Config>
 8002fcc:	4603      	mov	r3, r0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fe4:	f7fe ff68 	bl	8001eb8 <HAL_GetTick>
 8002fe8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d008      	beq.n	8003008 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e052      	b.n	80030ae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0216 	bic.w	r2, r2, #22
 8003016:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003026:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d103      	bne.n	8003038 <HAL_DMA_Abort+0x62>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0208 	bic.w	r2, r2, #8
 8003046:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0201 	bic.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003058:	e013      	b.n	8003082 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800305a:	f7fe ff2d 	bl	8001eb8 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b05      	cmp	r3, #5
 8003066:	d90c      	bls.n	8003082 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2203      	movs	r2, #3
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e015      	b.n	80030ae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e4      	bne.n	800305a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	223f      	movs	r2, #63	; 0x3f
 8003096:	409a      	lsls	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d004      	beq.n	80030d4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2280      	movs	r2, #128	; 0x80
 80030ce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e00c      	b.n	80030ee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2205      	movs	r2, #5
 80030d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b089      	sub	sp, #36	; 0x24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
 8003116:	e177      	b.n	8003408 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003118:	2201      	movs	r2, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	429a      	cmp	r2, r3
 8003132:	f040 8166 	bne.w	8003402 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d005      	beq.n	800314e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800314a:	2b02      	cmp	r3, #2
 800314c:	d130      	bne.n	80031b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	2203      	movs	r2, #3
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003184:	2201      	movs	r2, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 0201 	and.w	r2, r3, #1
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0303 	and.w	r3, r3, #3
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d017      	beq.n	80031ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	2203      	movs	r2, #3
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d123      	bne.n	8003240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	08da      	lsrs	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3208      	adds	r2, #8
 8003200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	220f      	movs	r2, #15
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4013      	ands	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	08da      	lsrs	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3208      	adds	r2, #8
 800323a:	69b9      	ldr	r1, [r7, #24]
 800323c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0203 	and.w	r2, r3, #3
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80c0 	beq.w	8003402 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	4b66      	ldr	r3, [pc, #408]	; (8003420 <HAL_GPIO_Init+0x324>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	4a65      	ldr	r2, [pc, #404]	; (8003420 <HAL_GPIO_Init+0x324>)
 800328c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003290:	6453      	str	r3, [r2, #68]	; 0x44
 8003292:	4b63      	ldr	r3, [pc, #396]	; (8003420 <HAL_GPIO_Init+0x324>)
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800329e:	4a61      	ldr	r2, [pc, #388]	; (8003424 <HAL_GPIO_Init+0x328>)
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	3302      	adds	r3, #2
 80032a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	220f      	movs	r2, #15
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a58      	ldr	r2, [pc, #352]	; (8003428 <HAL_GPIO_Init+0x32c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d037      	beq.n	800333a <HAL_GPIO_Init+0x23e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a57      	ldr	r2, [pc, #348]	; (800342c <HAL_GPIO_Init+0x330>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d031      	beq.n	8003336 <HAL_GPIO_Init+0x23a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a56      	ldr	r2, [pc, #344]	; (8003430 <HAL_GPIO_Init+0x334>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d02b      	beq.n	8003332 <HAL_GPIO_Init+0x236>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a55      	ldr	r2, [pc, #340]	; (8003434 <HAL_GPIO_Init+0x338>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d025      	beq.n	800332e <HAL_GPIO_Init+0x232>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a54      	ldr	r2, [pc, #336]	; (8003438 <HAL_GPIO_Init+0x33c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01f      	beq.n	800332a <HAL_GPIO_Init+0x22e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a53      	ldr	r2, [pc, #332]	; (800343c <HAL_GPIO_Init+0x340>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d019      	beq.n	8003326 <HAL_GPIO_Init+0x22a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a52      	ldr	r2, [pc, #328]	; (8003440 <HAL_GPIO_Init+0x344>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <HAL_GPIO_Init+0x226>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a51      	ldr	r2, [pc, #324]	; (8003444 <HAL_GPIO_Init+0x348>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00d      	beq.n	800331e <HAL_GPIO_Init+0x222>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a50      	ldr	r2, [pc, #320]	; (8003448 <HAL_GPIO_Init+0x34c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d007      	beq.n	800331a <HAL_GPIO_Init+0x21e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4f      	ldr	r2, [pc, #316]	; (800344c <HAL_GPIO_Init+0x350>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <HAL_GPIO_Init+0x21a>
 8003312:	2309      	movs	r3, #9
 8003314:	e012      	b.n	800333c <HAL_GPIO_Init+0x240>
 8003316:	230a      	movs	r3, #10
 8003318:	e010      	b.n	800333c <HAL_GPIO_Init+0x240>
 800331a:	2308      	movs	r3, #8
 800331c:	e00e      	b.n	800333c <HAL_GPIO_Init+0x240>
 800331e:	2307      	movs	r3, #7
 8003320:	e00c      	b.n	800333c <HAL_GPIO_Init+0x240>
 8003322:	2306      	movs	r3, #6
 8003324:	e00a      	b.n	800333c <HAL_GPIO_Init+0x240>
 8003326:	2305      	movs	r3, #5
 8003328:	e008      	b.n	800333c <HAL_GPIO_Init+0x240>
 800332a:	2304      	movs	r3, #4
 800332c:	e006      	b.n	800333c <HAL_GPIO_Init+0x240>
 800332e:	2303      	movs	r3, #3
 8003330:	e004      	b.n	800333c <HAL_GPIO_Init+0x240>
 8003332:	2302      	movs	r3, #2
 8003334:	e002      	b.n	800333c <HAL_GPIO_Init+0x240>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_GPIO_Init+0x240>
 800333a:	2300      	movs	r3, #0
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	f002 0203 	and.w	r2, r2, #3
 8003342:	0092      	lsls	r2, r2, #2
 8003344:	4093      	lsls	r3, r2
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800334c:	4935      	ldr	r1, [pc, #212]	; (8003424 <HAL_GPIO_Init+0x328>)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	089b      	lsrs	r3, r3, #2
 8003352:	3302      	adds	r3, #2
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800335a:	4b3d      	ldr	r3, [pc, #244]	; (8003450 <HAL_GPIO_Init+0x354>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800337e:	4a34      	ldr	r2, [pc, #208]	; (8003450 <HAL_GPIO_Init+0x354>)
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003384:	4b32      	ldr	r3, [pc, #200]	; (8003450 <HAL_GPIO_Init+0x354>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033a8:	4a29      	ldr	r2, [pc, #164]	; (8003450 <HAL_GPIO_Init+0x354>)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ae:	4b28      	ldr	r3, [pc, #160]	; (8003450 <HAL_GPIO_Init+0x354>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033d2:	4a1f      	ldr	r2, [pc, #124]	; (8003450 <HAL_GPIO_Init+0x354>)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033d8:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <HAL_GPIO_Init+0x354>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033fc:	4a14      	ldr	r2, [pc, #80]	; (8003450 <HAL_GPIO_Init+0x354>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3301      	adds	r3, #1
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	2b0f      	cmp	r3, #15
 800340c:	f67f ae84 	bls.w	8003118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003410:	bf00      	nop
 8003412:	bf00      	nop
 8003414:	3724      	adds	r7, #36	; 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800
 8003424:	40013800 	.word	0x40013800
 8003428:	40020000 	.word	0x40020000
 800342c:	40020400 	.word	0x40020400
 8003430:	40020800 	.word	0x40020800
 8003434:	40020c00 	.word	0x40020c00
 8003438:	40021000 	.word	0x40021000
 800343c:	40021400 	.word	0x40021400
 8003440:	40021800 	.word	0x40021800
 8003444:	40021c00 	.word	0x40021c00
 8003448:	40022000 	.word	0x40022000
 800344c:	40022400 	.word	0x40022400
 8003450:	40013c00 	.word	0x40013c00

08003454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	887b      	ldrh	r3, [r7, #2]
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	e001      	b.n	8003476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003476:	7bfb      	ldrb	r3, [r7, #15]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	807b      	strh	r3, [r7, #2]
 8003490:	4613      	mov	r3, r2
 8003492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003494:	787b      	ldrb	r3, [r7, #1]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800349a:	887a      	ldrh	r2, [r7, #2]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034a0:	e003      	b.n	80034aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034a2:	887b      	ldrh	r3, [r7, #2]
 80034a4:	041a      	lsls	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	619a      	str	r2, [r3, #24]
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034c2:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034ce:	4a05      	ldr	r2, [pc, #20]	; (80034e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe f8a6 	bl	8001628 <HAL_GPIO_EXTI_Callback>
  }
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40013c00 	.word	0x40013c00

080034e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_PWREx_EnableOverDrive+0x90>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	4a1f      	ldr	r2, [pc, #124]	; (8003578 <HAL_PWREx_EnableOverDrive+0x90>)
 80034fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003500:	6413      	str	r3, [r2, #64]	; 0x40
 8003502:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <HAL_PWREx_EnableOverDrive+0x90>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800350e:	4b1b      	ldr	r3, [pc, #108]	; (800357c <HAL_PWREx_EnableOverDrive+0x94>)
 8003510:	2201      	movs	r2, #1
 8003512:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003514:	f7fe fcd0 	bl	8001eb8 <HAL_GetTick>
 8003518:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800351a:	e009      	b.n	8003530 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800351c:	f7fe fccc 	bl	8001eb8 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800352a:	d901      	bls.n	8003530 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e01f      	b.n	8003570 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003530:	4b13      	ldr	r3, [pc, #76]	; (8003580 <HAL_PWREx_EnableOverDrive+0x98>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353c:	d1ee      	bne.n	800351c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003544:	f7fe fcb8 	bl	8001eb8 <HAL_GetTick>
 8003548:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800354a:	e009      	b.n	8003560 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800354c:	f7fe fcb4 	bl	8001eb8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800355a:	d901      	bls.n	8003560 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e007      	b.n	8003570 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <HAL_PWREx_EnableOverDrive+0x98>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800356c:	d1ee      	bne.n	800354c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40023800 	.word	0x40023800
 800357c:	420e0040 	.word	0x420e0040
 8003580:	40007000 	.word	0x40007000
 8003584:	420e0044 	.word	0x420e0044

08003588 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e267      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d075      	beq.n	8003692 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035a6:	4b88      	ldr	r3, [pc, #544]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d00c      	beq.n	80035cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b2:	4b85      	ldr	r3, [pc, #532]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d112      	bne.n	80035e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035be:	4b82      	ldr	r3, [pc, #520]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ca:	d10b      	bne.n	80035e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	4b7e      	ldr	r3, [pc, #504]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d05b      	beq.n	8003690 <HAL_RCC_OscConfig+0x108>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d157      	bne.n	8003690 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e242      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ec:	d106      	bne.n	80035fc <HAL_RCC_OscConfig+0x74>
 80035ee:	4b76      	ldr	r3, [pc, #472]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a75      	ldr	r2, [pc, #468]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80035f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	e01d      	b.n	8003638 <HAL_RCC_OscConfig+0xb0>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003604:	d10c      	bne.n	8003620 <HAL_RCC_OscConfig+0x98>
 8003606:	4b70      	ldr	r3, [pc, #448]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a6f      	ldr	r2, [pc, #444]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800360c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4b6d      	ldr	r3, [pc, #436]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a6c      	ldr	r2, [pc, #432]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	e00b      	b.n	8003638 <HAL_RCC_OscConfig+0xb0>
 8003620:	4b69      	ldr	r3, [pc, #420]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a68      	ldr	r2, [pc, #416]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	4b66      	ldr	r3, [pc, #408]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a65      	ldr	r2, [pc, #404]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d013      	beq.n	8003668 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fe fc3a 	bl	8001eb8 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003648:	f7fe fc36 	bl	8001eb8 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b64      	cmp	r3, #100	; 0x64
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e207      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365a:	4b5b      	ldr	r3, [pc, #364]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0xc0>
 8003666:	e014      	b.n	8003692 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fe fc26 	bl	8001eb8 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003670:	f7fe fc22 	bl	8001eb8 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e1f3      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003682:	4b51      	ldr	r3, [pc, #324]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0xe8>
 800368e:	e000      	b.n	8003692 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d063      	beq.n	8003766 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800369e:	4b4a      	ldr	r3, [pc, #296]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036aa:	4b47      	ldr	r3, [pc, #284]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d11c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b6:	4b44      	ldr	r3, [pc, #272]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d116      	bne.n	80036f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036c2:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_RCC_OscConfig+0x152>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d001      	beq.n	80036da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e1c7      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036da:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4937      	ldr	r1, [pc, #220]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ee:	e03a      	b.n	8003766 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d020      	beq.n	800373a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f8:	4b34      	ldr	r3, [pc, #208]	; (80037cc <HAL_RCC_OscConfig+0x244>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fe:	f7fe fbdb 	bl	8001eb8 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003706:	f7fe fbd7 	bl	8001eb8 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e1a8      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003718:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003724:	4b28      	ldr	r3, [pc, #160]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4925      	ldr	r1, [pc, #148]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 8003734:	4313      	orrs	r3, r2
 8003736:	600b      	str	r3, [r1, #0]
 8003738:	e015      	b.n	8003766 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800373a:	4b24      	ldr	r3, [pc, #144]	; (80037cc <HAL_RCC_OscConfig+0x244>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe fbba 	bl	8001eb8 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003748:	f7fe fbb6 	bl	8001eb8 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e187      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d036      	beq.n	80037e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d016      	beq.n	80037a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377a:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <HAL_RCC_OscConfig+0x248>)
 800377c:	2201      	movs	r2, #1
 800377e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003780:	f7fe fb9a 	bl	8001eb8 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003788:	f7fe fb96 	bl	8001eb8 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e167      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379a:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_OscConfig+0x240>)
 800379c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x200>
 80037a6:	e01b      	b.n	80037e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a8:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_RCC_OscConfig+0x248>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ae:	f7fe fb83 	bl	8001eb8 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b4:	e00e      	b.n	80037d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b6:	f7fe fb7f 	bl	8001eb8 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d907      	bls.n	80037d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e150      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
 80037c8:	40023800 	.word	0x40023800
 80037cc:	42470000 	.word	0x42470000
 80037d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d4:	4b88      	ldr	r3, [pc, #544]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80037d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1ea      	bne.n	80037b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8097 	beq.w	800391c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f2:	4b81      	ldr	r3, [pc, #516]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10f      	bne.n	800381e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	4b7d      	ldr	r3, [pc, #500]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a7c      	ldr	r2, [pc, #496]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
 800380e:	4b7a      	ldr	r3, [pc, #488]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381a:	2301      	movs	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381e:	4b77      	ldr	r3, [pc, #476]	; (80039fc <HAL_RCC_OscConfig+0x474>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d118      	bne.n	800385c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382a:	4b74      	ldr	r3, [pc, #464]	; (80039fc <HAL_RCC_OscConfig+0x474>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a73      	ldr	r2, [pc, #460]	; (80039fc <HAL_RCC_OscConfig+0x474>)
 8003830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003836:	f7fe fb3f 	bl	8001eb8 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383e:	f7fe fb3b 	bl	8001eb8 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e10c      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	4b6a      	ldr	r3, [pc, #424]	; (80039fc <HAL_RCC_OscConfig+0x474>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x2ea>
 8003864:	4b64      	ldr	r3, [pc, #400]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	4a63      	ldr	r2, [pc, #396]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6713      	str	r3, [r2, #112]	; 0x70
 8003870:	e01c      	b.n	80038ac <HAL_RCC_OscConfig+0x324>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b05      	cmp	r3, #5
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x30c>
 800387a:	4b5f      	ldr	r3, [pc, #380]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	4a5e      	ldr	r2, [pc, #376]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003880:	f043 0304 	orr.w	r3, r3, #4
 8003884:	6713      	str	r3, [r2, #112]	; 0x70
 8003886:	4b5c      	ldr	r3, [pc, #368]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	4a5b      	ldr	r2, [pc, #364]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6713      	str	r3, [r2, #112]	; 0x70
 8003892:	e00b      	b.n	80038ac <HAL_RCC_OscConfig+0x324>
 8003894:	4b58      	ldr	r3, [pc, #352]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	4a57      	ldr	r2, [pc, #348]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	6713      	str	r3, [r2, #112]	; 0x70
 80038a0:	4b55      	ldr	r3, [pc, #340]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80038a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a4:	4a54      	ldr	r2, [pc, #336]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80038a6:	f023 0304 	bic.w	r3, r3, #4
 80038aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d015      	beq.n	80038e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b4:	f7fe fb00 	bl	8001eb8 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038bc:	f7fe fafc 	bl	8001eb8 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e0cb      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d2:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0ee      	beq.n	80038bc <HAL_RCC_OscConfig+0x334>
 80038de:	e014      	b.n	800390a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e0:	f7fe faea 	bl	8001eb8 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e6:	e00a      	b.n	80038fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e8:	f7fe fae6 	bl	8001eb8 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e0b5      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fe:	4b3e      	ldr	r3, [pc, #248]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1ee      	bne.n	80038e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800390a:	7dfb      	ldrb	r3, [r7, #23]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d105      	bne.n	800391c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003910:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	4a38      	ldr	r2, [pc, #224]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800391a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80a1 	beq.w	8003a68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003926:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b08      	cmp	r3, #8
 8003930:	d05c      	beq.n	80039ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d141      	bne.n	80039be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <HAL_RCC_OscConfig+0x478>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fe faba 	bl	8001eb8 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003948:	f7fe fab6 	bl	8001eb8 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e087      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	019b      	lsls	r3, r3, #6
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	3b01      	subs	r3, #1
 8003980:	041b      	lsls	r3, r3, #16
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	061b      	lsls	r3, r3, #24
 800398a:	491b      	ldr	r1, [pc, #108]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003990:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <HAL_RCC_OscConfig+0x478>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003996:	f7fe fa8f 	bl	8001eb8 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399e:	f7fe fa8b 	bl	8001eb8 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e05c      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x416>
 80039bc:	e054      	b.n	8003a68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <HAL_RCC_OscConfig+0x478>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fe fa78 	bl	8001eb8 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fe fa74 	bl	8001eb8 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e045      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_RCC_OscConfig+0x470>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x444>
 80039ea:	e03d      	b.n	8003a68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d107      	bne.n	8003a04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e038      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40007000 	.word	0x40007000
 8003a00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a04:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <HAL_RCC_OscConfig+0x4ec>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d028      	beq.n	8003a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d121      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d11a      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d111      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	085b      	lsrs	r3, r3, #1
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40023800 	.word	0x40023800

08003a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0cc      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b68      	ldr	r3, [pc, #416]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d90c      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b65      	ldr	r3, [pc, #404]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b63      	ldr	r3, [pc, #396]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0b8      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d020      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003acc:	4b59      	ldr	r3, [pc, #356]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a58      	ldr	r2, [pc, #352]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ad6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ae4:	4b53      	ldr	r3, [pc, #332]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4a52      	ldr	r2, [pc, #328]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af0:	4b50      	ldr	r3, [pc, #320]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	494d      	ldr	r1, [pc, #308]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d044      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d107      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b16:	4b47      	ldr	r3, [pc, #284]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d119      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e07f      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d107      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b36:	4b3f      	ldr	r3, [pc, #252]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e06f      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b46:	4b3b      	ldr	r3, [pc, #236]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e067      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b56:	4b37      	ldr	r3, [pc, #220]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f023 0203 	bic.w	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4934      	ldr	r1, [pc, #208]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b68:	f7fe f9a6 	bl	8001eb8 <HAL_GetTick>
 8003b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	e00a      	b.n	8003b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b70:	f7fe f9a2 	bl	8001eb8 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e04f      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	4b2b      	ldr	r3, [pc, #172]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 020c 	and.w	r2, r3, #12
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d1eb      	bne.n	8003b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b98:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d20c      	bcs.n	8003bc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b20      	ldr	r3, [pc, #128]	; (8003c30 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e032      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bcc:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4916      	ldr	r1, [pc, #88]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bea:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	490e      	ldr	r1, [pc, #56]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bfe:	f000 f821 	bl	8003c44 <HAL_RCC_GetSysClockFreq>
 8003c02:	4602      	mov	r2, r0
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	490a      	ldr	r1, [pc, #40]	; (8003c38 <HAL_RCC_ClockConfig+0x1c0>)
 8003c10:	5ccb      	ldrb	r3, [r1, r3]
 8003c12:	fa22 f303 	lsr.w	r3, r2, r3
 8003c16:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <HAL_RCC_ClockConfig+0x1c4>)
 8003c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c1a:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe f906 	bl	8001e30 <HAL_InitTick>

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023c00 	.word	0x40023c00
 8003c34:	40023800 	.word	0x40023800
 8003c38:	080090b8 	.word	0x080090b8
 8003c3c:	20000000 	.word	0x20000000
 8003c40:	20000004 	.word	0x20000004

08003c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c48:	b094      	sub	sp, #80	; 0x50
 8003c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c50:	2300      	movs	r3, #0
 8003c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c54:	2300      	movs	r3, #0
 8003c56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c5c:	4b79      	ldr	r3, [pc, #484]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d00d      	beq.n	8003c84 <HAL_RCC_GetSysClockFreq+0x40>
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	f200 80e1 	bhi.w	8003e30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x34>
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d003      	beq.n	8003c7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c76:	e0db      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c78:	4b73      	ldr	r3, [pc, #460]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c7c:	e0db      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c7e:	4b73      	ldr	r3, [pc, #460]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x208>)
 8003c80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c82:	e0d8      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c84:	4b6f      	ldr	r3, [pc, #444]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c8e:	4b6d      	ldr	r3, [pc, #436]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d063      	beq.n	8003d62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9a:	4b6a      	ldr	r3, [pc, #424]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	099b      	lsrs	r3, r3, #6
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ca4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cac:	633b      	str	r3, [r7, #48]	; 0x30
 8003cae:	2300      	movs	r3, #0
 8003cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8003cb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	462b      	mov	r3, r5
 8003cba:	f04f 0000 	mov.w	r0, #0
 8003cbe:	f04f 0100 	mov.w	r1, #0
 8003cc2:	0159      	lsls	r1, r3, #5
 8003cc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc8:	0150      	lsls	r0, r2, #5
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4621      	mov	r1, r4
 8003cd0:	1a51      	subs	r1, r2, r1
 8003cd2:	6139      	str	r1, [r7, #16]
 8003cd4:	4629      	mov	r1, r5
 8003cd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ce8:	4659      	mov	r1, fp
 8003cea:	018b      	lsls	r3, r1, #6
 8003cec:	4651      	mov	r1, sl
 8003cee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cf2:	4651      	mov	r1, sl
 8003cf4:	018a      	lsls	r2, r1, #6
 8003cf6:	4651      	mov	r1, sl
 8003cf8:	ebb2 0801 	subs.w	r8, r2, r1
 8003cfc:	4659      	mov	r1, fp
 8003cfe:	eb63 0901 	sbc.w	r9, r3, r1
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d16:	4690      	mov	r8, r2
 8003d18:	4699      	mov	r9, r3
 8003d1a:	4623      	mov	r3, r4
 8003d1c:	eb18 0303 	adds.w	r3, r8, r3
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	462b      	mov	r3, r5
 8003d24:	eb49 0303 	adc.w	r3, r9, r3
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	f04f 0200 	mov.w	r2, #0
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d36:	4629      	mov	r1, r5
 8003d38:	024b      	lsls	r3, r1, #9
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d40:	4621      	mov	r1, r4
 8003d42:	024a      	lsls	r2, r1, #9
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d54:	f7fc ff98 	bl	8000c88 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d60:	e058      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d62:	4b38      	ldr	r3, [pc, #224]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	099b      	lsrs	r3, r3, #6
 8003d68:	2200      	movs	r2, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d72:	623b      	str	r3, [r7, #32]
 8003d74:	2300      	movs	r3, #0
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
 8003d78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d7c:	4642      	mov	r2, r8
 8003d7e:	464b      	mov	r3, r9
 8003d80:	f04f 0000 	mov.w	r0, #0
 8003d84:	f04f 0100 	mov.w	r1, #0
 8003d88:	0159      	lsls	r1, r3, #5
 8003d8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d8e:	0150      	lsls	r0, r2, #5
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4641      	mov	r1, r8
 8003d96:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003dac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003db0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003db4:	ebb2 040a 	subs.w	r4, r2, sl
 8003db8:	eb63 050b 	sbc.w	r5, r3, fp
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	00eb      	lsls	r3, r5, #3
 8003dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dca:	00e2      	lsls	r2, r4, #3
 8003dcc:	4614      	mov	r4, r2
 8003dce:	461d      	mov	r5, r3
 8003dd0:	4643      	mov	r3, r8
 8003dd2:	18e3      	adds	r3, r4, r3
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	eb45 0303 	adc.w	r3, r5, r3
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dea:	4629      	mov	r1, r5
 8003dec:	028b      	lsls	r3, r1, #10
 8003dee:	4621      	mov	r1, r4
 8003df0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003df4:	4621      	mov	r1, r4
 8003df6:	028a      	lsls	r2, r1, #10
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dfe:	2200      	movs	r2, #0
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	61fa      	str	r2, [r7, #28]
 8003e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e08:	f7fc ff3e 	bl	8000c88 <__aeabi_uldivmod>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4613      	mov	r3, r2
 8003e12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	3301      	adds	r3, #1
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e2e:	e002      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3750      	adds	r7, #80	; 0x50
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	00f42400 	.word	0x00f42400
 8003e4c:	007a1200 	.word	0x007a1200

08003e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e56:	681b      	ldr	r3, [r3, #0]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	20000000 	.word	0x20000000

08003e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e6c:	f7ff fff0 	bl	8003e50 <HAL_RCC_GetHCLKFreq>
 8003e70:	4602      	mov	r2, r0
 8003e72:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	0a9b      	lsrs	r3, r3, #10
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	4903      	ldr	r1, [pc, #12]	; (8003e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e7e:	5ccb      	ldrb	r3, [r1, r3]
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	080090c8 	.word	0x080090c8

08003e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e94:	f7ff ffdc 	bl	8003e50 <HAL_RCC_GetHCLKFreq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	0b5b      	lsrs	r3, r3, #13
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4903      	ldr	r1, [pc, #12]	; (8003eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea6:	5ccb      	ldrb	r3, [r1, r3]
 8003ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	080090c8 	.word	0x080090c8

08003eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e041      	b.n	8003f4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fd feb0 	bl	8001c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f000 fac4 	bl	8004484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d001      	beq.n	8003f70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e04e      	b.n	800400e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a23      	ldr	r2, [pc, #140]	; (800401c <HAL_TIM_Base_Start_IT+0xc4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d022      	beq.n	8003fd8 <HAL_TIM_Base_Start_IT+0x80>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9a:	d01d      	beq.n	8003fd8 <HAL_TIM_Base_Start_IT+0x80>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1f      	ldr	r2, [pc, #124]	; (8004020 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d018      	beq.n	8003fd8 <HAL_TIM_Base_Start_IT+0x80>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1e      	ldr	r2, [pc, #120]	; (8004024 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d013      	beq.n	8003fd8 <HAL_TIM_Base_Start_IT+0x80>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1c      	ldr	r2, [pc, #112]	; (8004028 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00e      	beq.n	8003fd8 <HAL_TIM_Base_Start_IT+0x80>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a1b      	ldr	r2, [pc, #108]	; (800402c <HAL_TIM_Base_Start_IT+0xd4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d009      	beq.n	8003fd8 <HAL_TIM_Base_Start_IT+0x80>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a19      	ldr	r2, [pc, #100]	; (8004030 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d004      	beq.n	8003fd8 <HAL_TIM_Base_Start_IT+0x80>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a18      	ldr	r2, [pc, #96]	; (8004034 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d111      	bne.n	8003ffc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b06      	cmp	r3, #6
 8003fe8:	d010      	beq.n	800400c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0201 	orr.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffa:	e007      	b.n	800400c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40010000 	.word	0x40010000
 8004020:	40000400 	.word	0x40000400
 8004024:	40000800 	.word	0x40000800
 8004028:	40000c00 	.word	0x40000c00
 800402c:	40010400 	.word	0x40010400
 8004030:	40014000 	.word	0x40014000
 8004034:	40001800 	.word	0x40001800

08004038 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6a1a      	ldr	r2, [r3, #32]
 8004056:	f241 1311 	movw	r3, #4369	; 0x1111
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10f      	bne.n	8004080 <HAL_TIM_Base_Stop_IT+0x48>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6a1a      	ldr	r2, [r3, #32]
 8004066:	f240 4344 	movw	r3, #1092	; 0x444
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d107      	bne.n	8004080 <HAL_TIM_Base_Stop_IT+0x48>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d122      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d11b      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f06f 0202 	mvn.w	r2, #2
 80040c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f9b5 	bl	8004448 <HAL_TIM_IC_CaptureCallback>
 80040de:	e005      	b.n	80040ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f9a7 	bl	8004434 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f9b8 	bl	800445c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d122      	bne.n	8004146 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b04      	cmp	r3, #4
 800410c:	d11b      	bne.n	8004146 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f06f 0204 	mvn.w	r2, #4
 8004116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f98b 	bl	8004448 <HAL_TIM_IC_CaptureCallback>
 8004132:	e005      	b.n	8004140 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f97d 	bl	8004434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f98e 	bl	800445c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b08      	cmp	r3, #8
 8004152:	d122      	bne.n	800419a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b08      	cmp	r3, #8
 8004160:	d11b      	bne.n	800419a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f06f 0208 	mvn.w	r2, #8
 800416a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2204      	movs	r2, #4
 8004170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 f961 	bl	8004448 <HAL_TIM_IC_CaptureCallback>
 8004186:	e005      	b.n	8004194 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f953 	bl	8004434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f964 	bl	800445c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b10      	cmp	r3, #16
 80041a6:	d122      	bne.n	80041ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d11b      	bne.n	80041ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f06f 0210 	mvn.w	r2, #16
 80041be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2208      	movs	r2, #8
 80041c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f937 	bl	8004448 <HAL_TIM_IC_CaptureCallback>
 80041da:	e005      	b.n	80041e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f929 	bl	8004434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f93a 	bl	800445c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d10e      	bne.n	800421a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b01      	cmp	r3, #1
 8004208:	d107      	bne.n	800421a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f06f 0201 	mvn.w	r2, #1
 8004212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fd fa1d 	bl	8001654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b80      	cmp	r3, #128	; 0x80
 8004226:	d10e      	bne.n	8004246 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d107      	bne.n	8004246 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800423e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fadf 	bl	8004804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004250:	2b40      	cmp	r3, #64	; 0x40
 8004252:	d10e      	bne.n	8004272 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d107      	bne.n	8004272 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800426a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f8ff 	bl	8004470 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b20      	cmp	r3, #32
 800427e:	d10e      	bne.n	800429e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b20      	cmp	r3, #32
 800428c:	d107      	bne.n	800429e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f06f 0220 	mvn.w	r2, #32
 8004296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 faa9 	bl	80047f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_TIM_ConfigClockSource+0x1c>
 80042be:	2302      	movs	r3, #2
 80042c0:	e0b4      	b.n	800442c <HAL_TIM_ConfigClockSource+0x186>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042e8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042fa:	d03e      	beq.n	800437a <HAL_TIM_ConfigClockSource+0xd4>
 80042fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004300:	f200 8087 	bhi.w	8004412 <HAL_TIM_ConfigClockSource+0x16c>
 8004304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004308:	f000 8086 	beq.w	8004418 <HAL_TIM_ConfigClockSource+0x172>
 800430c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004310:	d87f      	bhi.n	8004412 <HAL_TIM_ConfigClockSource+0x16c>
 8004312:	2b70      	cmp	r3, #112	; 0x70
 8004314:	d01a      	beq.n	800434c <HAL_TIM_ConfigClockSource+0xa6>
 8004316:	2b70      	cmp	r3, #112	; 0x70
 8004318:	d87b      	bhi.n	8004412 <HAL_TIM_ConfigClockSource+0x16c>
 800431a:	2b60      	cmp	r3, #96	; 0x60
 800431c:	d050      	beq.n	80043c0 <HAL_TIM_ConfigClockSource+0x11a>
 800431e:	2b60      	cmp	r3, #96	; 0x60
 8004320:	d877      	bhi.n	8004412 <HAL_TIM_ConfigClockSource+0x16c>
 8004322:	2b50      	cmp	r3, #80	; 0x50
 8004324:	d03c      	beq.n	80043a0 <HAL_TIM_ConfigClockSource+0xfa>
 8004326:	2b50      	cmp	r3, #80	; 0x50
 8004328:	d873      	bhi.n	8004412 <HAL_TIM_ConfigClockSource+0x16c>
 800432a:	2b40      	cmp	r3, #64	; 0x40
 800432c:	d058      	beq.n	80043e0 <HAL_TIM_ConfigClockSource+0x13a>
 800432e:	2b40      	cmp	r3, #64	; 0x40
 8004330:	d86f      	bhi.n	8004412 <HAL_TIM_ConfigClockSource+0x16c>
 8004332:	2b30      	cmp	r3, #48	; 0x30
 8004334:	d064      	beq.n	8004400 <HAL_TIM_ConfigClockSource+0x15a>
 8004336:	2b30      	cmp	r3, #48	; 0x30
 8004338:	d86b      	bhi.n	8004412 <HAL_TIM_ConfigClockSource+0x16c>
 800433a:	2b20      	cmp	r3, #32
 800433c:	d060      	beq.n	8004400 <HAL_TIM_ConfigClockSource+0x15a>
 800433e:	2b20      	cmp	r3, #32
 8004340:	d867      	bhi.n	8004412 <HAL_TIM_ConfigClockSource+0x16c>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d05c      	beq.n	8004400 <HAL_TIM_ConfigClockSource+0x15a>
 8004346:	2b10      	cmp	r3, #16
 8004348:	d05a      	beq.n	8004400 <HAL_TIM_ConfigClockSource+0x15a>
 800434a:	e062      	b.n	8004412 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6899      	ldr	r1, [r3, #8]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f000 f9ac 	bl	80046b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800436e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	609a      	str	r2, [r3, #8]
      break;
 8004378:	e04f      	b.n	800441a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6899      	ldr	r1, [r3, #8]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f000 f995 	bl	80046b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800439c:	609a      	str	r2, [r3, #8]
      break;
 800439e:	e03c      	b.n	800441a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	6859      	ldr	r1, [r3, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	461a      	mov	r2, r3
 80043ae:	f000 f909 	bl	80045c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2150      	movs	r1, #80	; 0x50
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f962 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 80043be:	e02c      	b.n	800441a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	6859      	ldr	r1, [r3, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	461a      	mov	r2, r3
 80043ce:	f000 f928 	bl	8004622 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2160      	movs	r1, #96	; 0x60
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 f952 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 80043de:	e01c      	b.n	800441a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	6859      	ldr	r1, [r3, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	461a      	mov	r2, r3
 80043ee:	f000 f8e9 	bl	80045c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2140      	movs	r1, #64	; 0x40
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 f942 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 80043fe:	e00c      	b.n	800441a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4619      	mov	r1, r3
 800440a:	4610      	mov	r0, r2
 800440c:	f000 f939 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 8004410:	e003      	b.n	800441a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
      break;
 8004416:	e000      	b.n	800441a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004418:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800442a:	7bfb      	ldrb	r3, [r7, #15]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a40      	ldr	r2, [pc, #256]	; (8004598 <TIM_Base_SetConfig+0x114>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a2:	d00f      	beq.n	80044c4 <TIM_Base_SetConfig+0x40>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a3d      	ldr	r2, [pc, #244]	; (800459c <TIM_Base_SetConfig+0x118>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00b      	beq.n	80044c4 <TIM_Base_SetConfig+0x40>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a3c      	ldr	r2, [pc, #240]	; (80045a0 <TIM_Base_SetConfig+0x11c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d007      	beq.n	80044c4 <TIM_Base_SetConfig+0x40>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a3b      	ldr	r2, [pc, #236]	; (80045a4 <TIM_Base_SetConfig+0x120>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_Base_SetConfig+0x40>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a3a      	ldr	r2, [pc, #232]	; (80045a8 <TIM_Base_SetConfig+0x124>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d108      	bne.n	80044d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a2f      	ldr	r2, [pc, #188]	; (8004598 <TIM_Base_SetConfig+0x114>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d02b      	beq.n	8004536 <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e4:	d027      	beq.n	8004536 <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a2c      	ldr	r2, [pc, #176]	; (800459c <TIM_Base_SetConfig+0x118>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d023      	beq.n	8004536 <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a2b      	ldr	r2, [pc, #172]	; (80045a0 <TIM_Base_SetConfig+0x11c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01f      	beq.n	8004536 <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a2a      	ldr	r2, [pc, #168]	; (80045a4 <TIM_Base_SetConfig+0x120>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d01b      	beq.n	8004536 <TIM_Base_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a29      	ldr	r2, [pc, #164]	; (80045a8 <TIM_Base_SetConfig+0x124>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d017      	beq.n	8004536 <TIM_Base_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a28      	ldr	r2, [pc, #160]	; (80045ac <TIM_Base_SetConfig+0x128>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a27      	ldr	r2, [pc, #156]	; (80045b0 <TIM_Base_SetConfig+0x12c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00f      	beq.n	8004536 <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a26      	ldr	r2, [pc, #152]	; (80045b4 <TIM_Base_SetConfig+0x130>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00b      	beq.n	8004536 <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a25      	ldr	r2, [pc, #148]	; (80045b8 <TIM_Base_SetConfig+0x134>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d007      	beq.n	8004536 <TIM_Base_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a24      	ldr	r2, [pc, #144]	; (80045bc <TIM_Base_SetConfig+0x138>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <TIM_Base_SetConfig+0xb2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a23      	ldr	r2, [pc, #140]	; (80045c0 <TIM_Base_SetConfig+0x13c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d108      	bne.n	8004548 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <TIM_Base_SetConfig+0x114>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_Base_SetConfig+0xf8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a0c      	ldr	r2, [pc, #48]	; (80045a8 <TIM_Base_SetConfig+0x124>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d103      	bne.n	8004584 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	615a      	str	r2, [r3, #20]
}
 800458a:	bf00      	nop
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40010000 	.word	0x40010000
 800459c:	40000400 	.word	0x40000400
 80045a0:	40000800 	.word	0x40000800
 80045a4:	40000c00 	.word	0x40000c00
 80045a8:	40010400 	.word	0x40010400
 80045ac:	40014000 	.word	0x40014000
 80045b0:	40014400 	.word	0x40014400
 80045b4:	40014800 	.word	0x40014800
 80045b8:	40001800 	.word	0x40001800
 80045bc:	40001c00 	.word	0x40001c00
 80045c0:	40002000 	.word	0x40002000

080045c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f023 0201 	bic.w	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f023 030a 	bic.w	r3, r3, #10
 8004600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004622:	b480      	push	{r7}
 8004624:	b087      	sub	sp, #28
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f023 0210 	bic.w	r2, r3, #16
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800464c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	031b      	lsls	r3, r3, #12
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800465e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	621a      	str	r2, [r3, #32]
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	f043 0307 	orr.w	r3, r3, #7
 80046a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	609a      	str	r2, [r3, #8]
}
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	021a      	lsls	r2, r3, #8
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	431a      	orrs	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4313      	orrs	r3, r2
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	609a      	str	r2, [r3, #8]
}
 80046ec:	bf00      	nop
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800470c:	2302      	movs	r3, #2
 800470e:	e05a      	b.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a21      	ldr	r2, [pc, #132]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d022      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475c:	d01d      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1d      	ldr	r2, [pc, #116]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d018      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d013      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1a      	ldr	r2, [pc, #104]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00e      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d004      	beq.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a15      	ldr	r2, [pc, #84]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d10c      	bne.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800
 80047e0:	40000c00 	.word	0x40000c00
 80047e4:	40010400 	.word	0x40010400
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40001800 	.word	0x40001800

080047f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e03f      	b.n	80048aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fd fa5a 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2224      	movs	r2, #36	; 0x24
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800485a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fd23 	bl	80052a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004870:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695a      	ldr	r2, [r3, #20]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004880:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004890:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b085      	sub	sp, #20
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	4613      	mov	r3, r2
 80048be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d130      	bne.n	800492e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_UART_Transmit_IT+0x26>
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e029      	b.n	8004930 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Transmit_IT+0x38>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e022      	b.n	8004930 <HAL_UART_Transmit_IT+0x7e>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	88fa      	ldrh	r2, [r7, #6]
 80048fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	88fa      	ldrh	r2, [r7, #6]
 8004902:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2221      	movs	r2, #33	; 0x21
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004928:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800492e:	2302      	movs	r3, #2
  }
}
 8004930:	4618      	mov	r0, r3
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b20      	cmp	r3, #32
 8004954:	d11d      	bne.n	8004992 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_UART_Receive_IT+0x26>
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e016      	b.n	8004994 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_UART_Receive_IT+0x38>
 8004970:	2302      	movs	r3, #2
 8004972:	e00f      	b.n	8004994 <HAL_UART_Receive_IT+0x58>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004982:	88fb      	ldrh	r3, [r7, #6]
 8004984:	461a      	mov	r2, r3
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fab5 	bl	8004ef8 <UART_Start_Receive_IT>
 800498e:	4603      	mov	r3, r0
 8004990:	e000      	b.n	8004994 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004992:	2302      	movs	r3, #2
  }
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b0ba      	sub	sp, #232	; 0xe8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80049da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10f      	bne.n	8004a02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <HAL_UART_IRQHandler+0x66>
 80049ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fb99 	bl	8005132 <UART_Receive_IT>
      return;
 8004a00:	e256      	b.n	8004eb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 80de 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x22c>
 8004a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 80d1 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <HAL_UART_IRQHandler+0xae>
 8004a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f043 0201 	orr.w	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00b      	beq.n	8004a6e <HAL_UART_IRQHandler+0xd2>
 8004a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f043 0202 	orr.w	r2, r3, #2
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00b      	beq.n	8004a92 <HAL_UART_IRQHandler+0xf6>
 8004a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f043 0204 	orr.w	r2, r3, #4
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d011      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x126>
 8004a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d005      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	f043 0208 	orr.w	r2, r3, #8
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 81ed 	beq.w	8004ea6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <HAL_UART_IRQHandler+0x14e>
 8004ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fb24 	bl	8005132 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d103      	bne.n	8004b16 <HAL_UART_IRQHandler+0x17a>
 8004b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d04f      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fa2c 	bl	8004f74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b40      	cmp	r3, #64	; 0x40
 8004b28:	d141      	bne.n	8004bae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3314      	adds	r3, #20
 8004b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3314      	adds	r3, #20
 8004b52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1d9      	bne.n	8004b2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d013      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	4a7d      	ldr	r2, [pc, #500]	; (8004d78 <HAL_UART_IRQHandler+0x3dc>)
 8004b84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fe fa93 	bl	80030b6 <HAL_DMA_Abort_IT>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d016      	beq.n	8004bc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba4:	e00e      	b.n	8004bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f990 	bl	8004ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bac:	e00a      	b.n	8004bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f98c 	bl	8004ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb4:	e006      	b.n	8004bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f988 	bl	8004ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004bc2:	e170      	b.n	8004ea6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	bf00      	nop
    return;
 8004bc6:	e16e      	b.n	8004ea6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	f040 814a 	bne.w	8004e66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 8143 	beq.w	8004e66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 813c 	beq.w	8004e66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0e:	2b40      	cmp	r3, #64	; 0x40
 8004c10:	f040 80b4 	bne.w	8004d7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8140 	beq.w	8004eaa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c32:	429a      	cmp	r2, r3
 8004c34:	f080 8139 	bcs.w	8004eaa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4a:	f000 8088 	beq.w	8004d5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	330c      	adds	r3, #12
 8004c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	330c      	adds	r3, #12
 8004c76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c8a:	e841 2300 	strex	r3, r2, [r1]
 8004c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1d9      	bne.n	8004c4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3314      	adds	r3, #20
 8004ca0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cac:	f023 0301 	bic.w	r3, r3, #1
 8004cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3314      	adds	r3, #20
 8004cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004cbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e1      	bne.n	8004c9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3314      	adds	r3, #20
 8004cf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1e3      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d2e:	f023 0310 	bic.w	r3, r3, #16
 8004d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d40:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e3      	bne.n	8004d1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe f93c 	bl	8002fd6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f8b6 	bl	8004ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d74:	e099      	b.n	8004eaa <HAL_UART_IRQHandler+0x50e>
 8004d76:	bf00      	nop
 8004d78:	0800503b 	.word	0x0800503b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 808b 	beq.w	8004eae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8086 	beq.w	8004eae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	330c      	adds	r3, #12
 8004da8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004dc6:	647a      	str	r2, [r7, #68]	; 0x44
 8004dc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e3      	bne.n	8004da2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3314      	adds	r3, #20
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	623b      	str	r3, [r7, #32]
   return(result);
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	f023 0301 	bic.w	r3, r3, #1
 8004df0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3314      	adds	r3, #20
 8004dfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dfe:	633a      	str	r2, [r7, #48]	; 0x30
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e3      	bne.n	8004dda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0310 	bic.w	r3, r3, #16
 8004e36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	330c      	adds	r3, #12
 8004e40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e44:	61fa      	str	r2, [r7, #28]
 8004e46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	69b9      	ldr	r1, [r7, #24]
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	617b      	str	r3, [r7, #20]
   return(result);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e3      	bne.n	8004e20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f83e 	bl	8004ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e64:	e023      	b.n	8004eae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <HAL_UART_IRQHandler+0x4ea>
 8004e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f8ef 	bl	8005062 <UART_Transmit_IT>
    return;
 8004e84:	e014      	b.n	8004eb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00e      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x514>
 8004e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d008      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f92f 	bl	8005102 <UART_EndTransmit_IT>
    return;
 8004ea4:	e004      	b.n	8004eb0 <HAL_UART_IRQHandler+0x514>
    return;
 8004ea6:	bf00      	nop
 8004ea8:	e002      	b.n	8004eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8004eaa:	bf00      	nop
 8004eac:	e000      	b.n	8004eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8004eae:	bf00      	nop
  }
}
 8004eb0:	37e8      	adds	r7, #232	; 0xe8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop

08004eb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	4613      	mov	r3, r2
 8004f04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	88fa      	ldrh	r2, [r7, #6]
 8004f16:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2222      	movs	r2, #34	; 0x22
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d007      	beq.n	8004f46 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f44:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695a      	ldr	r2, [r3, #20]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0220 	orr.w	r2, r2, #32
 8004f64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b095      	sub	sp, #84	; 0x54
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f9c:	643a      	str	r2, [r7, #64]	; 0x40
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e5      	bne.n	8004f7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3314      	adds	r3, #20
 8004fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3314      	adds	r3, #20
 8004fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e5      	bne.n	8004fb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d119      	bne.n	8005020 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f023 0310 	bic.w	r3, r3, #16
 8005002:	647b      	str	r3, [r7, #68]	; 0x44
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800500c:	61ba      	str	r2, [r7, #24]
 800500e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6979      	ldr	r1, [r7, #20]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	613b      	str	r3, [r7, #16]
   return(result);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e5      	bne.n	8004fec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800502e:	bf00      	nop
 8005030:	3754      	adds	r7, #84	; 0x54
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f7ff ff39 	bl	8004ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800505a:	bf00      	nop
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005062:	b480      	push	{r7}
 8005064:	b085      	sub	sp, #20
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b21      	cmp	r3, #33	; 0x21
 8005074:	d13e      	bne.n	80050f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507e:	d114      	bne.n	80050aa <UART_Transmit_IT+0x48>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d110      	bne.n	80050aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	461a      	mov	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800509c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	1c9a      	adds	r2, r3, #2
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	621a      	str	r2, [r3, #32]
 80050a8:	e008      	b.n	80050bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	1c59      	adds	r1, r3, #1
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6211      	str	r1, [r2, #32]
 80050b4:	781a      	ldrb	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	4619      	mov	r1, r3
 80050ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10f      	bne.n	80050f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050f0:	2300      	movs	r3, #0
 80050f2:	e000      	b.n	80050f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050f4:	2302      	movs	r3, #2
  }
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005118:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7ff fec8 	bl	8004eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b08c      	sub	sp, #48	; 0x30
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b22      	cmp	r3, #34	; 0x22
 8005144:	f040 80ab 	bne.w	800529e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005150:	d117      	bne.n	8005182 <UART_Receive_IT+0x50>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d113      	bne.n	8005182 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	b29b      	uxth	r3, r3
 800516c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005170:	b29a      	uxth	r2, r3
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517a:	1c9a      	adds	r2, r3, #2
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	629a      	str	r2, [r3, #40]	; 0x28
 8005180:	e026      	b.n	80051d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005186:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005188:	2300      	movs	r3, #0
 800518a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005194:	d007      	beq.n	80051a6 <UART_Receive_IT+0x74>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <UART_Receive_IT+0x82>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	e008      	b.n	80051c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29b      	uxth	r3, r3
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	4619      	mov	r1, r3
 80051de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d15a      	bne.n	800529a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0220 	bic.w	r2, r2, #32
 80051f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005202:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695a      	ldr	r2, [r3, #20]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0201 	bic.w	r2, r2, #1
 8005212:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005220:	2b01      	cmp	r3, #1
 8005222:	d135      	bne.n	8005290 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	330c      	adds	r3, #12
 8005230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	613b      	str	r3, [r7, #16]
   return(result);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f023 0310 	bic.w	r3, r3, #16
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	330c      	adds	r3, #12
 8005248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524a:	623a      	str	r2, [r7, #32]
 800524c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	69f9      	ldr	r1, [r7, #28]
 8005250:	6a3a      	ldr	r2, [r7, #32]
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	61bb      	str	r3, [r7, #24]
   return(result);
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e5      	bne.n	800522a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b10      	cmp	r3, #16
 800526a:	d10a      	bne.n	8005282 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800526c:	2300      	movs	r3, #0
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005286:	4619      	mov	r1, r3
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff fe29 	bl	8004ee0 <HAL_UARTEx_RxEventCallback>
 800528e:	e002      	b.n	8005296 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7fc fa17 	bl	80016c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e002      	b.n	80052a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	e000      	b.n	80052a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800529e:	2302      	movs	r3, #2
  }
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3730      	adds	r7, #48	; 0x30
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052ac:	b0c0      	sub	sp, #256	; 0x100
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c4:	68d9      	ldr	r1, [r3, #12]
 80052c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	ea40 0301 	orr.w	r3, r0, r1
 80052d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	431a      	orrs	r2, r3
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	431a      	orrs	r2, r3
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005300:	f021 010c 	bic.w	r1, r1, #12
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800530e:	430b      	orrs	r3, r1
 8005310:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800531e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005322:	6999      	ldr	r1, [r3, #24]
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	ea40 0301 	orr.w	r3, r0, r1
 800532e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b8f      	ldr	r3, [pc, #572]	; (8005574 <UART_SetConfig+0x2cc>)
 8005338:	429a      	cmp	r2, r3
 800533a:	d005      	beq.n	8005348 <UART_SetConfig+0xa0>
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4b8d      	ldr	r3, [pc, #564]	; (8005578 <UART_SetConfig+0x2d0>)
 8005344:	429a      	cmp	r2, r3
 8005346:	d104      	bne.n	8005352 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005348:	f7fe fda2 	bl	8003e90 <HAL_RCC_GetPCLK2Freq>
 800534c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005350:	e003      	b.n	800535a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005352:	f7fe fd89 	bl	8003e68 <HAL_RCC_GetPCLK1Freq>
 8005356:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800535a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005364:	f040 810c 	bne.w	8005580 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800536c:	2200      	movs	r2, #0
 800536e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005372:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005376:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800537a:	4622      	mov	r2, r4
 800537c:	462b      	mov	r3, r5
 800537e:	1891      	adds	r1, r2, r2
 8005380:	65b9      	str	r1, [r7, #88]	; 0x58
 8005382:	415b      	adcs	r3, r3
 8005384:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005386:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800538a:	4621      	mov	r1, r4
 800538c:	eb12 0801 	adds.w	r8, r2, r1
 8005390:	4629      	mov	r1, r5
 8005392:	eb43 0901 	adc.w	r9, r3, r1
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053aa:	4690      	mov	r8, r2
 80053ac:	4699      	mov	r9, r3
 80053ae:	4623      	mov	r3, r4
 80053b0:	eb18 0303 	adds.w	r3, r8, r3
 80053b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053b8:	462b      	mov	r3, r5
 80053ba:	eb49 0303 	adc.w	r3, r9, r3
 80053be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053d6:	460b      	mov	r3, r1
 80053d8:	18db      	adds	r3, r3, r3
 80053da:	653b      	str	r3, [r7, #80]	; 0x50
 80053dc:	4613      	mov	r3, r2
 80053de:	eb42 0303 	adc.w	r3, r2, r3
 80053e2:	657b      	str	r3, [r7, #84]	; 0x54
 80053e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053ec:	f7fb fc4c 	bl	8000c88 <__aeabi_uldivmod>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4b61      	ldr	r3, [pc, #388]	; (800557c <UART_SetConfig+0x2d4>)
 80053f6:	fba3 2302 	umull	r2, r3, r3, r2
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	011c      	lsls	r4, r3, #4
 80053fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005402:	2200      	movs	r2, #0
 8005404:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005408:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800540c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005410:	4642      	mov	r2, r8
 8005412:	464b      	mov	r3, r9
 8005414:	1891      	adds	r1, r2, r2
 8005416:	64b9      	str	r1, [r7, #72]	; 0x48
 8005418:	415b      	adcs	r3, r3
 800541a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800541c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005420:	4641      	mov	r1, r8
 8005422:	eb12 0a01 	adds.w	sl, r2, r1
 8005426:	4649      	mov	r1, r9
 8005428:	eb43 0b01 	adc.w	fp, r3, r1
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005438:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800543c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005440:	4692      	mov	sl, r2
 8005442:	469b      	mov	fp, r3
 8005444:	4643      	mov	r3, r8
 8005446:	eb1a 0303 	adds.w	r3, sl, r3
 800544a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800544e:	464b      	mov	r3, r9
 8005450:	eb4b 0303 	adc.w	r3, fp, r3
 8005454:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005464:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005468:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800546c:	460b      	mov	r3, r1
 800546e:	18db      	adds	r3, r3, r3
 8005470:	643b      	str	r3, [r7, #64]	; 0x40
 8005472:	4613      	mov	r3, r2
 8005474:	eb42 0303 	adc.w	r3, r2, r3
 8005478:	647b      	str	r3, [r7, #68]	; 0x44
 800547a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800547e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005482:	f7fb fc01 	bl	8000c88 <__aeabi_uldivmod>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4611      	mov	r1, r2
 800548c:	4b3b      	ldr	r3, [pc, #236]	; (800557c <UART_SetConfig+0x2d4>)
 800548e:	fba3 2301 	umull	r2, r3, r3, r1
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	2264      	movs	r2, #100	; 0x64
 8005496:	fb02 f303 	mul.w	r3, r2, r3
 800549a:	1acb      	subs	r3, r1, r3
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054a2:	4b36      	ldr	r3, [pc, #216]	; (800557c <UART_SetConfig+0x2d4>)
 80054a4:	fba3 2302 	umull	r2, r3, r3, r2
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054b0:	441c      	add	r4, r3
 80054b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054c4:	4642      	mov	r2, r8
 80054c6:	464b      	mov	r3, r9
 80054c8:	1891      	adds	r1, r2, r2
 80054ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80054cc:	415b      	adcs	r3, r3
 80054ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054d4:	4641      	mov	r1, r8
 80054d6:	1851      	adds	r1, r2, r1
 80054d8:	6339      	str	r1, [r7, #48]	; 0x30
 80054da:	4649      	mov	r1, r9
 80054dc:	414b      	adcs	r3, r1
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054ec:	4659      	mov	r1, fp
 80054ee:	00cb      	lsls	r3, r1, #3
 80054f0:	4651      	mov	r1, sl
 80054f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054f6:	4651      	mov	r1, sl
 80054f8:	00ca      	lsls	r2, r1, #3
 80054fa:	4610      	mov	r0, r2
 80054fc:	4619      	mov	r1, r3
 80054fe:	4603      	mov	r3, r0
 8005500:	4642      	mov	r2, r8
 8005502:	189b      	adds	r3, r3, r2
 8005504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005508:	464b      	mov	r3, r9
 800550a:	460a      	mov	r2, r1
 800550c:	eb42 0303 	adc.w	r3, r2, r3
 8005510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005520:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005524:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005528:	460b      	mov	r3, r1
 800552a:	18db      	adds	r3, r3, r3
 800552c:	62bb      	str	r3, [r7, #40]	; 0x28
 800552e:	4613      	mov	r3, r2
 8005530:	eb42 0303 	adc.w	r3, r2, r3
 8005534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005536:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800553a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800553e:	f7fb fba3 	bl	8000c88 <__aeabi_uldivmod>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4b0d      	ldr	r3, [pc, #52]	; (800557c <UART_SetConfig+0x2d4>)
 8005548:	fba3 1302 	umull	r1, r3, r3, r2
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	2164      	movs	r1, #100	; 0x64
 8005550:	fb01 f303 	mul.w	r3, r1, r3
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	3332      	adds	r3, #50	; 0x32
 800555a:	4a08      	ldr	r2, [pc, #32]	; (800557c <UART_SetConfig+0x2d4>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	095b      	lsrs	r3, r3, #5
 8005562:	f003 0207 	and.w	r2, r3, #7
 8005566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4422      	add	r2, r4
 800556e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005570:	e105      	b.n	800577e <UART_SetConfig+0x4d6>
 8005572:	bf00      	nop
 8005574:	40011000 	.word	0x40011000
 8005578:	40011400 	.word	0x40011400
 800557c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005584:	2200      	movs	r2, #0
 8005586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800558a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800558e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005592:	4642      	mov	r2, r8
 8005594:	464b      	mov	r3, r9
 8005596:	1891      	adds	r1, r2, r2
 8005598:	6239      	str	r1, [r7, #32]
 800559a:	415b      	adcs	r3, r3
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
 800559e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055a2:	4641      	mov	r1, r8
 80055a4:	1854      	adds	r4, r2, r1
 80055a6:	4649      	mov	r1, r9
 80055a8:	eb43 0501 	adc.w	r5, r3, r1
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	00eb      	lsls	r3, r5, #3
 80055b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ba:	00e2      	lsls	r2, r4, #3
 80055bc:	4614      	mov	r4, r2
 80055be:	461d      	mov	r5, r3
 80055c0:	4643      	mov	r3, r8
 80055c2:	18e3      	adds	r3, r4, r3
 80055c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055c8:	464b      	mov	r3, r9
 80055ca:	eb45 0303 	adc.w	r3, r5, r3
 80055ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055ee:	4629      	mov	r1, r5
 80055f0:	008b      	lsls	r3, r1, #2
 80055f2:	4621      	mov	r1, r4
 80055f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055f8:	4621      	mov	r1, r4
 80055fa:	008a      	lsls	r2, r1, #2
 80055fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005600:	f7fb fb42 	bl	8000c88 <__aeabi_uldivmod>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4b60      	ldr	r3, [pc, #384]	; (800578c <UART_SetConfig+0x4e4>)
 800560a:	fba3 2302 	umull	r2, r3, r3, r2
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	011c      	lsls	r4, r3, #4
 8005612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005616:	2200      	movs	r2, #0
 8005618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800561c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005620:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005624:	4642      	mov	r2, r8
 8005626:	464b      	mov	r3, r9
 8005628:	1891      	adds	r1, r2, r2
 800562a:	61b9      	str	r1, [r7, #24]
 800562c:	415b      	adcs	r3, r3
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005634:	4641      	mov	r1, r8
 8005636:	1851      	adds	r1, r2, r1
 8005638:	6139      	str	r1, [r7, #16]
 800563a:	4649      	mov	r1, r9
 800563c:	414b      	adcs	r3, r1
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800564c:	4659      	mov	r1, fp
 800564e:	00cb      	lsls	r3, r1, #3
 8005650:	4651      	mov	r1, sl
 8005652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005656:	4651      	mov	r1, sl
 8005658:	00ca      	lsls	r2, r1, #3
 800565a:	4610      	mov	r0, r2
 800565c:	4619      	mov	r1, r3
 800565e:	4603      	mov	r3, r0
 8005660:	4642      	mov	r2, r8
 8005662:	189b      	adds	r3, r3, r2
 8005664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005668:	464b      	mov	r3, r9
 800566a:	460a      	mov	r2, r1
 800566c:	eb42 0303 	adc.w	r3, r2, r3
 8005670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	67bb      	str	r3, [r7, #120]	; 0x78
 800567e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800568c:	4649      	mov	r1, r9
 800568e:	008b      	lsls	r3, r1, #2
 8005690:	4641      	mov	r1, r8
 8005692:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005696:	4641      	mov	r1, r8
 8005698:	008a      	lsls	r2, r1, #2
 800569a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800569e:	f7fb faf3 	bl	8000c88 <__aeabi_uldivmod>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4b39      	ldr	r3, [pc, #228]	; (800578c <UART_SetConfig+0x4e4>)
 80056a8:	fba3 1302 	umull	r1, r3, r3, r2
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	2164      	movs	r1, #100	; 0x64
 80056b0:	fb01 f303 	mul.w	r3, r1, r3
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	3332      	adds	r3, #50	; 0x32
 80056ba:	4a34      	ldr	r2, [pc, #208]	; (800578c <UART_SetConfig+0x4e4>)
 80056bc:	fba2 2303 	umull	r2, r3, r2, r3
 80056c0:	095b      	lsrs	r3, r3, #5
 80056c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056c6:	441c      	add	r4, r3
 80056c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056cc:	2200      	movs	r2, #0
 80056ce:	673b      	str	r3, [r7, #112]	; 0x70
 80056d0:	677a      	str	r2, [r7, #116]	; 0x74
 80056d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056d6:	4642      	mov	r2, r8
 80056d8:	464b      	mov	r3, r9
 80056da:	1891      	adds	r1, r2, r2
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	415b      	adcs	r3, r3
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056e6:	4641      	mov	r1, r8
 80056e8:	1851      	adds	r1, r2, r1
 80056ea:	6039      	str	r1, [r7, #0]
 80056ec:	4649      	mov	r1, r9
 80056ee:	414b      	adcs	r3, r1
 80056f0:	607b      	str	r3, [r7, #4]
 80056f2:	f04f 0200 	mov.w	r2, #0
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056fe:	4659      	mov	r1, fp
 8005700:	00cb      	lsls	r3, r1, #3
 8005702:	4651      	mov	r1, sl
 8005704:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005708:	4651      	mov	r1, sl
 800570a:	00ca      	lsls	r2, r1, #3
 800570c:	4610      	mov	r0, r2
 800570e:	4619      	mov	r1, r3
 8005710:	4603      	mov	r3, r0
 8005712:	4642      	mov	r2, r8
 8005714:	189b      	adds	r3, r3, r2
 8005716:	66bb      	str	r3, [r7, #104]	; 0x68
 8005718:	464b      	mov	r3, r9
 800571a:	460a      	mov	r2, r1
 800571c:	eb42 0303 	adc.w	r3, r2, r3
 8005720:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	663b      	str	r3, [r7, #96]	; 0x60
 800572c:	667a      	str	r2, [r7, #100]	; 0x64
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800573a:	4649      	mov	r1, r9
 800573c:	008b      	lsls	r3, r1, #2
 800573e:	4641      	mov	r1, r8
 8005740:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005744:	4641      	mov	r1, r8
 8005746:	008a      	lsls	r2, r1, #2
 8005748:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800574c:	f7fb fa9c 	bl	8000c88 <__aeabi_uldivmod>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4b0d      	ldr	r3, [pc, #52]	; (800578c <UART_SetConfig+0x4e4>)
 8005756:	fba3 1302 	umull	r1, r3, r3, r2
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	2164      	movs	r1, #100	; 0x64
 800575e:	fb01 f303 	mul.w	r3, r1, r3
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	3332      	adds	r3, #50	; 0x32
 8005768:	4a08      	ldr	r2, [pc, #32]	; (800578c <UART_SetConfig+0x4e4>)
 800576a:	fba2 2303 	umull	r2, r3, r2, r3
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	f003 020f 	and.w	r2, r3, #15
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4422      	add	r2, r4
 800577c:	609a      	str	r2, [r3, #8]
}
 800577e:	bf00      	nop
 8005780:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005784:	46bd      	mov	sp, r7
 8005786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800578a:	bf00      	nop
 800578c:	51eb851f 	.word	0x51eb851f

08005790 <__errno>:
 8005790:	4b01      	ldr	r3, [pc, #4]	; (8005798 <__errno+0x8>)
 8005792:	6818      	ldr	r0, [r3, #0]
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	2000000c 	.word	0x2000000c

0800579c <__libc_init_array>:
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	4d0d      	ldr	r5, [pc, #52]	; (80057d4 <__libc_init_array+0x38>)
 80057a0:	4c0d      	ldr	r4, [pc, #52]	; (80057d8 <__libc_init_array+0x3c>)
 80057a2:	1b64      	subs	r4, r4, r5
 80057a4:	10a4      	asrs	r4, r4, #2
 80057a6:	2600      	movs	r6, #0
 80057a8:	42a6      	cmp	r6, r4
 80057aa:	d109      	bne.n	80057c0 <__libc_init_array+0x24>
 80057ac:	4d0b      	ldr	r5, [pc, #44]	; (80057dc <__libc_init_array+0x40>)
 80057ae:	4c0c      	ldr	r4, [pc, #48]	; (80057e0 <__libc_init_array+0x44>)
 80057b0:	f003 fbbc 	bl	8008f2c <_init>
 80057b4:	1b64      	subs	r4, r4, r5
 80057b6:	10a4      	asrs	r4, r4, #2
 80057b8:	2600      	movs	r6, #0
 80057ba:	42a6      	cmp	r6, r4
 80057bc:	d105      	bne.n	80057ca <__libc_init_array+0x2e>
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c4:	4798      	blx	r3
 80057c6:	3601      	adds	r6, #1
 80057c8:	e7ee      	b.n	80057a8 <__libc_init_array+0xc>
 80057ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ce:	4798      	blx	r3
 80057d0:	3601      	adds	r6, #1
 80057d2:	e7f2      	b.n	80057ba <__libc_init_array+0x1e>
 80057d4:	080094d4 	.word	0x080094d4
 80057d8:	080094d4 	.word	0x080094d4
 80057dc:	080094d4 	.word	0x080094d4
 80057e0:	080094d8 	.word	0x080094d8

080057e4 <memset>:
 80057e4:	4402      	add	r2, r0
 80057e6:	4603      	mov	r3, r0
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d100      	bne.n	80057ee <memset+0xa>
 80057ec:	4770      	bx	lr
 80057ee:	f803 1b01 	strb.w	r1, [r3], #1
 80057f2:	e7f9      	b.n	80057e8 <memset+0x4>

080057f4 <__cvt>:
 80057f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057f8:	ec55 4b10 	vmov	r4, r5, d0
 80057fc:	2d00      	cmp	r5, #0
 80057fe:	460e      	mov	r6, r1
 8005800:	4619      	mov	r1, r3
 8005802:	462b      	mov	r3, r5
 8005804:	bfbb      	ittet	lt
 8005806:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800580a:	461d      	movlt	r5, r3
 800580c:	2300      	movge	r3, #0
 800580e:	232d      	movlt	r3, #45	; 0x2d
 8005810:	700b      	strb	r3, [r1, #0]
 8005812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005814:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005818:	4691      	mov	r9, r2
 800581a:	f023 0820 	bic.w	r8, r3, #32
 800581e:	bfbc      	itt	lt
 8005820:	4622      	movlt	r2, r4
 8005822:	4614      	movlt	r4, r2
 8005824:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005828:	d005      	beq.n	8005836 <__cvt+0x42>
 800582a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800582e:	d100      	bne.n	8005832 <__cvt+0x3e>
 8005830:	3601      	adds	r6, #1
 8005832:	2102      	movs	r1, #2
 8005834:	e000      	b.n	8005838 <__cvt+0x44>
 8005836:	2103      	movs	r1, #3
 8005838:	ab03      	add	r3, sp, #12
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	ab02      	add	r3, sp, #8
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	ec45 4b10 	vmov	d0, r4, r5
 8005844:	4653      	mov	r3, sl
 8005846:	4632      	mov	r2, r6
 8005848:	f000 fd7e 	bl	8006348 <_dtoa_r>
 800584c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005850:	4607      	mov	r7, r0
 8005852:	d102      	bne.n	800585a <__cvt+0x66>
 8005854:	f019 0f01 	tst.w	r9, #1
 8005858:	d022      	beq.n	80058a0 <__cvt+0xac>
 800585a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800585e:	eb07 0906 	add.w	r9, r7, r6
 8005862:	d110      	bne.n	8005886 <__cvt+0x92>
 8005864:	783b      	ldrb	r3, [r7, #0]
 8005866:	2b30      	cmp	r3, #48	; 0x30
 8005868:	d10a      	bne.n	8005880 <__cvt+0x8c>
 800586a:	2200      	movs	r2, #0
 800586c:	2300      	movs	r3, #0
 800586e:	4620      	mov	r0, r4
 8005870:	4629      	mov	r1, r5
 8005872:	f7fb f949 	bl	8000b08 <__aeabi_dcmpeq>
 8005876:	b918      	cbnz	r0, 8005880 <__cvt+0x8c>
 8005878:	f1c6 0601 	rsb	r6, r6, #1
 800587c:	f8ca 6000 	str.w	r6, [sl]
 8005880:	f8da 3000 	ldr.w	r3, [sl]
 8005884:	4499      	add	r9, r3
 8005886:	2200      	movs	r2, #0
 8005888:	2300      	movs	r3, #0
 800588a:	4620      	mov	r0, r4
 800588c:	4629      	mov	r1, r5
 800588e:	f7fb f93b 	bl	8000b08 <__aeabi_dcmpeq>
 8005892:	b108      	cbz	r0, 8005898 <__cvt+0xa4>
 8005894:	f8cd 900c 	str.w	r9, [sp, #12]
 8005898:	2230      	movs	r2, #48	; 0x30
 800589a:	9b03      	ldr	r3, [sp, #12]
 800589c:	454b      	cmp	r3, r9
 800589e:	d307      	bcc.n	80058b0 <__cvt+0xbc>
 80058a0:	9b03      	ldr	r3, [sp, #12]
 80058a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058a4:	1bdb      	subs	r3, r3, r7
 80058a6:	4638      	mov	r0, r7
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	b004      	add	sp, #16
 80058ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b0:	1c59      	adds	r1, r3, #1
 80058b2:	9103      	str	r1, [sp, #12]
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	e7f0      	b.n	800589a <__cvt+0xa6>

080058b8 <__exponent>:
 80058b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058ba:	4603      	mov	r3, r0
 80058bc:	2900      	cmp	r1, #0
 80058be:	bfb8      	it	lt
 80058c0:	4249      	neglt	r1, r1
 80058c2:	f803 2b02 	strb.w	r2, [r3], #2
 80058c6:	bfb4      	ite	lt
 80058c8:	222d      	movlt	r2, #45	; 0x2d
 80058ca:	222b      	movge	r2, #43	; 0x2b
 80058cc:	2909      	cmp	r1, #9
 80058ce:	7042      	strb	r2, [r0, #1]
 80058d0:	dd2a      	ble.n	8005928 <__exponent+0x70>
 80058d2:	f10d 0407 	add.w	r4, sp, #7
 80058d6:	46a4      	mov	ip, r4
 80058d8:	270a      	movs	r7, #10
 80058da:	46a6      	mov	lr, r4
 80058dc:	460a      	mov	r2, r1
 80058de:	fb91 f6f7 	sdiv	r6, r1, r7
 80058e2:	fb07 1516 	mls	r5, r7, r6, r1
 80058e6:	3530      	adds	r5, #48	; 0x30
 80058e8:	2a63      	cmp	r2, #99	; 0x63
 80058ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80058ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058f2:	4631      	mov	r1, r6
 80058f4:	dcf1      	bgt.n	80058da <__exponent+0x22>
 80058f6:	3130      	adds	r1, #48	; 0x30
 80058f8:	f1ae 0502 	sub.w	r5, lr, #2
 80058fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005900:	1c44      	adds	r4, r0, #1
 8005902:	4629      	mov	r1, r5
 8005904:	4561      	cmp	r1, ip
 8005906:	d30a      	bcc.n	800591e <__exponent+0x66>
 8005908:	f10d 0209 	add.w	r2, sp, #9
 800590c:	eba2 020e 	sub.w	r2, r2, lr
 8005910:	4565      	cmp	r5, ip
 8005912:	bf88      	it	hi
 8005914:	2200      	movhi	r2, #0
 8005916:	4413      	add	r3, r2
 8005918:	1a18      	subs	r0, r3, r0
 800591a:	b003      	add	sp, #12
 800591c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800591e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005922:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005926:	e7ed      	b.n	8005904 <__exponent+0x4c>
 8005928:	2330      	movs	r3, #48	; 0x30
 800592a:	3130      	adds	r1, #48	; 0x30
 800592c:	7083      	strb	r3, [r0, #2]
 800592e:	70c1      	strb	r1, [r0, #3]
 8005930:	1d03      	adds	r3, r0, #4
 8005932:	e7f1      	b.n	8005918 <__exponent+0x60>

08005934 <_printf_float>:
 8005934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005938:	ed2d 8b02 	vpush	{d8}
 800593c:	b08d      	sub	sp, #52	; 0x34
 800593e:	460c      	mov	r4, r1
 8005940:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005944:	4616      	mov	r6, r2
 8005946:	461f      	mov	r7, r3
 8005948:	4605      	mov	r5, r0
 800594a:	f001 faeb 	bl	8006f24 <_localeconv_r>
 800594e:	f8d0 a000 	ldr.w	sl, [r0]
 8005952:	4650      	mov	r0, sl
 8005954:	f7fa fc56 	bl	8000204 <strlen>
 8005958:	2300      	movs	r3, #0
 800595a:	930a      	str	r3, [sp, #40]	; 0x28
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	9305      	str	r3, [sp, #20]
 8005960:	f8d8 3000 	ldr.w	r3, [r8]
 8005964:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005968:	3307      	adds	r3, #7
 800596a:	f023 0307 	bic.w	r3, r3, #7
 800596e:	f103 0208 	add.w	r2, r3, #8
 8005972:	f8c8 2000 	str.w	r2, [r8]
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800597e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005982:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005986:	9307      	str	r3, [sp, #28]
 8005988:	f8cd 8018 	str.w	r8, [sp, #24]
 800598c:	ee08 0a10 	vmov	s16, r0
 8005990:	4b9f      	ldr	r3, [pc, #636]	; (8005c10 <_printf_float+0x2dc>)
 8005992:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005996:	f04f 32ff 	mov.w	r2, #4294967295
 800599a:	f7fb f8e7 	bl	8000b6c <__aeabi_dcmpun>
 800599e:	bb88      	cbnz	r0, 8005a04 <_printf_float+0xd0>
 80059a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059a4:	4b9a      	ldr	r3, [pc, #616]	; (8005c10 <_printf_float+0x2dc>)
 80059a6:	f04f 32ff 	mov.w	r2, #4294967295
 80059aa:	f7fb f8c1 	bl	8000b30 <__aeabi_dcmple>
 80059ae:	bb48      	cbnz	r0, 8005a04 <_printf_float+0xd0>
 80059b0:	2200      	movs	r2, #0
 80059b2:	2300      	movs	r3, #0
 80059b4:	4640      	mov	r0, r8
 80059b6:	4649      	mov	r1, r9
 80059b8:	f7fb f8b0 	bl	8000b1c <__aeabi_dcmplt>
 80059bc:	b110      	cbz	r0, 80059c4 <_printf_float+0x90>
 80059be:	232d      	movs	r3, #45	; 0x2d
 80059c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059c4:	4b93      	ldr	r3, [pc, #588]	; (8005c14 <_printf_float+0x2e0>)
 80059c6:	4894      	ldr	r0, [pc, #592]	; (8005c18 <_printf_float+0x2e4>)
 80059c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80059cc:	bf94      	ite	ls
 80059ce:	4698      	movls	r8, r3
 80059d0:	4680      	movhi	r8, r0
 80059d2:	2303      	movs	r3, #3
 80059d4:	6123      	str	r3, [r4, #16]
 80059d6:	9b05      	ldr	r3, [sp, #20]
 80059d8:	f023 0204 	bic.w	r2, r3, #4
 80059dc:	6022      	str	r2, [r4, #0]
 80059de:	f04f 0900 	mov.w	r9, #0
 80059e2:	9700      	str	r7, [sp, #0]
 80059e4:	4633      	mov	r3, r6
 80059e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80059e8:	4621      	mov	r1, r4
 80059ea:	4628      	mov	r0, r5
 80059ec:	f000 f9d8 	bl	8005da0 <_printf_common>
 80059f0:	3001      	adds	r0, #1
 80059f2:	f040 8090 	bne.w	8005b16 <_printf_float+0x1e2>
 80059f6:	f04f 30ff 	mov.w	r0, #4294967295
 80059fa:	b00d      	add	sp, #52	; 0x34
 80059fc:	ecbd 8b02 	vpop	{d8}
 8005a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a04:	4642      	mov	r2, r8
 8005a06:	464b      	mov	r3, r9
 8005a08:	4640      	mov	r0, r8
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	f7fb f8ae 	bl	8000b6c <__aeabi_dcmpun>
 8005a10:	b140      	cbz	r0, 8005a24 <_printf_float+0xf0>
 8005a12:	464b      	mov	r3, r9
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bfbc      	itt	lt
 8005a18:	232d      	movlt	r3, #45	; 0x2d
 8005a1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a1e:	487f      	ldr	r0, [pc, #508]	; (8005c1c <_printf_float+0x2e8>)
 8005a20:	4b7f      	ldr	r3, [pc, #508]	; (8005c20 <_printf_float+0x2ec>)
 8005a22:	e7d1      	b.n	80059c8 <_printf_float+0x94>
 8005a24:	6863      	ldr	r3, [r4, #4]
 8005a26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a2a:	9206      	str	r2, [sp, #24]
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	d13f      	bne.n	8005ab0 <_printf_float+0x17c>
 8005a30:	2306      	movs	r3, #6
 8005a32:	6063      	str	r3, [r4, #4]
 8005a34:	9b05      	ldr	r3, [sp, #20]
 8005a36:	6861      	ldr	r1, [r4, #4]
 8005a38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	9303      	str	r3, [sp, #12]
 8005a40:	ab0a      	add	r3, sp, #40	; 0x28
 8005a42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a46:	ab09      	add	r3, sp, #36	; 0x24
 8005a48:	ec49 8b10 	vmov	d0, r8, r9
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	6022      	str	r2, [r4, #0]
 8005a50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a54:	4628      	mov	r0, r5
 8005a56:	f7ff fecd 	bl	80057f4 <__cvt>
 8005a5a:	9b06      	ldr	r3, [sp, #24]
 8005a5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a5e:	2b47      	cmp	r3, #71	; 0x47
 8005a60:	4680      	mov	r8, r0
 8005a62:	d108      	bne.n	8005a76 <_printf_float+0x142>
 8005a64:	1cc8      	adds	r0, r1, #3
 8005a66:	db02      	blt.n	8005a6e <_printf_float+0x13a>
 8005a68:	6863      	ldr	r3, [r4, #4]
 8005a6a:	4299      	cmp	r1, r3
 8005a6c:	dd41      	ble.n	8005af2 <_printf_float+0x1be>
 8005a6e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a72:	fa5f fb8b 	uxtb.w	fp, fp
 8005a76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a7a:	d820      	bhi.n	8005abe <_printf_float+0x18a>
 8005a7c:	3901      	subs	r1, #1
 8005a7e:	465a      	mov	r2, fp
 8005a80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a84:	9109      	str	r1, [sp, #36]	; 0x24
 8005a86:	f7ff ff17 	bl	80058b8 <__exponent>
 8005a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a8c:	1813      	adds	r3, r2, r0
 8005a8e:	2a01      	cmp	r2, #1
 8005a90:	4681      	mov	r9, r0
 8005a92:	6123      	str	r3, [r4, #16]
 8005a94:	dc02      	bgt.n	8005a9c <_printf_float+0x168>
 8005a96:	6822      	ldr	r2, [r4, #0]
 8005a98:	07d2      	lsls	r2, r2, #31
 8005a9a:	d501      	bpl.n	8005aa0 <_printf_float+0x16c>
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	6123      	str	r3, [r4, #16]
 8005aa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d09c      	beq.n	80059e2 <_printf_float+0xae>
 8005aa8:	232d      	movs	r3, #45	; 0x2d
 8005aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aae:	e798      	b.n	80059e2 <_printf_float+0xae>
 8005ab0:	9a06      	ldr	r2, [sp, #24]
 8005ab2:	2a47      	cmp	r2, #71	; 0x47
 8005ab4:	d1be      	bne.n	8005a34 <_printf_float+0x100>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1bc      	bne.n	8005a34 <_printf_float+0x100>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e7b9      	b.n	8005a32 <_printf_float+0xfe>
 8005abe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ac2:	d118      	bne.n	8005af6 <_printf_float+0x1c2>
 8005ac4:	2900      	cmp	r1, #0
 8005ac6:	6863      	ldr	r3, [r4, #4]
 8005ac8:	dd0b      	ble.n	8005ae2 <_printf_float+0x1ae>
 8005aca:	6121      	str	r1, [r4, #16]
 8005acc:	b913      	cbnz	r3, 8005ad4 <_printf_float+0x1a0>
 8005ace:	6822      	ldr	r2, [r4, #0]
 8005ad0:	07d0      	lsls	r0, r2, #31
 8005ad2:	d502      	bpl.n	8005ada <_printf_float+0x1a6>
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	440b      	add	r3, r1
 8005ad8:	6123      	str	r3, [r4, #16]
 8005ada:	65a1      	str	r1, [r4, #88]	; 0x58
 8005adc:	f04f 0900 	mov.w	r9, #0
 8005ae0:	e7de      	b.n	8005aa0 <_printf_float+0x16c>
 8005ae2:	b913      	cbnz	r3, 8005aea <_printf_float+0x1b6>
 8005ae4:	6822      	ldr	r2, [r4, #0]
 8005ae6:	07d2      	lsls	r2, r2, #31
 8005ae8:	d501      	bpl.n	8005aee <_printf_float+0x1ba>
 8005aea:	3302      	adds	r3, #2
 8005aec:	e7f4      	b.n	8005ad8 <_printf_float+0x1a4>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e7f2      	b.n	8005ad8 <_printf_float+0x1a4>
 8005af2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af8:	4299      	cmp	r1, r3
 8005afa:	db05      	blt.n	8005b08 <_printf_float+0x1d4>
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	6121      	str	r1, [r4, #16]
 8005b00:	07d8      	lsls	r0, r3, #31
 8005b02:	d5ea      	bpl.n	8005ada <_printf_float+0x1a6>
 8005b04:	1c4b      	adds	r3, r1, #1
 8005b06:	e7e7      	b.n	8005ad8 <_printf_float+0x1a4>
 8005b08:	2900      	cmp	r1, #0
 8005b0a:	bfd4      	ite	le
 8005b0c:	f1c1 0202 	rsble	r2, r1, #2
 8005b10:	2201      	movgt	r2, #1
 8005b12:	4413      	add	r3, r2
 8005b14:	e7e0      	b.n	8005ad8 <_printf_float+0x1a4>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	055a      	lsls	r2, r3, #21
 8005b1a:	d407      	bmi.n	8005b2c <_printf_float+0x1f8>
 8005b1c:	6923      	ldr	r3, [r4, #16]
 8005b1e:	4642      	mov	r2, r8
 8005b20:	4631      	mov	r1, r6
 8005b22:	4628      	mov	r0, r5
 8005b24:	47b8      	blx	r7
 8005b26:	3001      	adds	r0, #1
 8005b28:	d12c      	bne.n	8005b84 <_printf_float+0x250>
 8005b2a:	e764      	b.n	80059f6 <_printf_float+0xc2>
 8005b2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b30:	f240 80e0 	bls.w	8005cf4 <_printf_float+0x3c0>
 8005b34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f7fa ffe4 	bl	8000b08 <__aeabi_dcmpeq>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d034      	beq.n	8005bae <_printf_float+0x27a>
 8005b44:	4a37      	ldr	r2, [pc, #220]	; (8005c24 <_printf_float+0x2f0>)
 8005b46:	2301      	movs	r3, #1
 8005b48:	4631      	mov	r1, r6
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	47b8      	blx	r7
 8005b4e:	3001      	adds	r0, #1
 8005b50:	f43f af51 	beq.w	80059f6 <_printf_float+0xc2>
 8005b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	db02      	blt.n	8005b62 <_printf_float+0x22e>
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	07d8      	lsls	r0, r3, #31
 8005b60:	d510      	bpl.n	8005b84 <_printf_float+0x250>
 8005b62:	ee18 3a10 	vmov	r3, s16
 8005b66:	4652      	mov	r2, sl
 8005b68:	4631      	mov	r1, r6
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	47b8      	blx	r7
 8005b6e:	3001      	adds	r0, #1
 8005b70:	f43f af41 	beq.w	80059f6 <_printf_float+0xc2>
 8005b74:	f04f 0800 	mov.w	r8, #0
 8005b78:	f104 091a 	add.w	r9, r4, #26
 8005b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	4543      	cmp	r3, r8
 8005b82:	dc09      	bgt.n	8005b98 <_printf_float+0x264>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	079b      	lsls	r3, r3, #30
 8005b88:	f100 8105 	bmi.w	8005d96 <_printf_float+0x462>
 8005b8c:	68e0      	ldr	r0, [r4, #12]
 8005b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b90:	4298      	cmp	r0, r3
 8005b92:	bfb8      	it	lt
 8005b94:	4618      	movlt	r0, r3
 8005b96:	e730      	b.n	80059fa <_printf_float+0xc6>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	464a      	mov	r2, r9
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	47b8      	blx	r7
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	f43f af27 	beq.w	80059f6 <_printf_float+0xc2>
 8005ba8:	f108 0801 	add.w	r8, r8, #1
 8005bac:	e7e6      	b.n	8005b7c <_printf_float+0x248>
 8005bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	dc39      	bgt.n	8005c28 <_printf_float+0x2f4>
 8005bb4:	4a1b      	ldr	r2, [pc, #108]	; (8005c24 <_printf_float+0x2f0>)
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	4631      	mov	r1, r6
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b8      	blx	r7
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f43f af19 	beq.w	80059f6 <_printf_float+0xc2>
 8005bc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	d102      	bne.n	8005bd2 <_printf_float+0x29e>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	07d9      	lsls	r1, r3, #31
 8005bd0:	d5d8      	bpl.n	8005b84 <_printf_float+0x250>
 8005bd2:	ee18 3a10 	vmov	r3, s16
 8005bd6:	4652      	mov	r2, sl
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	f43f af09 	beq.w	80059f6 <_printf_float+0xc2>
 8005be4:	f04f 0900 	mov.w	r9, #0
 8005be8:	f104 0a1a 	add.w	sl, r4, #26
 8005bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bee:	425b      	negs	r3, r3
 8005bf0:	454b      	cmp	r3, r9
 8005bf2:	dc01      	bgt.n	8005bf8 <_printf_float+0x2c4>
 8005bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf6:	e792      	b.n	8005b1e <_printf_float+0x1ea>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	4652      	mov	r2, sl
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4628      	mov	r0, r5
 8005c00:	47b8      	blx	r7
 8005c02:	3001      	adds	r0, #1
 8005c04:	f43f aef7 	beq.w	80059f6 <_printf_float+0xc2>
 8005c08:	f109 0901 	add.w	r9, r9, #1
 8005c0c:	e7ee      	b.n	8005bec <_printf_float+0x2b8>
 8005c0e:	bf00      	nop
 8005c10:	7fefffff 	.word	0x7fefffff
 8005c14:	080090d4 	.word	0x080090d4
 8005c18:	080090d8 	.word	0x080090d8
 8005c1c:	080090e0 	.word	0x080090e0
 8005c20:	080090dc 	.word	0x080090dc
 8005c24:	08009309 	.word	0x08009309
 8005c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	bfa8      	it	ge
 8005c30:	461a      	movge	r2, r3
 8005c32:	2a00      	cmp	r2, #0
 8005c34:	4691      	mov	r9, r2
 8005c36:	dc37      	bgt.n	8005ca8 <_printf_float+0x374>
 8005c38:	f04f 0b00 	mov.w	fp, #0
 8005c3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c40:	f104 021a 	add.w	r2, r4, #26
 8005c44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c46:	9305      	str	r3, [sp, #20]
 8005c48:	eba3 0309 	sub.w	r3, r3, r9
 8005c4c:	455b      	cmp	r3, fp
 8005c4e:	dc33      	bgt.n	8005cb8 <_printf_float+0x384>
 8005c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c54:	429a      	cmp	r2, r3
 8005c56:	db3b      	blt.n	8005cd0 <_printf_float+0x39c>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	07da      	lsls	r2, r3, #31
 8005c5c:	d438      	bmi.n	8005cd0 <_printf_float+0x39c>
 8005c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c60:	9a05      	ldr	r2, [sp, #20]
 8005c62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c64:	1a9a      	subs	r2, r3, r2
 8005c66:	eba3 0901 	sub.w	r9, r3, r1
 8005c6a:	4591      	cmp	r9, r2
 8005c6c:	bfa8      	it	ge
 8005c6e:	4691      	movge	r9, r2
 8005c70:	f1b9 0f00 	cmp.w	r9, #0
 8005c74:	dc35      	bgt.n	8005ce2 <_printf_float+0x3ae>
 8005c76:	f04f 0800 	mov.w	r8, #0
 8005c7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c7e:	f104 0a1a 	add.w	sl, r4, #26
 8005c82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c86:	1a9b      	subs	r3, r3, r2
 8005c88:	eba3 0309 	sub.w	r3, r3, r9
 8005c8c:	4543      	cmp	r3, r8
 8005c8e:	f77f af79 	ble.w	8005b84 <_printf_float+0x250>
 8005c92:	2301      	movs	r3, #1
 8005c94:	4652      	mov	r2, sl
 8005c96:	4631      	mov	r1, r6
 8005c98:	4628      	mov	r0, r5
 8005c9a:	47b8      	blx	r7
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	f43f aeaa 	beq.w	80059f6 <_printf_float+0xc2>
 8005ca2:	f108 0801 	add.w	r8, r8, #1
 8005ca6:	e7ec      	b.n	8005c82 <_printf_float+0x34e>
 8005ca8:	4613      	mov	r3, r2
 8005caa:	4631      	mov	r1, r6
 8005cac:	4642      	mov	r2, r8
 8005cae:	4628      	mov	r0, r5
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	d1c0      	bne.n	8005c38 <_printf_float+0x304>
 8005cb6:	e69e      	b.n	80059f6 <_printf_float+0xc2>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	9205      	str	r2, [sp, #20]
 8005cc0:	47b8      	blx	r7
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	f43f ae97 	beq.w	80059f6 <_printf_float+0xc2>
 8005cc8:	9a05      	ldr	r2, [sp, #20]
 8005cca:	f10b 0b01 	add.w	fp, fp, #1
 8005cce:	e7b9      	b.n	8005c44 <_printf_float+0x310>
 8005cd0:	ee18 3a10 	vmov	r3, s16
 8005cd4:	4652      	mov	r2, sl
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b8      	blx	r7
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d1be      	bne.n	8005c5e <_printf_float+0x32a>
 8005ce0:	e689      	b.n	80059f6 <_printf_float+0xc2>
 8005ce2:	9a05      	ldr	r2, [sp, #20]
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	4442      	add	r2, r8
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4628      	mov	r0, r5
 8005cec:	47b8      	blx	r7
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d1c1      	bne.n	8005c76 <_printf_float+0x342>
 8005cf2:	e680      	b.n	80059f6 <_printf_float+0xc2>
 8005cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cf6:	2a01      	cmp	r2, #1
 8005cf8:	dc01      	bgt.n	8005cfe <_printf_float+0x3ca>
 8005cfa:	07db      	lsls	r3, r3, #31
 8005cfc:	d538      	bpl.n	8005d70 <_printf_float+0x43c>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4642      	mov	r2, r8
 8005d02:	4631      	mov	r1, r6
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b8      	blx	r7
 8005d08:	3001      	adds	r0, #1
 8005d0a:	f43f ae74 	beq.w	80059f6 <_printf_float+0xc2>
 8005d0e:	ee18 3a10 	vmov	r3, s16
 8005d12:	4652      	mov	r2, sl
 8005d14:	4631      	mov	r1, r6
 8005d16:	4628      	mov	r0, r5
 8005d18:	47b8      	blx	r7
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	f43f ae6b 	beq.w	80059f6 <_printf_float+0xc2>
 8005d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d24:	2200      	movs	r2, #0
 8005d26:	2300      	movs	r3, #0
 8005d28:	f7fa feee 	bl	8000b08 <__aeabi_dcmpeq>
 8005d2c:	b9d8      	cbnz	r0, 8005d66 <_printf_float+0x432>
 8005d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d30:	f108 0201 	add.w	r2, r8, #1
 8005d34:	3b01      	subs	r3, #1
 8005d36:	4631      	mov	r1, r6
 8005d38:	4628      	mov	r0, r5
 8005d3a:	47b8      	blx	r7
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d10e      	bne.n	8005d5e <_printf_float+0x42a>
 8005d40:	e659      	b.n	80059f6 <_printf_float+0xc2>
 8005d42:	2301      	movs	r3, #1
 8005d44:	4652      	mov	r2, sl
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b8      	blx	r7
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	f43f ae52 	beq.w	80059f6 <_printf_float+0xc2>
 8005d52:	f108 0801 	add.w	r8, r8, #1
 8005d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	4543      	cmp	r3, r8
 8005d5c:	dcf1      	bgt.n	8005d42 <_printf_float+0x40e>
 8005d5e:	464b      	mov	r3, r9
 8005d60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d64:	e6dc      	b.n	8005b20 <_printf_float+0x1ec>
 8005d66:	f04f 0800 	mov.w	r8, #0
 8005d6a:	f104 0a1a 	add.w	sl, r4, #26
 8005d6e:	e7f2      	b.n	8005d56 <_printf_float+0x422>
 8005d70:	2301      	movs	r3, #1
 8005d72:	4642      	mov	r2, r8
 8005d74:	e7df      	b.n	8005d36 <_printf_float+0x402>
 8005d76:	2301      	movs	r3, #1
 8005d78:	464a      	mov	r2, r9
 8005d7a:	4631      	mov	r1, r6
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	47b8      	blx	r7
 8005d80:	3001      	adds	r0, #1
 8005d82:	f43f ae38 	beq.w	80059f6 <_printf_float+0xc2>
 8005d86:	f108 0801 	add.w	r8, r8, #1
 8005d8a:	68e3      	ldr	r3, [r4, #12]
 8005d8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d8e:	1a5b      	subs	r3, r3, r1
 8005d90:	4543      	cmp	r3, r8
 8005d92:	dcf0      	bgt.n	8005d76 <_printf_float+0x442>
 8005d94:	e6fa      	b.n	8005b8c <_printf_float+0x258>
 8005d96:	f04f 0800 	mov.w	r8, #0
 8005d9a:	f104 0919 	add.w	r9, r4, #25
 8005d9e:	e7f4      	b.n	8005d8a <_printf_float+0x456>

08005da0 <_printf_common>:
 8005da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da4:	4616      	mov	r6, r2
 8005da6:	4699      	mov	r9, r3
 8005da8:	688a      	ldr	r2, [r1, #8]
 8005daa:	690b      	ldr	r3, [r1, #16]
 8005dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005db0:	4293      	cmp	r3, r2
 8005db2:	bfb8      	it	lt
 8005db4:	4613      	movlt	r3, r2
 8005db6:	6033      	str	r3, [r6, #0]
 8005db8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dbc:	4607      	mov	r7, r0
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	b10a      	cbz	r2, 8005dc6 <_printf_common+0x26>
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	6033      	str	r3, [r6, #0]
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	0699      	lsls	r1, r3, #26
 8005dca:	bf42      	ittt	mi
 8005dcc:	6833      	ldrmi	r3, [r6, #0]
 8005dce:	3302      	addmi	r3, #2
 8005dd0:	6033      	strmi	r3, [r6, #0]
 8005dd2:	6825      	ldr	r5, [r4, #0]
 8005dd4:	f015 0506 	ands.w	r5, r5, #6
 8005dd8:	d106      	bne.n	8005de8 <_printf_common+0x48>
 8005dda:	f104 0a19 	add.w	sl, r4, #25
 8005dde:	68e3      	ldr	r3, [r4, #12]
 8005de0:	6832      	ldr	r2, [r6, #0]
 8005de2:	1a9b      	subs	r3, r3, r2
 8005de4:	42ab      	cmp	r3, r5
 8005de6:	dc26      	bgt.n	8005e36 <_printf_common+0x96>
 8005de8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dec:	1e13      	subs	r3, r2, #0
 8005dee:	6822      	ldr	r2, [r4, #0]
 8005df0:	bf18      	it	ne
 8005df2:	2301      	movne	r3, #1
 8005df4:	0692      	lsls	r2, r2, #26
 8005df6:	d42b      	bmi.n	8005e50 <_printf_common+0xb0>
 8005df8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dfc:	4649      	mov	r1, r9
 8005dfe:	4638      	mov	r0, r7
 8005e00:	47c0      	blx	r8
 8005e02:	3001      	adds	r0, #1
 8005e04:	d01e      	beq.n	8005e44 <_printf_common+0xa4>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	68e5      	ldr	r5, [r4, #12]
 8005e0a:	6832      	ldr	r2, [r6, #0]
 8005e0c:	f003 0306 	and.w	r3, r3, #6
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	bf08      	it	eq
 8005e14:	1aad      	subeq	r5, r5, r2
 8005e16:	68a3      	ldr	r3, [r4, #8]
 8005e18:	6922      	ldr	r2, [r4, #16]
 8005e1a:	bf0c      	ite	eq
 8005e1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e20:	2500      	movne	r5, #0
 8005e22:	4293      	cmp	r3, r2
 8005e24:	bfc4      	itt	gt
 8005e26:	1a9b      	subgt	r3, r3, r2
 8005e28:	18ed      	addgt	r5, r5, r3
 8005e2a:	2600      	movs	r6, #0
 8005e2c:	341a      	adds	r4, #26
 8005e2e:	42b5      	cmp	r5, r6
 8005e30:	d11a      	bne.n	8005e68 <_printf_common+0xc8>
 8005e32:	2000      	movs	r0, #0
 8005e34:	e008      	b.n	8005e48 <_printf_common+0xa8>
 8005e36:	2301      	movs	r3, #1
 8005e38:	4652      	mov	r2, sl
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	47c0      	blx	r8
 8005e40:	3001      	adds	r0, #1
 8005e42:	d103      	bne.n	8005e4c <_printf_common+0xac>
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295
 8005e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e4c:	3501      	adds	r5, #1
 8005e4e:	e7c6      	b.n	8005dde <_printf_common+0x3e>
 8005e50:	18e1      	adds	r1, r4, r3
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	2030      	movs	r0, #48	; 0x30
 8005e56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e5a:	4422      	add	r2, r4
 8005e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e64:	3302      	adds	r3, #2
 8005e66:	e7c7      	b.n	8005df8 <_printf_common+0x58>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	4638      	mov	r0, r7
 8005e70:	47c0      	blx	r8
 8005e72:	3001      	adds	r0, #1
 8005e74:	d0e6      	beq.n	8005e44 <_printf_common+0xa4>
 8005e76:	3601      	adds	r6, #1
 8005e78:	e7d9      	b.n	8005e2e <_printf_common+0x8e>
	...

08005e7c <_printf_i>:
 8005e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	7e0f      	ldrb	r7, [r1, #24]
 8005e82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e84:	2f78      	cmp	r7, #120	; 0x78
 8005e86:	4691      	mov	r9, r2
 8005e88:	4680      	mov	r8, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	469a      	mov	sl, r3
 8005e8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e92:	d807      	bhi.n	8005ea4 <_printf_i+0x28>
 8005e94:	2f62      	cmp	r7, #98	; 0x62
 8005e96:	d80a      	bhi.n	8005eae <_printf_i+0x32>
 8005e98:	2f00      	cmp	r7, #0
 8005e9a:	f000 80d8 	beq.w	800604e <_printf_i+0x1d2>
 8005e9e:	2f58      	cmp	r7, #88	; 0x58
 8005ea0:	f000 80a3 	beq.w	8005fea <_printf_i+0x16e>
 8005ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ea8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005eac:	e03a      	b.n	8005f24 <_printf_i+0xa8>
 8005eae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eb2:	2b15      	cmp	r3, #21
 8005eb4:	d8f6      	bhi.n	8005ea4 <_printf_i+0x28>
 8005eb6:	a101      	add	r1, pc, #4	; (adr r1, 8005ebc <_printf_i+0x40>)
 8005eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ebc:	08005f15 	.word	0x08005f15
 8005ec0:	08005f29 	.word	0x08005f29
 8005ec4:	08005ea5 	.word	0x08005ea5
 8005ec8:	08005ea5 	.word	0x08005ea5
 8005ecc:	08005ea5 	.word	0x08005ea5
 8005ed0:	08005ea5 	.word	0x08005ea5
 8005ed4:	08005f29 	.word	0x08005f29
 8005ed8:	08005ea5 	.word	0x08005ea5
 8005edc:	08005ea5 	.word	0x08005ea5
 8005ee0:	08005ea5 	.word	0x08005ea5
 8005ee4:	08005ea5 	.word	0x08005ea5
 8005ee8:	08006035 	.word	0x08006035
 8005eec:	08005f59 	.word	0x08005f59
 8005ef0:	08006017 	.word	0x08006017
 8005ef4:	08005ea5 	.word	0x08005ea5
 8005ef8:	08005ea5 	.word	0x08005ea5
 8005efc:	08006057 	.word	0x08006057
 8005f00:	08005ea5 	.word	0x08005ea5
 8005f04:	08005f59 	.word	0x08005f59
 8005f08:	08005ea5 	.word	0x08005ea5
 8005f0c:	08005ea5 	.word	0x08005ea5
 8005f10:	0800601f 	.word	0x0800601f
 8005f14:	682b      	ldr	r3, [r5, #0]
 8005f16:	1d1a      	adds	r2, r3, #4
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	602a      	str	r2, [r5, #0]
 8005f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f24:	2301      	movs	r3, #1
 8005f26:	e0a3      	b.n	8006070 <_printf_i+0x1f4>
 8005f28:	6820      	ldr	r0, [r4, #0]
 8005f2a:	6829      	ldr	r1, [r5, #0]
 8005f2c:	0606      	lsls	r6, r0, #24
 8005f2e:	f101 0304 	add.w	r3, r1, #4
 8005f32:	d50a      	bpl.n	8005f4a <_printf_i+0xce>
 8005f34:	680e      	ldr	r6, [r1, #0]
 8005f36:	602b      	str	r3, [r5, #0]
 8005f38:	2e00      	cmp	r6, #0
 8005f3a:	da03      	bge.n	8005f44 <_printf_i+0xc8>
 8005f3c:	232d      	movs	r3, #45	; 0x2d
 8005f3e:	4276      	negs	r6, r6
 8005f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f44:	485e      	ldr	r0, [pc, #376]	; (80060c0 <_printf_i+0x244>)
 8005f46:	230a      	movs	r3, #10
 8005f48:	e019      	b.n	8005f7e <_printf_i+0x102>
 8005f4a:	680e      	ldr	r6, [r1, #0]
 8005f4c:	602b      	str	r3, [r5, #0]
 8005f4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f52:	bf18      	it	ne
 8005f54:	b236      	sxthne	r6, r6
 8005f56:	e7ef      	b.n	8005f38 <_printf_i+0xbc>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	6820      	ldr	r0, [r4, #0]
 8005f5c:	1d19      	adds	r1, r3, #4
 8005f5e:	6029      	str	r1, [r5, #0]
 8005f60:	0601      	lsls	r1, r0, #24
 8005f62:	d501      	bpl.n	8005f68 <_printf_i+0xec>
 8005f64:	681e      	ldr	r6, [r3, #0]
 8005f66:	e002      	b.n	8005f6e <_printf_i+0xf2>
 8005f68:	0646      	lsls	r6, r0, #25
 8005f6a:	d5fb      	bpl.n	8005f64 <_printf_i+0xe8>
 8005f6c:	881e      	ldrh	r6, [r3, #0]
 8005f6e:	4854      	ldr	r0, [pc, #336]	; (80060c0 <_printf_i+0x244>)
 8005f70:	2f6f      	cmp	r7, #111	; 0x6f
 8005f72:	bf0c      	ite	eq
 8005f74:	2308      	moveq	r3, #8
 8005f76:	230a      	movne	r3, #10
 8005f78:	2100      	movs	r1, #0
 8005f7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f7e:	6865      	ldr	r5, [r4, #4]
 8005f80:	60a5      	str	r5, [r4, #8]
 8005f82:	2d00      	cmp	r5, #0
 8005f84:	bfa2      	ittt	ge
 8005f86:	6821      	ldrge	r1, [r4, #0]
 8005f88:	f021 0104 	bicge.w	r1, r1, #4
 8005f8c:	6021      	strge	r1, [r4, #0]
 8005f8e:	b90e      	cbnz	r6, 8005f94 <_printf_i+0x118>
 8005f90:	2d00      	cmp	r5, #0
 8005f92:	d04d      	beq.n	8006030 <_printf_i+0x1b4>
 8005f94:	4615      	mov	r5, r2
 8005f96:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f9a:	fb03 6711 	mls	r7, r3, r1, r6
 8005f9e:	5dc7      	ldrb	r7, [r0, r7]
 8005fa0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fa4:	4637      	mov	r7, r6
 8005fa6:	42bb      	cmp	r3, r7
 8005fa8:	460e      	mov	r6, r1
 8005faa:	d9f4      	bls.n	8005f96 <_printf_i+0x11a>
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d10b      	bne.n	8005fc8 <_printf_i+0x14c>
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	07de      	lsls	r6, r3, #31
 8005fb4:	d508      	bpl.n	8005fc8 <_printf_i+0x14c>
 8005fb6:	6923      	ldr	r3, [r4, #16]
 8005fb8:	6861      	ldr	r1, [r4, #4]
 8005fba:	4299      	cmp	r1, r3
 8005fbc:	bfde      	ittt	le
 8005fbe:	2330      	movle	r3, #48	; 0x30
 8005fc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fc8:	1b52      	subs	r2, r2, r5
 8005fca:	6122      	str	r2, [r4, #16]
 8005fcc:	f8cd a000 	str.w	sl, [sp]
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	aa03      	add	r2, sp, #12
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	f7ff fee2 	bl	8005da0 <_printf_common>
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d14c      	bne.n	800607a <_printf_i+0x1fe>
 8005fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe4:	b004      	add	sp, #16
 8005fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fea:	4835      	ldr	r0, [pc, #212]	; (80060c0 <_printf_i+0x244>)
 8005fec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ff0:	6829      	ldr	r1, [r5, #0]
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ff8:	6029      	str	r1, [r5, #0]
 8005ffa:	061d      	lsls	r5, r3, #24
 8005ffc:	d514      	bpl.n	8006028 <_printf_i+0x1ac>
 8005ffe:	07df      	lsls	r7, r3, #31
 8006000:	bf44      	itt	mi
 8006002:	f043 0320 	orrmi.w	r3, r3, #32
 8006006:	6023      	strmi	r3, [r4, #0]
 8006008:	b91e      	cbnz	r6, 8006012 <_printf_i+0x196>
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	f023 0320 	bic.w	r3, r3, #32
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	2310      	movs	r3, #16
 8006014:	e7b0      	b.n	8005f78 <_printf_i+0xfc>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	f043 0320 	orr.w	r3, r3, #32
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	2378      	movs	r3, #120	; 0x78
 8006020:	4828      	ldr	r0, [pc, #160]	; (80060c4 <_printf_i+0x248>)
 8006022:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006026:	e7e3      	b.n	8005ff0 <_printf_i+0x174>
 8006028:	0659      	lsls	r1, r3, #25
 800602a:	bf48      	it	mi
 800602c:	b2b6      	uxthmi	r6, r6
 800602e:	e7e6      	b.n	8005ffe <_printf_i+0x182>
 8006030:	4615      	mov	r5, r2
 8006032:	e7bb      	b.n	8005fac <_printf_i+0x130>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	6826      	ldr	r6, [r4, #0]
 8006038:	6961      	ldr	r1, [r4, #20]
 800603a:	1d18      	adds	r0, r3, #4
 800603c:	6028      	str	r0, [r5, #0]
 800603e:	0635      	lsls	r5, r6, #24
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	d501      	bpl.n	8006048 <_printf_i+0x1cc>
 8006044:	6019      	str	r1, [r3, #0]
 8006046:	e002      	b.n	800604e <_printf_i+0x1d2>
 8006048:	0670      	lsls	r0, r6, #25
 800604a:	d5fb      	bpl.n	8006044 <_printf_i+0x1c8>
 800604c:	8019      	strh	r1, [r3, #0]
 800604e:	2300      	movs	r3, #0
 8006050:	6123      	str	r3, [r4, #16]
 8006052:	4615      	mov	r5, r2
 8006054:	e7ba      	b.n	8005fcc <_printf_i+0x150>
 8006056:	682b      	ldr	r3, [r5, #0]
 8006058:	1d1a      	adds	r2, r3, #4
 800605a:	602a      	str	r2, [r5, #0]
 800605c:	681d      	ldr	r5, [r3, #0]
 800605e:	6862      	ldr	r2, [r4, #4]
 8006060:	2100      	movs	r1, #0
 8006062:	4628      	mov	r0, r5
 8006064:	f7fa f8dc 	bl	8000220 <memchr>
 8006068:	b108      	cbz	r0, 800606e <_printf_i+0x1f2>
 800606a:	1b40      	subs	r0, r0, r5
 800606c:	6060      	str	r0, [r4, #4]
 800606e:	6863      	ldr	r3, [r4, #4]
 8006070:	6123      	str	r3, [r4, #16]
 8006072:	2300      	movs	r3, #0
 8006074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006078:	e7a8      	b.n	8005fcc <_printf_i+0x150>
 800607a:	6923      	ldr	r3, [r4, #16]
 800607c:	462a      	mov	r2, r5
 800607e:	4649      	mov	r1, r9
 8006080:	4640      	mov	r0, r8
 8006082:	47d0      	blx	sl
 8006084:	3001      	adds	r0, #1
 8006086:	d0ab      	beq.n	8005fe0 <_printf_i+0x164>
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	079b      	lsls	r3, r3, #30
 800608c:	d413      	bmi.n	80060b6 <_printf_i+0x23a>
 800608e:	68e0      	ldr	r0, [r4, #12]
 8006090:	9b03      	ldr	r3, [sp, #12]
 8006092:	4298      	cmp	r0, r3
 8006094:	bfb8      	it	lt
 8006096:	4618      	movlt	r0, r3
 8006098:	e7a4      	b.n	8005fe4 <_printf_i+0x168>
 800609a:	2301      	movs	r3, #1
 800609c:	4632      	mov	r2, r6
 800609e:	4649      	mov	r1, r9
 80060a0:	4640      	mov	r0, r8
 80060a2:	47d0      	blx	sl
 80060a4:	3001      	adds	r0, #1
 80060a6:	d09b      	beq.n	8005fe0 <_printf_i+0x164>
 80060a8:	3501      	adds	r5, #1
 80060aa:	68e3      	ldr	r3, [r4, #12]
 80060ac:	9903      	ldr	r1, [sp, #12]
 80060ae:	1a5b      	subs	r3, r3, r1
 80060b0:	42ab      	cmp	r3, r5
 80060b2:	dcf2      	bgt.n	800609a <_printf_i+0x21e>
 80060b4:	e7eb      	b.n	800608e <_printf_i+0x212>
 80060b6:	2500      	movs	r5, #0
 80060b8:	f104 0619 	add.w	r6, r4, #25
 80060bc:	e7f5      	b.n	80060aa <_printf_i+0x22e>
 80060be:	bf00      	nop
 80060c0:	080090e4 	.word	0x080090e4
 80060c4:	080090f5 	.word	0x080090f5

080060c8 <siprintf>:
 80060c8:	b40e      	push	{r1, r2, r3}
 80060ca:	b500      	push	{lr}
 80060cc:	b09c      	sub	sp, #112	; 0x70
 80060ce:	ab1d      	add	r3, sp, #116	; 0x74
 80060d0:	9002      	str	r0, [sp, #8]
 80060d2:	9006      	str	r0, [sp, #24]
 80060d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060d8:	4809      	ldr	r0, [pc, #36]	; (8006100 <siprintf+0x38>)
 80060da:	9107      	str	r1, [sp, #28]
 80060dc:	9104      	str	r1, [sp, #16]
 80060de:	4909      	ldr	r1, [pc, #36]	; (8006104 <siprintf+0x3c>)
 80060e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80060e4:	9105      	str	r1, [sp, #20]
 80060e6:	6800      	ldr	r0, [r0, #0]
 80060e8:	9301      	str	r3, [sp, #4]
 80060ea:	a902      	add	r1, sp, #8
 80060ec:	f001 fc1c 	bl	8007928 <_svfiprintf_r>
 80060f0:	9b02      	ldr	r3, [sp, #8]
 80060f2:	2200      	movs	r2, #0
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	b01c      	add	sp, #112	; 0x70
 80060f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80060fc:	b003      	add	sp, #12
 80060fe:	4770      	bx	lr
 8006100:	2000000c 	.word	0x2000000c
 8006104:	ffff0208 	.word	0xffff0208

08006108 <siscanf>:
 8006108:	b40e      	push	{r1, r2, r3}
 800610a:	b510      	push	{r4, lr}
 800610c:	b09f      	sub	sp, #124	; 0x7c
 800610e:	ac21      	add	r4, sp, #132	; 0x84
 8006110:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006114:	f854 2b04 	ldr.w	r2, [r4], #4
 8006118:	9201      	str	r2, [sp, #4]
 800611a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800611e:	9004      	str	r0, [sp, #16]
 8006120:	9008      	str	r0, [sp, #32]
 8006122:	f7fa f86f 	bl	8000204 <strlen>
 8006126:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <siscanf+0x50>)
 8006128:	9005      	str	r0, [sp, #20]
 800612a:	9009      	str	r0, [sp, #36]	; 0x24
 800612c:	930d      	str	r3, [sp, #52]	; 0x34
 800612e:	480b      	ldr	r0, [pc, #44]	; (800615c <siscanf+0x54>)
 8006130:	9a01      	ldr	r2, [sp, #4]
 8006132:	6800      	ldr	r0, [r0, #0]
 8006134:	9403      	str	r4, [sp, #12]
 8006136:	2300      	movs	r3, #0
 8006138:	9311      	str	r3, [sp, #68]	; 0x44
 800613a:	9316      	str	r3, [sp, #88]	; 0x58
 800613c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006140:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006144:	a904      	add	r1, sp, #16
 8006146:	4623      	mov	r3, r4
 8006148:	f001 fd48 	bl	8007bdc <__ssvfiscanf_r>
 800614c:	b01f      	add	sp, #124	; 0x7c
 800614e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006152:	b003      	add	sp, #12
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	08006183 	.word	0x08006183
 800615c:	2000000c 	.word	0x2000000c

08006160 <__sread>:
 8006160:	b510      	push	{r4, lr}
 8006162:	460c      	mov	r4, r1
 8006164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006168:	f002 f802 	bl	8008170 <_read_r>
 800616c:	2800      	cmp	r0, #0
 800616e:	bfab      	itete	ge
 8006170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006172:	89a3      	ldrhlt	r3, [r4, #12]
 8006174:	181b      	addge	r3, r3, r0
 8006176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800617a:	bfac      	ite	ge
 800617c:	6563      	strge	r3, [r4, #84]	; 0x54
 800617e:	81a3      	strhlt	r3, [r4, #12]
 8006180:	bd10      	pop	{r4, pc}

08006182 <__seofread>:
 8006182:	2000      	movs	r0, #0
 8006184:	4770      	bx	lr

08006186 <__swrite>:
 8006186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800618a:	461f      	mov	r7, r3
 800618c:	898b      	ldrh	r3, [r1, #12]
 800618e:	05db      	lsls	r3, r3, #23
 8006190:	4605      	mov	r5, r0
 8006192:	460c      	mov	r4, r1
 8006194:	4616      	mov	r6, r2
 8006196:	d505      	bpl.n	80061a4 <__swrite+0x1e>
 8006198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800619c:	2302      	movs	r3, #2
 800619e:	2200      	movs	r2, #0
 80061a0:	f000 fec4 	bl	8006f2c <_lseek_r>
 80061a4:	89a3      	ldrh	r3, [r4, #12]
 80061a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ae:	81a3      	strh	r3, [r4, #12]
 80061b0:	4632      	mov	r2, r6
 80061b2:	463b      	mov	r3, r7
 80061b4:	4628      	mov	r0, r5
 80061b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061ba:	f000 b817 	b.w	80061ec <_write_r>

080061be <__sseek>:
 80061be:	b510      	push	{r4, lr}
 80061c0:	460c      	mov	r4, r1
 80061c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c6:	f000 feb1 	bl	8006f2c <_lseek_r>
 80061ca:	1c43      	adds	r3, r0, #1
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	bf15      	itete	ne
 80061d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80061d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061da:	81a3      	strheq	r3, [r4, #12]
 80061dc:	bf18      	it	ne
 80061de:	81a3      	strhne	r3, [r4, #12]
 80061e0:	bd10      	pop	{r4, pc}

080061e2 <__sclose>:
 80061e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e6:	f000 b813 	b.w	8006210 <_close_r>
	...

080061ec <_write_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4d07      	ldr	r5, [pc, #28]	; (800620c <_write_r+0x20>)
 80061f0:	4604      	mov	r4, r0
 80061f2:	4608      	mov	r0, r1
 80061f4:	4611      	mov	r1, r2
 80061f6:	2200      	movs	r2, #0
 80061f8:	602a      	str	r2, [r5, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	f7fb fc37 	bl	8001a6e <_write>
 8006200:	1c43      	adds	r3, r0, #1
 8006202:	d102      	bne.n	800620a <_write_r+0x1e>
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	b103      	cbz	r3, 800620a <_write_r+0x1e>
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	bd38      	pop	{r3, r4, r5, pc}
 800620c:	20000318 	.word	0x20000318

08006210 <_close_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4d06      	ldr	r5, [pc, #24]	; (800622c <_close_r+0x1c>)
 8006214:	2300      	movs	r3, #0
 8006216:	4604      	mov	r4, r0
 8006218:	4608      	mov	r0, r1
 800621a:	602b      	str	r3, [r5, #0]
 800621c:	f7fb fc43 	bl	8001aa6 <_close>
 8006220:	1c43      	adds	r3, r0, #1
 8006222:	d102      	bne.n	800622a <_close_r+0x1a>
 8006224:	682b      	ldr	r3, [r5, #0]
 8006226:	b103      	cbz	r3, 800622a <_close_r+0x1a>
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	bd38      	pop	{r3, r4, r5, pc}
 800622c:	20000318 	.word	0x20000318

08006230 <quorem>:
 8006230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006234:	6903      	ldr	r3, [r0, #16]
 8006236:	690c      	ldr	r4, [r1, #16]
 8006238:	42a3      	cmp	r3, r4
 800623a:	4607      	mov	r7, r0
 800623c:	f2c0 8081 	blt.w	8006342 <quorem+0x112>
 8006240:	3c01      	subs	r4, #1
 8006242:	f101 0814 	add.w	r8, r1, #20
 8006246:	f100 0514 	add.w	r5, r0, #20
 800624a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800624e:	9301      	str	r3, [sp, #4]
 8006250:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006254:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006258:	3301      	adds	r3, #1
 800625a:	429a      	cmp	r2, r3
 800625c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006260:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006264:	fbb2 f6f3 	udiv	r6, r2, r3
 8006268:	d331      	bcc.n	80062ce <quorem+0x9e>
 800626a:	f04f 0e00 	mov.w	lr, #0
 800626e:	4640      	mov	r0, r8
 8006270:	46ac      	mov	ip, r5
 8006272:	46f2      	mov	sl, lr
 8006274:	f850 2b04 	ldr.w	r2, [r0], #4
 8006278:	b293      	uxth	r3, r2
 800627a:	fb06 e303 	mla	r3, r6, r3, lr
 800627e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006282:	b29b      	uxth	r3, r3
 8006284:	ebaa 0303 	sub.w	r3, sl, r3
 8006288:	f8dc a000 	ldr.w	sl, [ip]
 800628c:	0c12      	lsrs	r2, r2, #16
 800628e:	fa13 f38a 	uxtah	r3, r3, sl
 8006292:	fb06 e202 	mla	r2, r6, r2, lr
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	9b00      	ldr	r3, [sp, #0]
 800629a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800629e:	b292      	uxth	r2, r2
 80062a0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80062a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062a8:	f8bd 3000 	ldrh.w	r3, [sp]
 80062ac:	4581      	cmp	r9, r0
 80062ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062b2:	f84c 3b04 	str.w	r3, [ip], #4
 80062b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80062ba:	d2db      	bcs.n	8006274 <quorem+0x44>
 80062bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80062c0:	b92b      	cbnz	r3, 80062ce <quorem+0x9e>
 80062c2:	9b01      	ldr	r3, [sp, #4]
 80062c4:	3b04      	subs	r3, #4
 80062c6:	429d      	cmp	r5, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	d32e      	bcc.n	800632a <quorem+0xfa>
 80062cc:	613c      	str	r4, [r7, #16]
 80062ce:	4638      	mov	r0, r7
 80062d0:	f001 f8d6 	bl	8007480 <__mcmp>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	db24      	blt.n	8006322 <quorem+0xf2>
 80062d8:	3601      	adds	r6, #1
 80062da:	4628      	mov	r0, r5
 80062dc:	f04f 0c00 	mov.w	ip, #0
 80062e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80062e4:	f8d0 e000 	ldr.w	lr, [r0]
 80062e8:	b293      	uxth	r3, r2
 80062ea:	ebac 0303 	sub.w	r3, ip, r3
 80062ee:	0c12      	lsrs	r2, r2, #16
 80062f0:	fa13 f38e 	uxtah	r3, r3, lr
 80062f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80062f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006302:	45c1      	cmp	r9, r8
 8006304:	f840 3b04 	str.w	r3, [r0], #4
 8006308:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800630c:	d2e8      	bcs.n	80062e0 <quorem+0xb0>
 800630e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006316:	b922      	cbnz	r2, 8006322 <quorem+0xf2>
 8006318:	3b04      	subs	r3, #4
 800631a:	429d      	cmp	r5, r3
 800631c:	461a      	mov	r2, r3
 800631e:	d30a      	bcc.n	8006336 <quorem+0x106>
 8006320:	613c      	str	r4, [r7, #16]
 8006322:	4630      	mov	r0, r6
 8006324:	b003      	add	sp, #12
 8006326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632a:	6812      	ldr	r2, [r2, #0]
 800632c:	3b04      	subs	r3, #4
 800632e:	2a00      	cmp	r2, #0
 8006330:	d1cc      	bne.n	80062cc <quorem+0x9c>
 8006332:	3c01      	subs	r4, #1
 8006334:	e7c7      	b.n	80062c6 <quorem+0x96>
 8006336:	6812      	ldr	r2, [r2, #0]
 8006338:	3b04      	subs	r3, #4
 800633a:	2a00      	cmp	r2, #0
 800633c:	d1f0      	bne.n	8006320 <quorem+0xf0>
 800633e:	3c01      	subs	r4, #1
 8006340:	e7eb      	b.n	800631a <quorem+0xea>
 8006342:	2000      	movs	r0, #0
 8006344:	e7ee      	b.n	8006324 <quorem+0xf4>
	...

08006348 <_dtoa_r>:
 8006348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634c:	ed2d 8b04 	vpush	{d8-d9}
 8006350:	ec57 6b10 	vmov	r6, r7, d0
 8006354:	b093      	sub	sp, #76	; 0x4c
 8006356:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006358:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800635c:	9106      	str	r1, [sp, #24]
 800635e:	ee10 aa10 	vmov	sl, s0
 8006362:	4604      	mov	r4, r0
 8006364:	9209      	str	r2, [sp, #36]	; 0x24
 8006366:	930c      	str	r3, [sp, #48]	; 0x30
 8006368:	46bb      	mov	fp, r7
 800636a:	b975      	cbnz	r5, 800638a <_dtoa_r+0x42>
 800636c:	2010      	movs	r0, #16
 800636e:	f000 fdef 	bl	8006f50 <malloc>
 8006372:	4602      	mov	r2, r0
 8006374:	6260      	str	r0, [r4, #36]	; 0x24
 8006376:	b920      	cbnz	r0, 8006382 <_dtoa_r+0x3a>
 8006378:	4ba7      	ldr	r3, [pc, #668]	; (8006618 <_dtoa_r+0x2d0>)
 800637a:	21ea      	movs	r1, #234	; 0xea
 800637c:	48a7      	ldr	r0, [pc, #668]	; (800661c <_dtoa_r+0x2d4>)
 800637e:	f002 f883 	bl	8008488 <__assert_func>
 8006382:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006386:	6005      	str	r5, [r0, #0]
 8006388:	60c5      	str	r5, [r0, #12]
 800638a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800638c:	6819      	ldr	r1, [r3, #0]
 800638e:	b151      	cbz	r1, 80063a6 <_dtoa_r+0x5e>
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	604a      	str	r2, [r1, #4]
 8006394:	2301      	movs	r3, #1
 8006396:	4093      	lsls	r3, r2
 8006398:	608b      	str	r3, [r1, #8]
 800639a:	4620      	mov	r0, r4
 800639c:	f000 fe2e 	bl	8006ffc <_Bfree>
 80063a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	1e3b      	subs	r3, r7, #0
 80063a8:	bfaa      	itet	ge
 80063aa:	2300      	movge	r3, #0
 80063ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80063b0:	f8c8 3000 	strge.w	r3, [r8]
 80063b4:	4b9a      	ldr	r3, [pc, #616]	; (8006620 <_dtoa_r+0x2d8>)
 80063b6:	bfbc      	itt	lt
 80063b8:	2201      	movlt	r2, #1
 80063ba:	f8c8 2000 	strlt.w	r2, [r8]
 80063be:	ea33 030b 	bics.w	r3, r3, fp
 80063c2:	d11b      	bne.n	80063fc <_dtoa_r+0xb4>
 80063c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063d0:	4333      	orrs	r3, r6
 80063d2:	f000 8592 	beq.w	8006efa <_dtoa_r+0xbb2>
 80063d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063d8:	b963      	cbnz	r3, 80063f4 <_dtoa_r+0xac>
 80063da:	4b92      	ldr	r3, [pc, #584]	; (8006624 <_dtoa_r+0x2dc>)
 80063dc:	e022      	b.n	8006424 <_dtoa_r+0xdc>
 80063de:	4b92      	ldr	r3, [pc, #584]	; (8006628 <_dtoa_r+0x2e0>)
 80063e0:	9301      	str	r3, [sp, #4]
 80063e2:	3308      	adds	r3, #8
 80063e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	9801      	ldr	r0, [sp, #4]
 80063ea:	b013      	add	sp, #76	; 0x4c
 80063ec:	ecbd 8b04 	vpop	{d8-d9}
 80063f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f4:	4b8b      	ldr	r3, [pc, #556]	; (8006624 <_dtoa_r+0x2dc>)
 80063f6:	9301      	str	r3, [sp, #4]
 80063f8:	3303      	adds	r3, #3
 80063fa:	e7f3      	b.n	80063e4 <_dtoa_r+0x9c>
 80063fc:	2200      	movs	r2, #0
 80063fe:	2300      	movs	r3, #0
 8006400:	4650      	mov	r0, sl
 8006402:	4659      	mov	r1, fp
 8006404:	f7fa fb80 	bl	8000b08 <__aeabi_dcmpeq>
 8006408:	ec4b ab19 	vmov	d9, sl, fp
 800640c:	4680      	mov	r8, r0
 800640e:	b158      	cbz	r0, 8006428 <_dtoa_r+0xe0>
 8006410:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006412:	2301      	movs	r3, #1
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 856b 	beq.w	8006ef4 <_dtoa_r+0xbac>
 800641e:	4883      	ldr	r0, [pc, #524]	; (800662c <_dtoa_r+0x2e4>)
 8006420:	6018      	str	r0, [r3, #0]
 8006422:	1e43      	subs	r3, r0, #1
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	e7df      	b.n	80063e8 <_dtoa_r+0xa0>
 8006428:	ec4b ab10 	vmov	d0, sl, fp
 800642c:	aa10      	add	r2, sp, #64	; 0x40
 800642e:	a911      	add	r1, sp, #68	; 0x44
 8006430:	4620      	mov	r0, r4
 8006432:	f001 f8cb 	bl	80075cc <__d2b>
 8006436:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800643a:	ee08 0a10 	vmov	s16, r0
 800643e:	2d00      	cmp	r5, #0
 8006440:	f000 8084 	beq.w	800654c <_dtoa_r+0x204>
 8006444:	ee19 3a90 	vmov	r3, s19
 8006448:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800644c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006450:	4656      	mov	r6, sl
 8006452:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006456:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800645a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800645e:	4b74      	ldr	r3, [pc, #464]	; (8006630 <_dtoa_r+0x2e8>)
 8006460:	2200      	movs	r2, #0
 8006462:	4630      	mov	r0, r6
 8006464:	4639      	mov	r1, r7
 8006466:	f7f9 ff2f 	bl	80002c8 <__aeabi_dsub>
 800646a:	a365      	add	r3, pc, #404	; (adr r3, 8006600 <_dtoa_r+0x2b8>)
 800646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006470:	f7fa f8e2 	bl	8000638 <__aeabi_dmul>
 8006474:	a364      	add	r3, pc, #400	; (adr r3, 8006608 <_dtoa_r+0x2c0>)
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	f7f9 ff27 	bl	80002cc <__adddf3>
 800647e:	4606      	mov	r6, r0
 8006480:	4628      	mov	r0, r5
 8006482:	460f      	mov	r7, r1
 8006484:	f7fa f86e 	bl	8000564 <__aeabi_i2d>
 8006488:	a361      	add	r3, pc, #388	; (adr r3, 8006610 <_dtoa_r+0x2c8>)
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	f7fa f8d3 	bl	8000638 <__aeabi_dmul>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	4630      	mov	r0, r6
 8006498:	4639      	mov	r1, r7
 800649a:	f7f9 ff17 	bl	80002cc <__adddf3>
 800649e:	4606      	mov	r6, r0
 80064a0:	460f      	mov	r7, r1
 80064a2:	f7fa fb79 	bl	8000b98 <__aeabi_d2iz>
 80064a6:	2200      	movs	r2, #0
 80064a8:	9000      	str	r0, [sp, #0]
 80064aa:	2300      	movs	r3, #0
 80064ac:	4630      	mov	r0, r6
 80064ae:	4639      	mov	r1, r7
 80064b0:	f7fa fb34 	bl	8000b1c <__aeabi_dcmplt>
 80064b4:	b150      	cbz	r0, 80064cc <_dtoa_r+0x184>
 80064b6:	9800      	ldr	r0, [sp, #0]
 80064b8:	f7fa f854 	bl	8000564 <__aeabi_i2d>
 80064bc:	4632      	mov	r2, r6
 80064be:	463b      	mov	r3, r7
 80064c0:	f7fa fb22 	bl	8000b08 <__aeabi_dcmpeq>
 80064c4:	b910      	cbnz	r0, 80064cc <_dtoa_r+0x184>
 80064c6:	9b00      	ldr	r3, [sp, #0]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	9b00      	ldr	r3, [sp, #0]
 80064ce:	2b16      	cmp	r3, #22
 80064d0:	d85a      	bhi.n	8006588 <_dtoa_r+0x240>
 80064d2:	9a00      	ldr	r2, [sp, #0]
 80064d4:	4b57      	ldr	r3, [pc, #348]	; (8006634 <_dtoa_r+0x2ec>)
 80064d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	ec51 0b19 	vmov	r0, r1, d9
 80064e2:	f7fa fb1b 	bl	8000b1c <__aeabi_dcmplt>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d050      	beq.n	800658c <_dtoa_r+0x244>
 80064ea:	9b00      	ldr	r3, [sp, #0]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	2300      	movs	r3, #0
 80064f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80064f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064f6:	1b5d      	subs	r5, r3, r5
 80064f8:	1e6b      	subs	r3, r5, #1
 80064fa:	9305      	str	r3, [sp, #20]
 80064fc:	bf45      	ittet	mi
 80064fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8006502:	9304      	strmi	r3, [sp, #16]
 8006504:	2300      	movpl	r3, #0
 8006506:	2300      	movmi	r3, #0
 8006508:	bf4c      	ite	mi
 800650a:	9305      	strmi	r3, [sp, #20]
 800650c:	9304      	strpl	r3, [sp, #16]
 800650e:	9b00      	ldr	r3, [sp, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	db3d      	blt.n	8006590 <_dtoa_r+0x248>
 8006514:	9b05      	ldr	r3, [sp, #20]
 8006516:	9a00      	ldr	r2, [sp, #0]
 8006518:	920a      	str	r2, [sp, #40]	; 0x28
 800651a:	4413      	add	r3, r2
 800651c:	9305      	str	r3, [sp, #20]
 800651e:	2300      	movs	r3, #0
 8006520:	9307      	str	r3, [sp, #28]
 8006522:	9b06      	ldr	r3, [sp, #24]
 8006524:	2b09      	cmp	r3, #9
 8006526:	f200 8089 	bhi.w	800663c <_dtoa_r+0x2f4>
 800652a:	2b05      	cmp	r3, #5
 800652c:	bfc4      	itt	gt
 800652e:	3b04      	subgt	r3, #4
 8006530:	9306      	strgt	r3, [sp, #24]
 8006532:	9b06      	ldr	r3, [sp, #24]
 8006534:	f1a3 0302 	sub.w	r3, r3, #2
 8006538:	bfcc      	ite	gt
 800653a:	2500      	movgt	r5, #0
 800653c:	2501      	movle	r5, #1
 800653e:	2b03      	cmp	r3, #3
 8006540:	f200 8087 	bhi.w	8006652 <_dtoa_r+0x30a>
 8006544:	e8df f003 	tbb	[pc, r3]
 8006548:	59383a2d 	.word	0x59383a2d
 800654c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006550:	441d      	add	r5, r3
 8006552:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006556:	2b20      	cmp	r3, #32
 8006558:	bfc1      	itttt	gt
 800655a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800655e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006562:	fa0b f303 	lslgt.w	r3, fp, r3
 8006566:	fa26 f000 	lsrgt.w	r0, r6, r0
 800656a:	bfda      	itte	le
 800656c:	f1c3 0320 	rsble	r3, r3, #32
 8006570:	fa06 f003 	lslle.w	r0, r6, r3
 8006574:	4318      	orrgt	r0, r3
 8006576:	f7f9 ffe5 	bl	8000544 <__aeabi_ui2d>
 800657a:	2301      	movs	r3, #1
 800657c:	4606      	mov	r6, r0
 800657e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006582:	3d01      	subs	r5, #1
 8006584:	930e      	str	r3, [sp, #56]	; 0x38
 8006586:	e76a      	b.n	800645e <_dtoa_r+0x116>
 8006588:	2301      	movs	r3, #1
 800658a:	e7b2      	b.n	80064f2 <_dtoa_r+0x1aa>
 800658c:	900b      	str	r0, [sp, #44]	; 0x2c
 800658e:	e7b1      	b.n	80064f4 <_dtoa_r+0x1ac>
 8006590:	9b04      	ldr	r3, [sp, #16]
 8006592:	9a00      	ldr	r2, [sp, #0]
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	9304      	str	r3, [sp, #16]
 8006598:	4253      	negs	r3, r2
 800659a:	9307      	str	r3, [sp, #28]
 800659c:	2300      	movs	r3, #0
 800659e:	930a      	str	r3, [sp, #40]	; 0x28
 80065a0:	e7bf      	b.n	8006522 <_dtoa_r+0x1da>
 80065a2:	2300      	movs	r3, #0
 80065a4:	9308      	str	r3, [sp, #32]
 80065a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	dc55      	bgt.n	8006658 <_dtoa_r+0x310>
 80065ac:	2301      	movs	r3, #1
 80065ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80065b2:	461a      	mov	r2, r3
 80065b4:	9209      	str	r2, [sp, #36]	; 0x24
 80065b6:	e00c      	b.n	80065d2 <_dtoa_r+0x28a>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e7f3      	b.n	80065a4 <_dtoa_r+0x25c>
 80065bc:	2300      	movs	r3, #0
 80065be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065c0:	9308      	str	r3, [sp, #32]
 80065c2:	9b00      	ldr	r3, [sp, #0]
 80065c4:	4413      	add	r3, r2
 80065c6:	9302      	str	r3, [sp, #8]
 80065c8:	3301      	adds	r3, #1
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	9303      	str	r3, [sp, #12]
 80065ce:	bfb8      	it	lt
 80065d0:	2301      	movlt	r3, #1
 80065d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80065d4:	2200      	movs	r2, #0
 80065d6:	6042      	str	r2, [r0, #4]
 80065d8:	2204      	movs	r2, #4
 80065da:	f102 0614 	add.w	r6, r2, #20
 80065de:	429e      	cmp	r6, r3
 80065e0:	6841      	ldr	r1, [r0, #4]
 80065e2:	d93d      	bls.n	8006660 <_dtoa_r+0x318>
 80065e4:	4620      	mov	r0, r4
 80065e6:	f000 fcc9 	bl	8006f7c <_Balloc>
 80065ea:	9001      	str	r0, [sp, #4]
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d13b      	bne.n	8006668 <_dtoa_r+0x320>
 80065f0:	4b11      	ldr	r3, [pc, #68]	; (8006638 <_dtoa_r+0x2f0>)
 80065f2:	4602      	mov	r2, r0
 80065f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80065f8:	e6c0      	b.n	800637c <_dtoa_r+0x34>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e7df      	b.n	80065be <_dtoa_r+0x276>
 80065fe:	bf00      	nop
 8006600:	636f4361 	.word	0x636f4361
 8006604:	3fd287a7 	.word	0x3fd287a7
 8006608:	8b60c8b3 	.word	0x8b60c8b3
 800660c:	3fc68a28 	.word	0x3fc68a28
 8006610:	509f79fb 	.word	0x509f79fb
 8006614:	3fd34413 	.word	0x3fd34413
 8006618:	08009113 	.word	0x08009113
 800661c:	0800912a 	.word	0x0800912a
 8006620:	7ff00000 	.word	0x7ff00000
 8006624:	0800910f 	.word	0x0800910f
 8006628:	08009106 	.word	0x08009106
 800662c:	0800930a 	.word	0x0800930a
 8006630:	3ff80000 	.word	0x3ff80000
 8006634:	08009220 	.word	0x08009220
 8006638:	08009185 	.word	0x08009185
 800663c:	2501      	movs	r5, #1
 800663e:	2300      	movs	r3, #0
 8006640:	9306      	str	r3, [sp, #24]
 8006642:	9508      	str	r5, [sp, #32]
 8006644:	f04f 33ff 	mov.w	r3, #4294967295
 8006648:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800664c:	2200      	movs	r2, #0
 800664e:	2312      	movs	r3, #18
 8006650:	e7b0      	b.n	80065b4 <_dtoa_r+0x26c>
 8006652:	2301      	movs	r3, #1
 8006654:	9308      	str	r3, [sp, #32]
 8006656:	e7f5      	b.n	8006644 <_dtoa_r+0x2fc>
 8006658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800665a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800665e:	e7b8      	b.n	80065d2 <_dtoa_r+0x28a>
 8006660:	3101      	adds	r1, #1
 8006662:	6041      	str	r1, [r0, #4]
 8006664:	0052      	lsls	r2, r2, #1
 8006666:	e7b8      	b.n	80065da <_dtoa_r+0x292>
 8006668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800666a:	9a01      	ldr	r2, [sp, #4]
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	9b03      	ldr	r3, [sp, #12]
 8006670:	2b0e      	cmp	r3, #14
 8006672:	f200 809d 	bhi.w	80067b0 <_dtoa_r+0x468>
 8006676:	2d00      	cmp	r5, #0
 8006678:	f000 809a 	beq.w	80067b0 <_dtoa_r+0x468>
 800667c:	9b00      	ldr	r3, [sp, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	dd32      	ble.n	80066e8 <_dtoa_r+0x3a0>
 8006682:	4ab7      	ldr	r2, [pc, #732]	; (8006960 <_dtoa_r+0x618>)
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800668c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006690:	9b00      	ldr	r3, [sp, #0]
 8006692:	05d8      	lsls	r0, r3, #23
 8006694:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006698:	d516      	bpl.n	80066c8 <_dtoa_r+0x380>
 800669a:	4bb2      	ldr	r3, [pc, #712]	; (8006964 <_dtoa_r+0x61c>)
 800669c:	ec51 0b19 	vmov	r0, r1, d9
 80066a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066a4:	f7fa f8f2 	bl	800088c <__aeabi_ddiv>
 80066a8:	f007 070f 	and.w	r7, r7, #15
 80066ac:	4682      	mov	sl, r0
 80066ae:	468b      	mov	fp, r1
 80066b0:	2503      	movs	r5, #3
 80066b2:	4eac      	ldr	r6, [pc, #688]	; (8006964 <_dtoa_r+0x61c>)
 80066b4:	b957      	cbnz	r7, 80066cc <_dtoa_r+0x384>
 80066b6:	4642      	mov	r2, r8
 80066b8:	464b      	mov	r3, r9
 80066ba:	4650      	mov	r0, sl
 80066bc:	4659      	mov	r1, fp
 80066be:	f7fa f8e5 	bl	800088c <__aeabi_ddiv>
 80066c2:	4682      	mov	sl, r0
 80066c4:	468b      	mov	fp, r1
 80066c6:	e028      	b.n	800671a <_dtoa_r+0x3d2>
 80066c8:	2502      	movs	r5, #2
 80066ca:	e7f2      	b.n	80066b2 <_dtoa_r+0x36a>
 80066cc:	07f9      	lsls	r1, r7, #31
 80066ce:	d508      	bpl.n	80066e2 <_dtoa_r+0x39a>
 80066d0:	4640      	mov	r0, r8
 80066d2:	4649      	mov	r1, r9
 80066d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066d8:	f7f9 ffae 	bl	8000638 <__aeabi_dmul>
 80066dc:	3501      	adds	r5, #1
 80066de:	4680      	mov	r8, r0
 80066e0:	4689      	mov	r9, r1
 80066e2:	107f      	asrs	r7, r7, #1
 80066e4:	3608      	adds	r6, #8
 80066e6:	e7e5      	b.n	80066b4 <_dtoa_r+0x36c>
 80066e8:	f000 809b 	beq.w	8006822 <_dtoa_r+0x4da>
 80066ec:	9b00      	ldr	r3, [sp, #0]
 80066ee:	4f9d      	ldr	r7, [pc, #628]	; (8006964 <_dtoa_r+0x61c>)
 80066f0:	425e      	negs	r6, r3
 80066f2:	4b9b      	ldr	r3, [pc, #620]	; (8006960 <_dtoa_r+0x618>)
 80066f4:	f006 020f 	and.w	r2, r6, #15
 80066f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	ec51 0b19 	vmov	r0, r1, d9
 8006704:	f7f9 ff98 	bl	8000638 <__aeabi_dmul>
 8006708:	1136      	asrs	r6, r6, #4
 800670a:	4682      	mov	sl, r0
 800670c:	468b      	mov	fp, r1
 800670e:	2300      	movs	r3, #0
 8006710:	2502      	movs	r5, #2
 8006712:	2e00      	cmp	r6, #0
 8006714:	d17a      	bne.n	800680c <_dtoa_r+0x4c4>
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1d3      	bne.n	80066c2 <_dtoa_r+0x37a>
 800671a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8082 	beq.w	8006826 <_dtoa_r+0x4de>
 8006722:	4b91      	ldr	r3, [pc, #580]	; (8006968 <_dtoa_r+0x620>)
 8006724:	2200      	movs	r2, #0
 8006726:	4650      	mov	r0, sl
 8006728:	4659      	mov	r1, fp
 800672a:	f7fa f9f7 	bl	8000b1c <__aeabi_dcmplt>
 800672e:	2800      	cmp	r0, #0
 8006730:	d079      	beq.n	8006826 <_dtoa_r+0x4de>
 8006732:	9b03      	ldr	r3, [sp, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d076      	beq.n	8006826 <_dtoa_r+0x4de>
 8006738:	9b02      	ldr	r3, [sp, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	dd36      	ble.n	80067ac <_dtoa_r+0x464>
 800673e:	9b00      	ldr	r3, [sp, #0]
 8006740:	4650      	mov	r0, sl
 8006742:	4659      	mov	r1, fp
 8006744:	1e5f      	subs	r7, r3, #1
 8006746:	2200      	movs	r2, #0
 8006748:	4b88      	ldr	r3, [pc, #544]	; (800696c <_dtoa_r+0x624>)
 800674a:	f7f9 ff75 	bl	8000638 <__aeabi_dmul>
 800674e:	9e02      	ldr	r6, [sp, #8]
 8006750:	4682      	mov	sl, r0
 8006752:	468b      	mov	fp, r1
 8006754:	3501      	adds	r5, #1
 8006756:	4628      	mov	r0, r5
 8006758:	f7f9 ff04 	bl	8000564 <__aeabi_i2d>
 800675c:	4652      	mov	r2, sl
 800675e:	465b      	mov	r3, fp
 8006760:	f7f9 ff6a 	bl	8000638 <__aeabi_dmul>
 8006764:	4b82      	ldr	r3, [pc, #520]	; (8006970 <_dtoa_r+0x628>)
 8006766:	2200      	movs	r2, #0
 8006768:	f7f9 fdb0 	bl	80002cc <__adddf3>
 800676c:	46d0      	mov	r8, sl
 800676e:	46d9      	mov	r9, fp
 8006770:	4682      	mov	sl, r0
 8006772:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006776:	2e00      	cmp	r6, #0
 8006778:	d158      	bne.n	800682c <_dtoa_r+0x4e4>
 800677a:	4b7e      	ldr	r3, [pc, #504]	; (8006974 <_dtoa_r+0x62c>)
 800677c:	2200      	movs	r2, #0
 800677e:	4640      	mov	r0, r8
 8006780:	4649      	mov	r1, r9
 8006782:	f7f9 fda1 	bl	80002c8 <__aeabi_dsub>
 8006786:	4652      	mov	r2, sl
 8006788:	465b      	mov	r3, fp
 800678a:	4680      	mov	r8, r0
 800678c:	4689      	mov	r9, r1
 800678e:	f7fa f9e3 	bl	8000b58 <__aeabi_dcmpgt>
 8006792:	2800      	cmp	r0, #0
 8006794:	f040 8295 	bne.w	8006cc2 <_dtoa_r+0x97a>
 8006798:	4652      	mov	r2, sl
 800679a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800679e:	4640      	mov	r0, r8
 80067a0:	4649      	mov	r1, r9
 80067a2:	f7fa f9bb 	bl	8000b1c <__aeabi_dcmplt>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	f040 8289 	bne.w	8006cbe <_dtoa_r+0x976>
 80067ac:	ec5b ab19 	vmov	sl, fp, d9
 80067b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f2c0 8148 	blt.w	8006a48 <_dtoa_r+0x700>
 80067b8:	9a00      	ldr	r2, [sp, #0]
 80067ba:	2a0e      	cmp	r2, #14
 80067bc:	f300 8144 	bgt.w	8006a48 <_dtoa_r+0x700>
 80067c0:	4b67      	ldr	r3, [pc, #412]	; (8006960 <_dtoa_r+0x618>)
 80067c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f280 80d5 	bge.w	800697c <_dtoa_r+0x634>
 80067d2:	9b03      	ldr	r3, [sp, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f300 80d1 	bgt.w	800697c <_dtoa_r+0x634>
 80067da:	f040 826f 	bne.w	8006cbc <_dtoa_r+0x974>
 80067de:	4b65      	ldr	r3, [pc, #404]	; (8006974 <_dtoa_r+0x62c>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	4640      	mov	r0, r8
 80067e4:	4649      	mov	r1, r9
 80067e6:	f7f9 ff27 	bl	8000638 <__aeabi_dmul>
 80067ea:	4652      	mov	r2, sl
 80067ec:	465b      	mov	r3, fp
 80067ee:	f7fa f9a9 	bl	8000b44 <__aeabi_dcmpge>
 80067f2:	9e03      	ldr	r6, [sp, #12]
 80067f4:	4637      	mov	r7, r6
 80067f6:	2800      	cmp	r0, #0
 80067f8:	f040 8245 	bne.w	8006c86 <_dtoa_r+0x93e>
 80067fc:	9d01      	ldr	r5, [sp, #4]
 80067fe:	2331      	movs	r3, #49	; 0x31
 8006800:	f805 3b01 	strb.w	r3, [r5], #1
 8006804:	9b00      	ldr	r3, [sp, #0]
 8006806:	3301      	adds	r3, #1
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	e240      	b.n	8006c8e <_dtoa_r+0x946>
 800680c:	07f2      	lsls	r2, r6, #31
 800680e:	d505      	bpl.n	800681c <_dtoa_r+0x4d4>
 8006810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006814:	f7f9 ff10 	bl	8000638 <__aeabi_dmul>
 8006818:	3501      	adds	r5, #1
 800681a:	2301      	movs	r3, #1
 800681c:	1076      	asrs	r6, r6, #1
 800681e:	3708      	adds	r7, #8
 8006820:	e777      	b.n	8006712 <_dtoa_r+0x3ca>
 8006822:	2502      	movs	r5, #2
 8006824:	e779      	b.n	800671a <_dtoa_r+0x3d2>
 8006826:	9f00      	ldr	r7, [sp, #0]
 8006828:	9e03      	ldr	r6, [sp, #12]
 800682a:	e794      	b.n	8006756 <_dtoa_r+0x40e>
 800682c:	9901      	ldr	r1, [sp, #4]
 800682e:	4b4c      	ldr	r3, [pc, #304]	; (8006960 <_dtoa_r+0x618>)
 8006830:	4431      	add	r1, r6
 8006832:	910d      	str	r1, [sp, #52]	; 0x34
 8006834:	9908      	ldr	r1, [sp, #32]
 8006836:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800683a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800683e:	2900      	cmp	r1, #0
 8006840:	d043      	beq.n	80068ca <_dtoa_r+0x582>
 8006842:	494d      	ldr	r1, [pc, #308]	; (8006978 <_dtoa_r+0x630>)
 8006844:	2000      	movs	r0, #0
 8006846:	f7fa f821 	bl	800088c <__aeabi_ddiv>
 800684a:	4652      	mov	r2, sl
 800684c:	465b      	mov	r3, fp
 800684e:	f7f9 fd3b 	bl	80002c8 <__aeabi_dsub>
 8006852:	9d01      	ldr	r5, [sp, #4]
 8006854:	4682      	mov	sl, r0
 8006856:	468b      	mov	fp, r1
 8006858:	4649      	mov	r1, r9
 800685a:	4640      	mov	r0, r8
 800685c:	f7fa f99c 	bl	8000b98 <__aeabi_d2iz>
 8006860:	4606      	mov	r6, r0
 8006862:	f7f9 fe7f 	bl	8000564 <__aeabi_i2d>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4640      	mov	r0, r8
 800686c:	4649      	mov	r1, r9
 800686e:	f7f9 fd2b 	bl	80002c8 <__aeabi_dsub>
 8006872:	3630      	adds	r6, #48	; 0x30
 8006874:	f805 6b01 	strb.w	r6, [r5], #1
 8006878:	4652      	mov	r2, sl
 800687a:	465b      	mov	r3, fp
 800687c:	4680      	mov	r8, r0
 800687e:	4689      	mov	r9, r1
 8006880:	f7fa f94c 	bl	8000b1c <__aeabi_dcmplt>
 8006884:	2800      	cmp	r0, #0
 8006886:	d163      	bne.n	8006950 <_dtoa_r+0x608>
 8006888:	4642      	mov	r2, r8
 800688a:	464b      	mov	r3, r9
 800688c:	4936      	ldr	r1, [pc, #216]	; (8006968 <_dtoa_r+0x620>)
 800688e:	2000      	movs	r0, #0
 8006890:	f7f9 fd1a 	bl	80002c8 <__aeabi_dsub>
 8006894:	4652      	mov	r2, sl
 8006896:	465b      	mov	r3, fp
 8006898:	f7fa f940 	bl	8000b1c <__aeabi_dcmplt>
 800689c:	2800      	cmp	r0, #0
 800689e:	f040 80b5 	bne.w	8006a0c <_dtoa_r+0x6c4>
 80068a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068a4:	429d      	cmp	r5, r3
 80068a6:	d081      	beq.n	80067ac <_dtoa_r+0x464>
 80068a8:	4b30      	ldr	r3, [pc, #192]	; (800696c <_dtoa_r+0x624>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	4650      	mov	r0, sl
 80068ae:	4659      	mov	r1, fp
 80068b0:	f7f9 fec2 	bl	8000638 <__aeabi_dmul>
 80068b4:	4b2d      	ldr	r3, [pc, #180]	; (800696c <_dtoa_r+0x624>)
 80068b6:	4682      	mov	sl, r0
 80068b8:	468b      	mov	fp, r1
 80068ba:	4640      	mov	r0, r8
 80068bc:	4649      	mov	r1, r9
 80068be:	2200      	movs	r2, #0
 80068c0:	f7f9 feba 	bl	8000638 <__aeabi_dmul>
 80068c4:	4680      	mov	r8, r0
 80068c6:	4689      	mov	r9, r1
 80068c8:	e7c6      	b.n	8006858 <_dtoa_r+0x510>
 80068ca:	4650      	mov	r0, sl
 80068cc:	4659      	mov	r1, fp
 80068ce:	f7f9 feb3 	bl	8000638 <__aeabi_dmul>
 80068d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068d4:	9d01      	ldr	r5, [sp, #4]
 80068d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80068d8:	4682      	mov	sl, r0
 80068da:	468b      	mov	fp, r1
 80068dc:	4649      	mov	r1, r9
 80068de:	4640      	mov	r0, r8
 80068e0:	f7fa f95a 	bl	8000b98 <__aeabi_d2iz>
 80068e4:	4606      	mov	r6, r0
 80068e6:	f7f9 fe3d 	bl	8000564 <__aeabi_i2d>
 80068ea:	3630      	adds	r6, #48	; 0x30
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4640      	mov	r0, r8
 80068f2:	4649      	mov	r1, r9
 80068f4:	f7f9 fce8 	bl	80002c8 <__aeabi_dsub>
 80068f8:	f805 6b01 	strb.w	r6, [r5], #1
 80068fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068fe:	429d      	cmp	r5, r3
 8006900:	4680      	mov	r8, r0
 8006902:	4689      	mov	r9, r1
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	d124      	bne.n	8006954 <_dtoa_r+0x60c>
 800690a:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <_dtoa_r+0x630>)
 800690c:	4650      	mov	r0, sl
 800690e:	4659      	mov	r1, fp
 8006910:	f7f9 fcdc 	bl	80002cc <__adddf3>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	4640      	mov	r0, r8
 800691a:	4649      	mov	r1, r9
 800691c:	f7fa f91c 	bl	8000b58 <__aeabi_dcmpgt>
 8006920:	2800      	cmp	r0, #0
 8006922:	d173      	bne.n	8006a0c <_dtoa_r+0x6c4>
 8006924:	4652      	mov	r2, sl
 8006926:	465b      	mov	r3, fp
 8006928:	4913      	ldr	r1, [pc, #76]	; (8006978 <_dtoa_r+0x630>)
 800692a:	2000      	movs	r0, #0
 800692c:	f7f9 fccc 	bl	80002c8 <__aeabi_dsub>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	4640      	mov	r0, r8
 8006936:	4649      	mov	r1, r9
 8006938:	f7fa f8f0 	bl	8000b1c <__aeabi_dcmplt>
 800693c:	2800      	cmp	r0, #0
 800693e:	f43f af35 	beq.w	80067ac <_dtoa_r+0x464>
 8006942:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006944:	1e6b      	subs	r3, r5, #1
 8006946:	930f      	str	r3, [sp, #60]	; 0x3c
 8006948:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800694c:	2b30      	cmp	r3, #48	; 0x30
 800694e:	d0f8      	beq.n	8006942 <_dtoa_r+0x5fa>
 8006950:	9700      	str	r7, [sp, #0]
 8006952:	e049      	b.n	80069e8 <_dtoa_r+0x6a0>
 8006954:	4b05      	ldr	r3, [pc, #20]	; (800696c <_dtoa_r+0x624>)
 8006956:	f7f9 fe6f 	bl	8000638 <__aeabi_dmul>
 800695a:	4680      	mov	r8, r0
 800695c:	4689      	mov	r9, r1
 800695e:	e7bd      	b.n	80068dc <_dtoa_r+0x594>
 8006960:	08009220 	.word	0x08009220
 8006964:	080091f8 	.word	0x080091f8
 8006968:	3ff00000 	.word	0x3ff00000
 800696c:	40240000 	.word	0x40240000
 8006970:	401c0000 	.word	0x401c0000
 8006974:	40140000 	.word	0x40140000
 8006978:	3fe00000 	.word	0x3fe00000
 800697c:	9d01      	ldr	r5, [sp, #4]
 800697e:	4656      	mov	r6, sl
 8006980:	465f      	mov	r7, fp
 8006982:	4642      	mov	r2, r8
 8006984:	464b      	mov	r3, r9
 8006986:	4630      	mov	r0, r6
 8006988:	4639      	mov	r1, r7
 800698a:	f7f9 ff7f 	bl	800088c <__aeabi_ddiv>
 800698e:	f7fa f903 	bl	8000b98 <__aeabi_d2iz>
 8006992:	4682      	mov	sl, r0
 8006994:	f7f9 fde6 	bl	8000564 <__aeabi_i2d>
 8006998:	4642      	mov	r2, r8
 800699a:	464b      	mov	r3, r9
 800699c:	f7f9 fe4c 	bl	8000638 <__aeabi_dmul>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4630      	mov	r0, r6
 80069a6:	4639      	mov	r1, r7
 80069a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80069ac:	f7f9 fc8c 	bl	80002c8 <__aeabi_dsub>
 80069b0:	f805 6b01 	strb.w	r6, [r5], #1
 80069b4:	9e01      	ldr	r6, [sp, #4]
 80069b6:	9f03      	ldr	r7, [sp, #12]
 80069b8:	1bae      	subs	r6, r5, r6
 80069ba:	42b7      	cmp	r7, r6
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	d135      	bne.n	8006a2e <_dtoa_r+0x6e6>
 80069c2:	f7f9 fc83 	bl	80002cc <__adddf3>
 80069c6:	4642      	mov	r2, r8
 80069c8:	464b      	mov	r3, r9
 80069ca:	4606      	mov	r6, r0
 80069cc:	460f      	mov	r7, r1
 80069ce:	f7fa f8c3 	bl	8000b58 <__aeabi_dcmpgt>
 80069d2:	b9d0      	cbnz	r0, 8006a0a <_dtoa_r+0x6c2>
 80069d4:	4642      	mov	r2, r8
 80069d6:	464b      	mov	r3, r9
 80069d8:	4630      	mov	r0, r6
 80069da:	4639      	mov	r1, r7
 80069dc:	f7fa f894 	bl	8000b08 <__aeabi_dcmpeq>
 80069e0:	b110      	cbz	r0, 80069e8 <_dtoa_r+0x6a0>
 80069e2:	f01a 0f01 	tst.w	sl, #1
 80069e6:	d110      	bne.n	8006a0a <_dtoa_r+0x6c2>
 80069e8:	4620      	mov	r0, r4
 80069ea:	ee18 1a10 	vmov	r1, s16
 80069ee:	f000 fb05 	bl	8006ffc <_Bfree>
 80069f2:	2300      	movs	r3, #0
 80069f4:	9800      	ldr	r0, [sp, #0]
 80069f6:	702b      	strb	r3, [r5, #0]
 80069f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069fa:	3001      	adds	r0, #1
 80069fc:	6018      	str	r0, [r3, #0]
 80069fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f43f acf1 	beq.w	80063e8 <_dtoa_r+0xa0>
 8006a06:	601d      	str	r5, [r3, #0]
 8006a08:	e4ee      	b.n	80063e8 <_dtoa_r+0xa0>
 8006a0a:	9f00      	ldr	r7, [sp, #0]
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	461d      	mov	r5, r3
 8006a10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a14:	2a39      	cmp	r2, #57	; 0x39
 8006a16:	d106      	bne.n	8006a26 <_dtoa_r+0x6de>
 8006a18:	9a01      	ldr	r2, [sp, #4]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d1f7      	bne.n	8006a0e <_dtoa_r+0x6c6>
 8006a1e:	9901      	ldr	r1, [sp, #4]
 8006a20:	2230      	movs	r2, #48	; 0x30
 8006a22:	3701      	adds	r7, #1
 8006a24:	700a      	strb	r2, [r1, #0]
 8006a26:	781a      	ldrb	r2, [r3, #0]
 8006a28:	3201      	adds	r2, #1
 8006a2a:	701a      	strb	r2, [r3, #0]
 8006a2c:	e790      	b.n	8006950 <_dtoa_r+0x608>
 8006a2e:	4ba6      	ldr	r3, [pc, #664]	; (8006cc8 <_dtoa_r+0x980>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	f7f9 fe01 	bl	8000638 <__aeabi_dmul>
 8006a36:	2200      	movs	r2, #0
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	460f      	mov	r7, r1
 8006a3e:	f7fa f863 	bl	8000b08 <__aeabi_dcmpeq>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d09d      	beq.n	8006982 <_dtoa_r+0x63a>
 8006a46:	e7cf      	b.n	80069e8 <_dtoa_r+0x6a0>
 8006a48:	9a08      	ldr	r2, [sp, #32]
 8006a4a:	2a00      	cmp	r2, #0
 8006a4c:	f000 80d7 	beq.w	8006bfe <_dtoa_r+0x8b6>
 8006a50:	9a06      	ldr	r2, [sp, #24]
 8006a52:	2a01      	cmp	r2, #1
 8006a54:	f300 80ba 	bgt.w	8006bcc <_dtoa_r+0x884>
 8006a58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a5a:	2a00      	cmp	r2, #0
 8006a5c:	f000 80b2 	beq.w	8006bc4 <_dtoa_r+0x87c>
 8006a60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a64:	9e07      	ldr	r6, [sp, #28]
 8006a66:	9d04      	ldr	r5, [sp, #16]
 8006a68:	9a04      	ldr	r2, [sp, #16]
 8006a6a:	441a      	add	r2, r3
 8006a6c:	9204      	str	r2, [sp, #16]
 8006a6e:	9a05      	ldr	r2, [sp, #20]
 8006a70:	2101      	movs	r1, #1
 8006a72:	441a      	add	r2, r3
 8006a74:	4620      	mov	r0, r4
 8006a76:	9205      	str	r2, [sp, #20]
 8006a78:	f000 fb78 	bl	800716c <__i2b>
 8006a7c:	4607      	mov	r7, r0
 8006a7e:	2d00      	cmp	r5, #0
 8006a80:	dd0c      	ble.n	8006a9c <_dtoa_r+0x754>
 8006a82:	9b05      	ldr	r3, [sp, #20]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dd09      	ble.n	8006a9c <_dtoa_r+0x754>
 8006a88:	42ab      	cmp	r3, r5
 8006a8a:	9a04      	ldr	r2, [sp, #16]
 8006a8c:	bfa8      	it	ge
 8006a8e:	462b      	movge	r3, r5
 8006a90:	1ad2      	subs	r2, r2, r3
 8006a92:	9204      	str	r2, [sp, #16]
 8006a94:	9a05      	ldr	r2, [sp, #20]
 8006a96:	1aed      	subs	r5, r5, r3
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	9305      	str	r3, [sp, #20]
 8006a9c:	9b07      	ldr	r3, [sp, #28]
 8006a9e:	b31b      	cbz	r3, 8006ae8 <_dtoa_r+0x7a0>
 8006aa0:	9b08      	ldr	r3, [sp, #32]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 80af 	beq.w	8006c06 <_dtoa_r+0x8be>
 8006aa8:	2e00      	cmp	r6, #0
 8006aaa:	dd13      	ble.n	8006ad4 <_dtoa_r+0x78c>
 8006aac:	4639      	mov	r1, r7
 8006aae:	4632      	mov	r2, r6
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f000 fc1b 	bl	80072ec <__pow5mult>
 8006ab6:	ee18 2a10 	vmov	r2, s16
 8006aba:	4601      	mov	r1, r0
 8006abc:	4607      	mov	r7, r0
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f000 fb6a 	bl	8007198 <__multiply>
 8006ac4:	ee18 1a10 	vmov	r1, s16
 8006ac8:	4680      	mov	r8, r0
 8006aca:	4620      	mov	r0, r4
 8006acc:	f000 fa96 	bl	8006ffc <_Bfree>
 8006ad0:	ee08 8a10 	vmov	s16, r8
 8006ad4:	9b07      	ldr	r3, [sp, #28]
 8006ad6:	1b9a      	subs	r2, r3, r6
 8006ad8:	d006      	beq.n	8006ae8 <_dtoa_r+0x7a0>
 8006ada:	ee18 1a10 	vmov	r1, s16
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f000 fc04 	bl	80072ec <__pow5mult>
 8006ae4:	ee08 0a10 	vmov	s16, r0
 8006ae8:	2101      	movs	r1, #1
 8006aea:	4620      	mov	r0, r4
 8006aec:	f000 fb3e 	bl	800716c <__i2b>
 8006af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	4606      	mov	r6, r0
 8006af6:	f340 8088 	ble.w	8006c0a <_dtoa_r+0x8c2>
 8006afa:	461a      	mov	r2, r3
 8006afc:	4601      	mov	r1, r0
 8006afe:	4620      	mov	r0, r4
 8006b00:	f000 fbf4 	bl	80072ec <__pow5mult>
 8006b04:	9b06      	ldr	r3, [sp, #24]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	4606      	mov	r6, r0
 8006b0a:	f340 8081 	ble.w	8006c10 <_dtoa_r+0x8c8>
 8006b0e:	f04f 0800 	mov.w	r8, #0
 8006b12:	6933      	ldr	r3, [r6, #16]
 8006b14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b18:	6918      	ldr	r0, [r3, #16]
 8006b1a:	f000 fad7 	bl	80070cc <__hi0bits>
 8006b1e:	f1c0 0020 	rsb	r0, r0, #32
 8006b22:	9b05      	ldr	r3, [sp, #20]
 8006b24:	4418      	add	r0, r3
 8006b26:	f010 001f 	ands.w	r0, r0, #31
 8006b2a:	f000 8092 	beq.w	8006c52 <_dtoa_r+0x90a>
 8006b2e:	f1c0 0320 	rsb	r3, r0, #32
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	f340 808a 	ble.w	8006c4c <_dtoa_r+0x904>
 8006b38:	f1c0 001c 	rsb	r0, r0, #28
 8006b3c:	9b04      	ldr	r3, [sp, #16]
 8006b3e:	4403      	add	r3, r0
 8006b40:	9304      	str	r3, [sp, #16]
 8006b42:	9b05      	ldr	r3, [sp, #20]
 8006b44:	4403      	add	r3, r0
 8006b46:	4405      	add	r5, r0
 8006b48:	9305      	str	r3, [sp, #20]
 8006b4a:	9b04      	ldr	r3, [sp, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	dd07      	ble.n	8006b60 <_dtoa_r+0x818>
 8006b50:	ee18 1a10 	vmov	r1, s16
 8006b54:	461a      	mov	r2, r3
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 fc22 	bl	80073a0 <__lshift>
 8006b5c:	ee08 0a10 	vmov	s16, r0
 8006b60:	9b05      	ldr	r3, [sp, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	dd05      	ble.n	8006b72 <_dtoa_r+0x82a>
 8006b66:	4631      	mov	r1, r6
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 fc18 	bl	80073a0 <__lshift>
 8006b70:	4606      	mov	r6, r0
 8006b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d06e      	beq.n	8006c56 <_dtoa_r+0x90e>
 8006b78:	ee18 0a10 	vmov	r0, s16
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	f000 fc7f 	bl	8007480 <__mcmp>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	da67      	bge.n	8006c56 <_dtoa_r+0x90e>
 8006b86:	9b00      	ldr	r3, [sp, #0]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	ee18 1a10 	vmov	r1, s16
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	220a      	movs	r2, #10
 8006b92:	2300      	movs	r3, #0
 8006b94:	4620      	mov	r0, r4
 8006b96:	f000 fa53 	bl	8007040 <__multadd>
 8006b9a:	9b08      	ldr	r3, [sp, #32]
 8006b9c:	ee08 0a10 	vmov	s16, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 81b1 	beq.w	8006f08 <_dtoa_r+0xbc0>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	4639      	mov	r1, r7
 8006baa:	220a      	movs	r2, #10
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 fa47 	bl	8007040 <__multadd>
 8006bb2:	9b02      	ldr	r3, [sp, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	4607      	mov	r7, r0
 8006bb8:	f300 808e 	bgt.w	8006cd8 <_dtoa_r+0x990>
 8006bbc:	9b06      	ldr	r3, [sp, #24]
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	dc51      	bgt.n	8006c66 <_dtoa_r+0x91e>
 8006bc2:	e089      	b.n	8006cd8 <_dtoa_r+0x990>
 8006bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006bca:	e74b      	b.n	8006a64 <_dtoa_r+0x71c>
 8006bcc:	9b03      	ldr	r3, [sp, #12]
 8006bce:	1e5e      	subs	r6, r3, #1
 8006bd0:	9b07      	ldr	r3, [sp, #28]
 8006bd2:	42b3      	cmp	r3, r6
 8006bd4:	bfbf      	itttt	lt
 8006bd6:	9b07      	ldrlt	r3, [sp, #28]
 8006bd8:	9607      	strlt	r6, [sp, #28]
 8006bda:	1af2      	sublt	r2, r6, r3
 8006bdc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006bde:	bfb6      	itet	lt
 8006be0:	189b      	addlt	r3, r3, r2
 8006be2:	1b9e      	subge	r6, r3, r6
 8006be4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006be6:	9b03      	ldr	r3, [sp, #12]
 8006be8:	bfb8      	it	lt
 8006bea:	2600      	movlt	r6, #0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bfb7      	itett	lt
 8006bf0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006bf4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006bf8:	1a9d      	sublt	r5, r3, r2
 8006bfa:	2300      	movlt	r3, #0
 8006bfc:	e734      	b.n	8006a68 <_dtoa_r+0x720>
 8006bfe:	9e07      	ldr	r6, [sp, #28]
 8006c00:	9d04      	ldr	r5, [sp, #16]
 8006c02:	9f08      	ldr	r7, [sp, #32]
 8006c04:	e73b      	b.n	8006a7e <_dtoa_r+0x736>
 8006c06:	9a07      	ldr	r2, [sp, #28]
 8006c08:	e767      	b.n	8006ada <_dtoa_r+0x792>
 8006c0a:	9b06      	ldr	r3, [sp, #24]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	dc18      	bgt.n	8006c42 <_dtoa_r+0x8fa>
 8006c10:	f1ba 0f00 	cmp.w	sl, #0
 8006c14:	d115      	bne.n	8006c42 <_dtoa_r+0x8fa>
 8006c16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c1a:	b993      	cbnz	r3, 8006c42 <_dtoa_r+0x8fa>
 8006c1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c20:	0d1b      	lsrs	r3, r3, #20
 8006c22:	051b      	lsls	r3, r3, #20
 8006c24:	b183      	cbz	r3, 8006c48 <_dtoa_r+0x900>
 8006c26:	9b04      	ldr	r3, [sp, #16]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	9304      	str	r3, [sp, #16]
 8006c2c:	9b05      	ldr	r3, [sp, #20]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	9305      	str	r3, [sp, #20]
 8006c32:	f04f 0801 	mov.w	r8, #1
 8006c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f47f af6a 	bne.w	8006b12 <_dtoa_r+0x7ca>
 8006c3e:	2001      	movs	r0, #1
 8006c40:	e76f      	b.n	8006b22 <_dtoa_r+0x7da>
 8006c42:	f04f 0800 	mov.w	r8, #0
 8006c46:	e7f6      	b.n	8006c36 <_dtoa_r+0x8ee>
 8006c48:	4698      	mov	r8, r3
 8006c4a:	e7f4      	b.n	8006c36 <_dtoa_r+0x8ee>
 8006c4c:	f43f af7d 	beq.w	8006b4a <_dtoa_r+0x802>
 8006c50:	4618      	mov	r0, r3
 8006c52:	301c      	adds	r0, #28
 8006c54:	e772      	b.n	8006b3c <_dtoa_r+0x7f4>
 8006c56:	9b03      	ldr	r3, [sp, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	dc37      	bgt.n	8006ccc <_dtoa_r+0x984>
 8006c5c:	9b06      	ldr	r3, [sp, #24]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	dd34      	ble.n	8006ccc <_dtoa_r+0x984>
 8006c62:	9b03      	ldr	r3, [sp, #12]
 8006c64:	9302      	str	r3, [sp, #8]
 8006c66:	9b02      	ldr	r3, [sp, #8]
 8006c68:	b96b      	cbnz	r3, 8006c86 <_dtoa_r+0x93e>
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	2205      	movs	r2, #5
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 f9e6 	bl	8007040 <__multadd>
 8006c74:	4601      	mov	r1, r0
 8006c76:	4606      	mov	r6, r0
 8006c78:	ee18 0a10 	vmov	r0, s16
 8006c7c:	f000 fc00 	bl	8007480 <__mcmp>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	f73f adbb 	bgt.w	80067fc <_dtoa_r+0x4b4>
 8006c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c88:	9d01      	ldr	r5, [sp, #4]
 8006c8a:	43db      	mvns	r3, r3
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	f04f 0800 	mov.w	r8, #0
 8006c92:	4631      	mov	r1, r6
 8006c94:	4620      	mov	r0, r4
 8006c96:	f000 f9b1 	bl	8006ffc <_Bfree>
 8006c9a:	2f00      	cmp	r7, #0
 8006c9c:	f43f aea4 	beq.w	80069e8 <_dtoa_r+0x6a0>
 8006ca0:	f1b8 0f00 	cmp.w	r8, #0
 8006ca4:	d005      	beq.n	8006cb2 <_dtoa_r+0x96a>
 8006ca6:	45b8      	cmp	r8, r7
 8006ca8:	d003      	beq.n	8006cb2 <_dtoa_r+0x96a>
 8006caa:	4641      	mov	r1, r8
 8006cac:	4620      	mov	r0, r4
 8006cae:	f000 f9a5 	bl	8006ffc <_Bfree>
 8006cb2:	4639      	mov	r1, r7
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f000 f9a1 	bl	8006ffc <_Bfree>
 8006cba:	e695      	b.n	80069e8 <_dtoa_r+0x6a0>
 8006cbc:	2600      	movs	r6, #0
 8006cbe:	4637      	mov	r7, r6
 8006cc0:	e7e1      	b.n	8006c86 <_dtoa_r+0x93e>
 8006cc2:	9700      	str	r7, [sp, #0]
 8006cc4:	4637      	mov	r7, r6
 8006cc6:	e599      	b.n	80067fc <_dtoa_r+0x4b4>
 8006cc8:	40240000 	.word	0x40240000
 8006ccc:	9b08      	ldr	r3, [sp, #32]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 80ca 	beq.w	8006e68 <_dtoa_r+0xb20>
 8006cd4:	9b03      	ldr	r3, [sp, #12]
 8006cd6:	9302      	str	r3, [sp, #8]
 8006cd8:	2d00      	cmp	r5, #0
 8006cda:	dd05      	ble.n	8006ce8 <_dtoa_r+0x9a0>
 8006cdc:	4639      	mov	r1, r7
 8006cde:	462a      	mov	r2, r5
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f000 fb5d 	bl	80073a0 <__lshift>
 8006ce6:	4607      	mov	r7, r0
 8006ce8:	f1b8 0f00 	cmp.w	r8, #0
 8006cec:	d05b      	beq.n	8006da6 <_dtoa_r+0xa5e>
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f000 f943 	bl	8006f7c <_Balloc>
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	b928      	cbnz	r0, 8006d06 <_dtoa_r+0x9be>
 8006cfa:	4b87      	ldr	r3, [pc, #540]	; (8006f18 <_dtoa_r+0xbd0>)
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d02:	f7ff bb3b 	b.w	800637c <_dtoa_r+0x34>
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	3202      	adds	r2, #2
 8006d0a:	0092      	lsls	r2, r2, #2
 8006d0c:	f107 010c 	add.w	r1, r7, #12
 8006d10:	300c      	adds	r0, #12
 8006d12:	f000 f925 	bl	8006f60 <memcpy>
 8006d16:	2201      	movs	r2, #1
 8006d18:	4629      	mov	r1, r5
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 fb40 	bl	80073a0 <__lshift>
 8006d20:	9b01      	ldr	r3, [sp, #4]
 8006d22:	f103 0901 	add.w	r9, r3, #1
 8006d26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	9305      	str	r3, [sp, #20]
 8006d2e:	f00a 0301 	and.w	r3, sl, #1
 8006d32:	46b8      	mov	r8, r7
 8006d34:	9304      	str	r3, [sp, #16]
 8006d36:	4607      	mov	r7, r0
 8006d38:	4631      	mov	r1, r6
 8006d3a:	ee18 0a10 	vmov	r0, s16
 8006d3e:	f7ff fa77 	bl	8006230 <quorem>
 8006d42:	4641      	mov	r1, r8
 8006d44:	9002      	str	r0, [sp, #8]
 8006d46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d4a:	ee18 0a10 	vmov	r0, s16
 8006d4e:	f000 fb97 	bl	8007480 <__mcmp>
 8006d52:	463a      	mov	r2, r7
 8006d54:	9003      	str	r0, [sp, #12]
 8006d56:	4631      	mov	r1, r6
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f000 fbad 	bl	80074b8 <__mdiff>
 8006d5e:	68c2      	ldr	r2, [r0, #12]
 8006d60:	f109 3bff 	add.w	fp, r9, #4294967295
 8006d64:	4605      	mov	r5, r0
 8006d66:	bb02      	cbnz	r2, 8006daa <_dtoa_r+0xa62>
 8006d68:	4601      	mov	r1, r0
 8006d6a:	ee18 0a10 	vmov	r0, s16
 8006d6e:	f000 fb87 	bl	8007480 <__mcmp>
 8006d72:	4602      	mov	r2, r0
 8006d74:	4629      	mov	r1, r5
 8006d76:	4620      	mov	r0, r4
 8006d78:	9207      	str	r2, [sp, #28]
 8006d7a:	f000 f93f 	bl	8006ffc <_Bfree>
 8006d7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006d82:	ea43 0102 	orr.w	r1, r3, r2
 8006d86:	9b04      	ldr	r3, [sp, #16]
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	464d      	mov	r5, r9
 8006d8c:	d10f      	bne.n	8006dae <_dtoa_r+0xa66>
 8006d8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d92:	d02a      	beq.n	8006dea <_dtoa_r+0xaa2>
 8006d94:	9b03      	ldr	r3, [sp, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	dd02      	ble.n	8006da0 <_dtoa_r+0xa58>
 8006d9a:	9b02      	ldr	r3, [sp, #8]
 8006d9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006da0:	f88b a000 	strb.w	sl, [fp]
 8006da4:	e775      	b.n	8006c92 <_dtoa_r+0x94a>
 8006da6:	4638      	mov	r0, r7
 8006da8:	e7ba      	b.n	8006d20 <_dtoa_r+0x9d8>
 8006daa:	2201      	movs	r2, #1
 8006dac:	e7e2      	b.n	8006d74 <_dtoa_r+0xa2c>
 8006dae:	9b03      	ldr	r3, [sp, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	db04      	blt.n	8006dbe <_dtoa_r+0xa76>
 8006db4:	9906      	ldr	r1, [sp, #24]
 8006db6:	430b      	orrs	r3, r1
 8006db8:	9904      	ldr	r1, [sp, #16]
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	d122      	bne.n	8006e04 <_dtoa_r+0xabc>
 8006dbe:	2a00      	cmp	r2, #0
 8006dc0:	ddee      	ble.n	8006da0 <_dtoa_r+0xa58>
 8006dc2:	ee18 1a10 	vmov	r1, s16
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 fae9 	bl	80073a0 <__lshift>
 8006dce:	4631      	mov	r1, r6
 8006dd0:	ee08 0a10 	vmov	s16, r0
 8006dd4:	f000 fb54 	bl	8007480 <__mcmp>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	dc03      	bgt.n	8006de4 <_dtoa_r+0xa9c>
 8006ddc:	d1e0      	bne.n	8006da0 <_dtoa_r+0xa58>
 8006dde:	f01a 0f01 	tst.w	sl, #1
 8006de2:	d0dd      	beq.n	8006da0 <_dtoa_r+0xa58>
 8006de4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006de8:	d1d7      	bne.n	8006d9a <_dtoa_r+0xa52>
 8006dea:	2339      	movs	r3, #57	; 0x39
 8006dec:	f88b 3000 	strb.w	r3, [fp]
 8006df0:	462b      	mov	r3, r5
 8006df2:	461d      	mov	r5, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006dfa:	2a39      	cmp	r2, #57	; 0x39
 8006dfc:	d071      	beq.n	8006ee2 <_dtoa_r+0xb9a>
 8006dfe:	3201      	adds	r2, #1
 8006e00:	701a      	strb	r2, [r3, #0]
 8006e02:	e746      	b.n	8006c92 <_dtoa_r+0x94a>
 8006e04:	2a00      	cmp	r2, #0
 8006e06:	dd07      	ble.n	8006e18 <_dtoa_r+0xad0>
 8006e08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e0c:	d0ed      	beq.n	8006dea <_dtoa_r+0xaa2>
 8006e0e:	f10a 0301 	add.w	r3, sl, #1
 8006e12:	f88b 3000 	strb.w	r3, [fp]
 8006e16:	e73c      	b.n	8006c92 <_dtoa_r+0x94a>
 8006e18:	9b05      	ldr	r3, [sp, #20]
 8006e1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006e1e:	4599      	cmp	r9, r3
 8006e20:	d047      	beq.n	8006eb2 <_dtoa_r+0xb6a>
 8006e22:	ee18 1a10 	vmov	r1, s16
 8006e26:	2300      	movs	r3, #0
 8006e28:	220a      	movs	r2, #10
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f000 f908 	bl	8007040 <__multadd>
 8006e30:	45b8      	cmp	r8, r7
 8006e32:	ee08 0a10 	vmov	s16, r0
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	f04f 020a 	mov.w	r2, #10
 8006e3e:	4641      	mov	r1, r8
 8006e40:	4620      	mov	r0, r4
 8006e42:	d106      	bne.n	8006e52 <_dtoa_r+0xb0a>
 8006e44:	f000 f8fc 	bl	8007040 <__multadd>
 8006e48:	4680      	mov	r8, r0
 8006e4a:	4607      	mov	r7, r0
 8006e4c:	f109 0901 	add.w	r9, r9, #1
 8006e50:	e772      	b.n	8006d38 <_dtoa_r+0x9f0>
 8006e52:	f000 f8f5 	bl	8007040 <__multadd>
 8006e56:	4639      	mov	r1, r7
 8006e58:	4680      	mov	r8, r0
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	220a      	movs	r2, #10
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f000 f8ee 	bl	8007040 <__multadd>
 8006e64:	4607      	mov	r7, r0
 8006e66:	e7f1      	b.n	8006e4c <_dtoa_r+0xb04>
 8006e68:	9b03      	ldr	r3, [sp, #12]
 8006e6a:	9302      	str	r3, [sp, #8]
 8006e6c:	9d01      	ldr	r5, [sp, #4]
 8006e6e:	ee18 0a10 	vmov	r0, s16
 8006e72:	4631      	mov	r1, r6
 8006e74:	f7ff f9dc 	bl	8006230 <quorem>
 8006e78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e7c:	9b01      	ldr	r3, [sp, #4]
 8006e7e:	f805 ab01 	strb.w	sl, [r5], #1
 8006e82:	1aea      	subs	r2, r5, r3
 8006e84:	9b02      	ldr	r3, [sp, #8]
 8006e86:	4293      	cmp	r3, r2
 8006e88:	dd09      	ble.n	8006e9e <_dtoa_r+0xb56>
 8006e8a:	ee18 1a10 	vmov	r1, s16
 8006e8e:	2300      	movs	r3, #0
 8006e90:	220a      	movs	r2, #10
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 f8d4 	bl	8007040 <__multadd>
 8006e98:	ee08 0a10 	vmov	s16, r0
 8006e9c:	e7e7      	b.n	8006e6e <_dtoa_r+0xb26>
 8006e9e:	9b02      	ldr	r3, [sp, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	bfc8      	it	gt
 8006ea4:	461d      	movgt	r5, r3
 8006ea6:	9b01      	ldr	r3, [sp, #4]
 8006ea8:	bfd8      	it	le
 8006eaa:	2501      	movle	r5, #1
 8006eac:	441d      	add	r5, r3
 8006eae:	f04f 0800 	mov.w	r8, #0
 8006eb2:	ee18 1a10 	vmov	r1, s16
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f000 fa71 	bl	80073a0 <__lshift>
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	ee08 0a10 	vmov	s16, r0
 8006ec4:	f000 fadc 	bl	8007480 <__mcmp>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	dc91      	bgt.n	8006df0 <_dtoa_r+0xaa8>
 8006ecc:	d102      	bne.n	8006ed4 <_dtoa_r+0xb8c>
 8006ece:	f01a 0f01 	tst.w	sl, #1
 8006ed2:	d18d      	bne.n	8006df0 <_dtoa_r+0xaa8>
 8006ed4:	462b      	mov	r3, r5
 8006ed6:	461d      	mov	r5, r3
 8006ed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006edc:	2a30      	cmp	r2, #48	; 0x30
 8006ede:	d0fa      	beq.n	8006ed6 <_dtoa_r+0xb8e>
 8006ee0:	e6d7      	b.n	8006c92 <_dtoa_r+0x94a>
 8006ee2:	9a01      	ldr	r2, [sp, #4]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d184      	bne.n	8006df2 <_dtoa_r+0xaaa>
 8006ee8:	9b00      	ldr	r3, [sp, #0]
 8006eea:	3301      	adds	r3, #1
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	2331      	movs	r3, #49	; 0x31
 8006ef0:	7013      	strb	r3, [r2, #0]
 8006ef2:	e6ce      	b.n	8006c92 <_dtoa_r+0x94a>
 8006ef4:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <_dtoa_r+0xbd4>)
 8006ef6:	f7ff ba95 	b.w	8006424 <_dtoa_r+0xdc>
 8006efa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f47f aa6e 	bne.w	80063de <_dtoa_r+0x96>
 8006f02:	4b07      	ldr	r3, [pc, #28]	; (8006f20 <_dtoa_r+0xbd8>)
 8006f04:	f7ff ba8e 	b.w	8006424 <_dtoa_r+0xdc>
 8006f08:	9b02      	ldr	r3, [sp, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	dcae      	bgt.n	8006e6c <_dtoa_r+0xb24>
 8006f0e:	9b06      	ldr	r3, [sp, #24]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	f73f aea8 	bgt.w	8006c66 <_dtoa_r+0x91e>
 8006f16:	e7a9      	b.n	8006e6c <_dtoa_r+0xb24>
 8006f18:	08009185 	.word	0x08009185
 8006f1c:	08009309 	.word	0x08009309
 8006f20:	08009106 	.word	0x08009106

08006f24 <_localeconv_r>:
 8006f24:	4800      	ldr	r0, [pc, #0]	; (8006f28 <_localeconv_r+0x4>)
 8006f26:	4770      	bx	lr
 8006f28:	20000160 	.word	0x20000160

08006f2c <_lseek_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d07      	ldr	r5, [pc, #28]	; (8006f4c <_lseek_r+0x20>)
 8006f30:	4604      	mov	r4, r0
 8006f32:	4608      	mov	r0, r1
 8006f34:	4611      	mov	r1, r2
 8006f36:	2200      	movs	r2, #0
 8006f38:	602a      	str	r2, [r5, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f7fa fdda 	bl	8001af4 <_lseek>
 8006f40:	1c43      	adds	r3, r0, #1
 8006f42:	d102      	bne.n	8006f4a <_lseek_r+0x1e>
 8006f44:	682b      	ldr	r3, [r5, #0]
 8006f46:	b103      	cbz	r3, 8006f4a <_lseek_r+0x1e>
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}
 8006f4c:	20000318 	.word	0x20000318

08006f50 <malloc>:
 8006f50:	4b02      	ldr	r3, [pc, #8]	; (8006f5c <malloc+0xc>)
 8006f52:	4601      	mov	r1, r0
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	f000 bc17 	b.w	8007788 <_malloc_r>
 8006f5a:	bf00      	nop
 8006f5c:	2000000c 	.word	0x2000000c

08006f60 <memcpy>:
 8006f60:	440a      	add	r2, r1
 8006f62:	4291      	cmp	r1, r2
 8006f64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f68:	d100      	bne.n	8006f6c <memcpy+0xc>
 8006f6a:	4770      	bx	lr
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f76:	4291      	cmp	r1, r2
 8006f78:	d1f9      	bne.n	8006f6e <memcpy+0xe>
 8006f7a:	bd10      	pop	{r4, pc}

08006f7c <_Balloc>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f80:	4604      	mov	r4, r0
 8006f82:	460d      	mov	r5, r1
 8006f84:	b976      	cbnz	r6, 8006fa4 <_Balloc+0x28>
 8006f86:	2010      	movs	r0, #16
 8006f88:	f7ff ffe2 	bl	8006f50 <malloc>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	6260      	str	r0, [r4, #36]	; 0x24
 8006f90:	b920      	cbnz	r0, 8006f9c <_Balloc+0x20>
 8006f92:	4b18      	ldr	r3, [pc, #96]	; (8006ff4 <_Balloc+0x78>)
 8006f94:	4818      	ldr	r0, [pc, #96]	; (8006ff8 <_Balloc+0x7c>)
 8006f96:	2166      	movs	r1, #102	; 0x66
 8006f98:	f001 fa76 	bl	8008488 <__assert_func>
 8006f9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fa0:	6006      	str	r6, [r0, #0]
 8006fa2:	60c6      	str	r6, [r0, #12]
 8006fa4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006fa6:	68f3      	ldr	r3, [r6, #12]
 8006fa8:	b183      	cbz	r3, 8006fcc <_Balloc+0x50>
 8006faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fb2:	b9b8      	cbnz	r0, 8006fe4 <_Balloc+0x68>
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	fa01 f605 	lsl.w	r6, r1, r5
 8006fba:	1d72      	adds	r2, r6, #5
 8006fbc:	0092      	lsls	r2, r2, #2
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f000 fb60 	bl	8007684 <_calloc_r>
 8006fc4:	b160      	cbz	r0, 8006fe0 <_Balloc+0x64>
 8006fc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fca:	e00e      	b.n	8006fea <_Balloc+0x6e>
 8006fcc:	2221      	movs	r2, #33	; 0x21
 8006fce:	2104      	movs	r1, #4
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f000 fb57 	bl	8007684 <_calloc_r>
 8006fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd8:	60f0      	str	r0, [r6, #12]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e4      	bne.n	8006faa <_Balloc+0x2e>
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	6802      	ldr	r2, [r0, #0]
 8006fe6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fea:	2300      	movs	r3, #0
 8006fec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ff0:	e7f7      	b.n	8006fe2 <_Balloc+0x66>
 8006ff2:	bf00      	nop
 8006ff4:	08009113 	.word	0x08009113
 8006ff8:	08009196 	.word	0x08009196

08006ffc <_Bfree>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007000:	4605      	mov	r5, r0
 8007002:	460c      	mov	r4, r1
 8007004:	b976      	cbnz	r6, 8007024 <_Bfree+0x28>
 8007006:	2010      	movs	r0, #16
 8007008:	f7ff ffa2 	bl	8006f50 <malloc>
 800700c:	4602      	mov	r2, r0
 800700e:	6268      	str	r0, [r5, #36]	; 0x24
 8007010:	b920      	cbnz	r0, 800701c <_Bfree+0x20>
 8007012:	4b09      	ldr	r3, [pc, #36]	; (8007038 <_Bfree+0x3c>)
 8007014:	4809      	ldr	r0, [pc, #36]	; (800703c <_Bfree+0x40>)
 8007016:	218a      	movs	r1, #138	; 0x8a
 8007018:	f001 fa36 	bl	8008488 <__assert_func>
 800701c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007020:	6006      	str	r6, [r0, #0]
 8007022:	60c6      	str	r6, [r0, #12]
 8007024:	b13c      	cbz	r4, 8007036 <_Bfree+0x3a>
 8007026:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007028:	6862      	ldr	r2, [r4, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007030:	6021      	str	r1, [r4, #0]
 8007032:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	08009113 	.word	0x08009113
 800703c:	08009196 	.word	0x08009196

08007040 <__multadd>:
 8007040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007044:	690d      	ldr	r5, [r1, #16]
 8007046:	4607      	mov	r7, r0
 8007048:	460c      	mov	r4, r1
 800704a:	461e      	mov	r6, r3
 800704c:	f101 0c14 	add.w	ip, r1, #20
 8007050:	2000      	movs	r0, #0
 8007052:	f8dc 3000 	ldr.w	r3, [ip]
 8007056:	b299      	uxth	r1, r3
 8007058:	fb02 6101 	mla	r1, r2, r1, r6
 800705c:	0c1e      	lsrs	r6, r3, #16
 800705e:	0c0b      	lsrs	r3, r1, #16
 8007060:	fb02 3306 	mla	r3, r2, r6, r3
 8007064:	b289      	uxth	r1, r1
 8007066:	3001      	adds	r0, #1
 8007068:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800706c:	4285      	cmp	r5, r0
 800706e:	f84c 1b04 	str.w	r1, [ip], #4
 8007072:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007076:	dcec      	bgt.n	8007052 <__multadd+0x12>
 8007078:	b30e      	cbz	r6, 80070be <__multadd+0x7e>
 800707a:	68a3      	ldr	r3, [r4, #8]
 800707c:	42ab      	cmp	r3, r5
 800707e:	dc19      	bgt.n	80070b4 <__multadd+0x74>
 8007080:	6861      	ldr	r1, [r4, #4]
 8007082:	4638      	mov	r0, r7
 8007084:	3101      	adds	r1, #1
 8007086:	f7ff ff79 	bl	8006f7c <_Balloc>
 800708a:	4680      	mov	r8, r0
 800708c:	b928      	cbnz	r0, 800709a <__multadd+0x5a>
 800708e:	4602      	mov	r2, r0
 8007090:	4b0c      	ldr	r3, [pc, #48]	; (80070c4 <__multadd+0x84>)
 8007092:	480d      	ldr	r0, [pc, #52]	; (80070c8 <__multadd+0x88>)
 8007094:	21b5      	movs	r1, #181	; 0xb5
 8007096:	f001 f9f7 	bl	8008488 <__assert_func>
 800709a:	6922      	ldr	r2, [r4, #16]
 800709c:	3202      	adds	r2, #2
 800709e:	f104 010c 	add.w	r1, r4, #12
 80070a2:	0092      	lsls	r2, r2, #2
 80070a4:	300c      	adds	r0, #12
 80070a6:	f7ff ff5b 	bl	8006f60 <memcpy>
 80070aa:	4621      	mov	r1, r4
 80070ac:	4638      	mov	r0, r7
 80070ae:	f7ff ffa5 	bl	8006ffc <_Bfree>
 80070b2:	4644      	mov	r4, r8
 80070b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070b8:	3501      	adds	r5, #1
 80070ba:	615e      	str	r6, [r3, #20]
 80070bc:	6125      	str	r5, [r4, #16]
 80070be:	4620      	mov	r0, r4
 80070c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c4:	08009185 	.word	0x08009185
 80070c8:	08009196 	.word	0x08009196

080070cc <__hi0bits>:
 80070cc:	0c03      	lsrs	r3, r0, #16
 80070ce:	041b      	lsls	r3, r3, #16
 80070d0:	b9d3      	cbnz	r3, 8007108 <__hi0bits+0x3c>
 80070d2:	0400      	lsls	r0, r0, #16
 80070d4:	2310      	movs	r3, #16
 80070d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80070da:	bf04      	itt	eq
 80070dc:	0200      	lsleq	r0, r0, #8
 80070de:	3308      	addeq	r3, #8
 80070e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80070e4:	bf04      	itt	eq
 80070e6:	0100      	lsleq	r0, r0, #4
 80070e8:	3304      	addeq	r3, #4
 80070ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070ee:	bf04      	itt	eq
 80070f0:	0080      	lsleq	r0, r0, #2
 80070f2:	3302      	addeq	r3, #2
 80070f4:	2800      	cmp	r0, #0
 80070f6:	db05      	blt.n	8007104 <__hi0bits+0x38>
 80070f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80070fc:	f103 0301 	add.w	r3, r3, #1
 8007100:	bf08      	it	eq
 8007102:	2320      	moveq	r3, #32
 8007104:	4618      	mov	r0, r3
 8007106:	4770      	bx	lr
 8007108:	2300      	movs	r3, #0
 800710a:	e7e4      	b.n	80070d6 <__hi0bits+0xa>

0800710c <__lo0bits>:
 800710c:	6803      	ldr	r3, [r0, #0]
 800710e:	f013 0207 	ands.w	r2, r3, #7
 8007112:	4601      	mov	r1, r0
 8007114:	d00b      	beq.n	800712e <__lo0bits+0x22>
 8007116:	07da      	lsls	r2, r3, #31
 8007118:	d423      	bmi.n	8007162 <__lo0bits+0x56>
 800711a:	0798      	lsls	r0, r3, #30
 800711c:	bf49      	itett	mi
 800711e:	085b      	lsrmi	r3, r3, #1
 8007120:	089b      	lsrpl	r3, r3, #2
 8007122:	2001      	movmi	r0, #1
 8007124:	600b      	strmi	r3, [r1, #0]
 8007126:	bf5c      	itt	pl
 8007128:	600b      	strpl	r3, [r1, #0]
 800712a:	2002      	movpl	r0, #2
 800712c:	4770      	bx	lr
 800712e:	b298      	uxth	r0, r3
 8007130:	b9a8      	cbnz	r0, 800715e <__lo0bits+0x52>
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	2010      	movs	r0, #16
 8007136:	b2da      	uxtb	r2, r3
 8007138:	b90a      	cbnz	r2, 800713e <__lo0bits+0x32>
 800713a:	3008      	adds	r0, #8
 800713c:	0a1b      	lsrs	r3, r3, #8
 800713e:	071a      	lsls	r2, r3, #28
 8007140:	bf04      	itt	eq
 8007142:	091b      	lsreq	r3, r3, #4
 8007144:	3004      	addeq	r0, #4
 8007146:	079a      	lsls	r2, r3, #30
 8007148:	bf04      	itt	eq
 800714a:	089b      	lsreq	r3, r3, #2
 800714c:	3002      	addeq	r0, #2
 800714e:	07da      	lsls	r2, r3, #31
 8007150:	d403      	bmi.n	800715a <__lo0bits+0x4e>
 8007152:	085b      	lsrs	r3, r3, #1
 8007154:	f100 0001 	add.w	r0, r0, #1
 8007158:	d005      	beq.n	8007166 <__lo0bits+0x5a>
 800715a:	600b      	str	r3, [r1, #0]
 800715c:	4770      	bx	lr
 800715e:	4610      	mov	r0, r2
 8007160:	e7e9      	b.n	8007136 <__lo0bits+0x2a>
 8007162:	2000      	movs	r0, #0
 8007164:	4770      	bx	lr
 8007166:	2020      	movs	r0, #32
 8007168:	4770      	bx	lr
	...

0800716c <__i2b>:
 800716c:	b510      	push	{r4, lr}
 800716e:	460c      	mov	r4, r1
 8007170:	2101      	movs	r1, #1
 8007172:	f7ff ff03 	bl	8006f7c <_Balloc>
 8007176:	4602      	mov	r2, r0
 8007178:	b928      	cbnz	r0, 8007186 <__i2b+0x1a>
 800717a:	4b05      	ldr	r3, [pc, #20]	; (8007190 <__i2b+0x24>)
 800717c:	4805      	ldr	r0, [pc, #20]	; (8007194 <__i2b+0x28>)
 800717e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007182:	f001 f981 	bl	8008488 <__assert_func>
 8007186:	2301      	movs	r3, #1
 8007188:	6144      	str	r4, [r0, #20]
 800718a:	6103      	str	r3, [r0, #16]
 800718c:	bd10      	pop	{r4, pc}
 800718e:	bf00      	nop
 8007190:	08009185 	.word	0x08009185
 8007194:	08009196 	.word	0x08009196

08007198 <__multiply>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	4691      	mov	r9, r2
 800719e:	690a      	ldr	r2, [r1, #16]
 80071a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	bfb8      	it	lt
 80071a8:	460b      	movlt	r3, r1
 80071aa:	460c      	mov	r4, r1
 80071ac:	bfbc      	itt	lt
 80071ae:	464c      	movlt	r4, r9
 80071b0:	4699      	movlt	r9, r3
 80071b2:	6927      	ldr	r7, [r4, #16]
 80071b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071b8:	68a3      	ldr	r3, [r4, #8]
 80071ba:	6861      	ldr	r1, [r4, #4]
 80071bc:	eb07 060a 	add.w	r6, r7, sl
 80071c0:	42b3      	cmp	r3, r6
 80071c2:	b085      	sub	sp, #20
 80071c4:	bfb8      	it	lt
 80071c6:	3101      	addlt	r1, #1
 80071c8:	f7ff fed8 	bl	8006f7c <_Balloc>
 80071cc:	b930      	cbnz	r0, 80071dc <__multiply+0x44>
 80071ce:	4602      	mov	r2, r0
 80071d0:	4b44      	ldr	r3, [pc, #272]	; (80072e4 <__multiply+0x14c>)
 80071d2:	4845      	ldr	r0, [pc, #276]	; (80072e8 <__multiply+0x150>)
 80071d4:	f240 115d 	movw	r1, #349	; 0x15d
 80071d8:	f001 f956 	bl	8008488 <__assert_func>
 80071dc:	f100 0514 	add.w	r5, r0, #20
 80071e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071e4:	462b      	mov	r3, r5
 80071e6:	2200      	movs	r2, #0
 80071e8:	4543      	cmp	r3, r8
 80071ea:	d321      	bcc.n	8007230 <__multiply+0x98>
 80071ec:	f104 0314 	add.w	r3, r4, #20
 80071f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071f4:	f109 0314 	add.w	r3, r9, #20
 80071f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071fc:	9202      	str	r2, [sp, #8]
 80071fe:	1b3a      	subs	r2, r7, r4
 8007200:	3a15      	subs	r2, #21
 8007202:	f022 0203 	bic.w	r2, r2, #3
 8007206:	3204      	adds	r2, #4
 8007208:	f104 0115 	add.w	r1, r4, #21
 800720c:	428f      	cmp	r7, r1
 800720e:	bf38      	it	cc
 8007210:	2204      	movcc	r2, #4
 8007212:	9201      	str	r2, [sp, #4]
 8007214:	9a02      	ldr	r2, [sp, #8]
 8007216:	9303      	str	r3, [sp, #12]
 8007218:	429a      	cmp	r2, r3
 800721a:	d80c      	bhi.n	8007236 <__multiply+0x9e>
 800721c:	2e00      	cmp	r6, #0
 800721e:	dd03      	ble.n	8007228 <__multiply+0x90>
 8007220:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007224:	2b00      	cmp	r3, #0
 8007226:	d05a      	beq.n	80072de <__multiply+0x146>
 8007228:	6106      	str	r6, [r0, #16]
 800722a:	b005      	add	sp, #20
 800722c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007230:	f843 2b04 	str.w	r2, [r3], #4
 8007234:	e7d8      	b.n	80071e8 <__multiply+0x50>
 8007236:	f8b3 a000 	ldrh.w	sl, [r3]
 800723a:	f1ba 0f00 	cmp.w	sl, #0
 800723e:	d024      	beq.n	800728a <__multiply+0xf2>
 8007240:	f104 0e14 	add.w	lr, r4, #20
 8007244:	46a9      	mov	r9, r5
 8007246:	f04f 0c00 	mov.w	ip, #0
 800724a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800724e:	f8d9 1000 	ldr.w	r1, [r9]
 8007252:	fa1f fb82 	uxth.w	fp, r2
 8007256:	b289      	uxth	r1, r1
 8007258:	fb0a 110b 	mla	r1, sl, fp, r1
 800725c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007260:	f8d9 2000 	ldr.w	r2, [r9]
 8007264:	4461      	add	r1, ip
 8007266:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800726a:	fb0a c20b 	mla	r2, sl, fp, ip
 800726e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007272:	b289      	uxth	r1, r1
 8007274:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007278:	4577      	cmp	r7, lr
 800727a:	f849 1b04 	str.w	r1, [r9], #4
 800727e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007282:	d8e2      	bhi.n	800724a <__multiply+0xb2>
 8007284:	9a01      	ldr	r2, [sp, #4]
 8007286:	f845 c002 	str.w	ip, [r5, r2]
 800728a:	9a03      	ldr	r2, [sp, #12]
 800728c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007290:	3304      	adds	r3, #4
 8007292:	f1b9 0f00 	cmp.w	r9, #0
 8007296:	d020      	beq.n	80072da <__multiply+0x142>
 8007298:	6829      	ldr	r1, [r5, #0]
 800729a:	f104 0c14 	add.w	ip, r4, #20
 800729e:	46ae      	mov	lr, r5
 80072a0:	f04f 0a00 	mov.w	sl, #0
 80072a4:	f8bc b000 	ldrh.w	fp, [ip]
 80072a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80072ac:	fb09 220b 	mla	r2, r9, fp, r2
 80072b0:	4492      	add	sl, r2
 80072b2:	b289      	uxth	r1, r1
 80072b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80072b8:	f84e 1b04 	str.w	r1, [lr], #4
 80072bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80072c0:	f8be 1000 	ldrh.w	r1, [lr]
 80072c4:	0c12      	lsrs	r2, r2, #16
 80072c6:	fb09 1102 	mla	r1, r9, r2, r1
 80072ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80072ce:	4567      	cmp	r7, ip
 80072d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072d4:	d8e6      	bhi.n	80072a4 <__multiply+0x10c>
 80072d6:	9a01      	ldr	r2, [sp, #4]
 80072d8:	50a9      	str	r1, [r5, r2]
 80072da:	3504      	adds	r5, #4
 80072dc:	e79a      	b.n	8007214 <__multiply+0x7c>
 80072de:	3e01      	subs	r6, #1
 80072e0:	e79c      	b.n	800721c <__multiply+0x84>
 80072e2:	bf00      	nop
 80072e4:	08009185 	.word	0x08009185
 80072e8:	08009196 	.word	0x08009196

080072ec <__pow5mult>:
 80072ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f0:	4615      	mov	r5, r2
 80072f2:	f012 0203 	ands.w	r2, r2, #3
 80072f6:	4606      	mov	r6, r0
 80072f8:	460f      	mov	r7, r1
 80072fa:	d007      	beq.n	800730c <__pow5mult+0x20>
 80072fc:	4c25      	ldr	r4, [pc, #148]	; (8007394 <__pow5mult+0xa8>)
 80072fe:	3a01      	subs	r2, #1
 8007300:	2300      	movs	r3, #0
 8007302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007306:	f7ff fe9b 	bl	8007040 <__multadd>
 800730a:	4607      	mov	r7, r0
 800730c:	10ad      	asrs	r5, r5, #2
 800730e:	d03d      	beq.n	800738c <__pow5mult+0xa0>
 8007310:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007312:	b97c      	cbnz	r4, 8007334 <__pow5mult+0x48>
 8007314:	2010      	movs	r0, #16
 8007316:	f7ff fe1b 	bl	8006f50 <malloc>
 800731a:	4602      	mov	r2, r0
 800731c:	6270      	str	r0, [r6, #36]	; 0x24
 800731e:	b928      	cbnz	r0, 800732c <__pow5mult+0x40>
 8007320:	4b1d      	ldr	r3, [pc, #116]	; (8007398 <__pow5mult+0xac>)
 8007322:	481e      	ldr	r0, [pc, #120]	; (800739c <__pow5mult+0xb0>)
 8007324:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007328:	f001 f8ae 	bl	8008488 <__assert_func>
 800732c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007330:	6004      	str	r4, [r0, #0]
 8007332:	60c4      	str	r4, [r0, #12]
 8007334:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800733c:	b94c      	cbnz	r4, 8007352 <__pow5mult+0x66>
 800733e:	f240 2171 	movw	r1, #625	; 0x271
 8007342:	4630      	mov	r0, r6
 8007344:	f7ff ff12 	bl	800716c <__i2b>
 8007348:	2300      	movs	r3, #0
 800734a:	f8c8 0008 	str.w	r0, [r8, #8]
 800734e:	4604      	mov	r4, r0
 8007350:	6003      	str	r3, [r0, #0]
 8007352:	f04f 0900 	mov.w	r9, #0
 8007356:	07eb      	lsls	r3, r5, #31
 8007358:	d50a      	bpl.n	8007370 <__pow5mult+0x84>
 800735a:	4639      	mov	r1, r7
 800735c:	4622      	mov	r2, r4
 800735e:	4630      	mov	r0, r6
 8007360:	f7ff ff1a 	bl	8007198 <__multiply>
 8007364:	4639      	mov	r1, r7
 8007366:	4680      	mov	r8, r0
 8007368:	4630      	mov	r0, r6
 800736a:	f7ff fe47 	bl	8006ffc <_Bfree>
 800736e:	4647      	mov	r7, r8
 8007370:	106d      	asrs	r5, r5, #1
 8007372:	d00b      	beq.n	800738c <__pow5mult+0xa0>
 8007374:	6820      	ldr	r0, [r4, #0]
 8007376:	b938      	cbnz	r0, 8007388 <__pow5mult+0x9c>
 8007378:	4622      	mov	r2, r4
 800737a:	4621      	mov	r1, r4
 800737c:	4630      	mov	r0, r6
 800737e:	f7ff ff0b 	bl	8007198 <__multiply>
 8007382:	6020      	str	r0, [r4, #0]
 8007384:	f8c0 9000 	str.w	r9, [r0]
 8007388:	4604      	mov	r4, r0
 800738a:	e7e4      	b.n	8007356 <__pow5mult+0x6a>
 800738c:	4638      	mov	r0, r7
 800738e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007392:	bf00      	nop
 8007394:	080092e8 	.word	0x080092e8
 8007398:	08009113 	.word	0x08009113
 800739c:	08009196 	.word	0x08009196

080073a0 <__lshift>:
 80073a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a4:	460c      	mov	r4, r1
 80073a6:	6849      	ldr	r1, [r1, #4]
 80073a8:	6923      	ldr	r3, [r4, #16]
 80073aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073ae:	68a3      	ldr	r3, [r4, #8]
 80073b0:	4607      	mov	r7, r0
 80073b2:	4691      	mov	r9, r2
 80073b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073b8:	f108 0601 	add.w	r6, r8, #1
 80073bc:	42b3      	cmp	r3, r6
 80073be:	db0b      	blt.n	80073d8 <__lshift+0x38>
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff fddb 	bl	8006f7c <_Balloc>
 80073c6:	4605      	mov	r5, r0
 80073c8:	b948      	cbnz	r0, 80073de <__lshift+0x3e>
 80073ca:	4602      	mov	r2, r0
 80073cc:	4b2a      	ldr	r3, [pc, #168]	; (8007478 <__lshift+0xd8>)
 80073ce:	482b      	ldr	r0, [pc, #172]	; (800747c <__lshift+0xdc>)
 80073d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80073d4:	f001 f858 	bl	8008488 <__assert_func>
 80073d8:	3101      	adds	r1, #1
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	e7ee      	b.n	80073bc <__lshift+0x1c>
 80073de:	2300      	movs	r3, #0
 80073e0:	f100 0114 	add.w	r1, r0, #20
 80073e4:	f100 0210 	add.w	r2, r0, #16
 80073e8:	4618      	mov	r0, r3
 80073ea:	4553      	cmp	r3, sl
 80073ec:	db37      	blt.n	800745e <__lshift+0xbe>
 80073ee:	6920      	ldr	r0, [r4, #16]
 80073f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073f4:	f104 0314 	add.w	r3, r4, #20
 80073f8:	f019 091f 	ands.w	r9, r9, #31
 80073fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007400:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007404:	d02f      	beq.n	8007466 <__lshift+0xc6>
 8007406:	f1c9 0e20 	rsb	lr, r9, #32
 800740a:	468a      	mov	sl, r1
 800740c:	f04f 0c00 	mov.w	ip, #0
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	fa02 f209 	lsl.w	r2, r2, r9
 8007416:	ea42 020c 	orr.w	r2, r2, ip
 800741a:	f84a 2b04 	str.w	r2, [sl], #4
 800741e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007422:	4298      	cmp	r0, r3
 8007424:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007428:	d8f2      	bhi.n	8007410 <__lshift+0x70>
 800742a:	1b03      	subs	r3, r0, r4
 800742c:	3b15      	subs	r3, #21
 800742e:	f023 0303 	bic.w	r3, r3, #3
 8007432:	3304      	adds	r3, #4
 8007434:	f104 0215 	add.w	r2, r4, #21
 8007438:	4290      	cmp	r0, r2
 800743a:	bf38      	it	cc
 800743c:	2304      	movcc	r3, #4
 800743e:	f841 c003 	str.w	ip, [r1, r3]
 8007442:	f1bc 0f00 	cmp.w	ip, #0
 8007446:	d001      	beq.n	800744c <__lshift+0xac>
 8007448:	f108 0602 	add.w	r6, r8, #2
 800744c:	3e01      	subs	r6, #1
 800744e:	4638      	mov	r0, r7
 8007450:	612e      	str	r6, [r5, #16]
 8007452:	4621      	mov	r1, r4
 8007454:	f7ff fdd2 	bl	8006ffc <_Bfree>
 8007458:	4628      	mov	r0, r5
 800745a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007462:	3301      	adds	r3, #1
 8007464:	e7c1      	b.n	80073ea <__lshift+0x4a>
 8007466:	3904      	subs	r1, #4
 8007468:	f853 2b04 	ldr.w	r2, [r3], #4
 800746c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007470:	4298      	cmp	r0, r3
 8007472:	d8f9      	bhi.n	8007468 <__lshift+0xc8>
 8007474:	e7ea      	b.n	800744c <__lshift+0xac>
 8007476:	bf00      	nop
 8007478:	08009185 	.word	0x08009185
 800747c:	08009196 	.word	0x08009196

08007480 <__mcmp>:
 8007480:	b530      	push	{r4, r5, lr}
 8007482:	6902      	ldr	r2, [r0, #16]
 8007484:	690c      	ldr	r4, [r1, #16]
 8007486:	1b12      	subs	r2, r2, r4
 8007488:	d10e      	bne.n	80074a8 <__mcmp+0x28>
 800748a:	f100 0314 	add.w	r3, r0, #20
 800748e:	3114      	adds	r1, #20
 8007490:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007494:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007498:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800749c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80074a0:	42a5      	cmp	r5, r4
 80074a2:	d003      	beq.n	80074ac <__mcmp+0x2c>
 80074a4:	d305      	bcc.n	80074b2 <__mcmp+0x32>
 80074a6:	2201      	movs	r2, #1
 80074a8:	4610      	mov	r0, r2
 80074aa:	bd30      	pop	{r4, r5, pc}
 80074ac:	4283      	cmp	r3, r0
 80074ae:	d3f3      	bcc.n	8007498 <__mcmp+0x18>
 80074b0:	e7fa      	b.n	80074a8 <__mcmp+0x28>
 80074b2:	f04f 32ff 	mov.w	r2, #4294967295
 80074b6:	e7f7      	b.n	80074a8 <__mcmp+0x28>

080074b8 <__mdiff>:
 80074b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	460c      	mov	r4, r1
 80074be:	4606      	mov	r6, r0
 80074c0:	4611      	mov	r1, r2
 80074c2:	4620      	mov	r0, r4
 80074c4:	4690      	mov	r8, r2
 80074c6:	f7ff ffdb 	bl	8007480 <__mcmp>
 80074ca:	1e05      	subs	r5, r0, #0
 80074cc:	d110      	bne.n	80074f0 <__mdiff+0x38>
 80074ce:	4629      	mov	r1, r5
 80074d0:	4630      	mov	r0, r6
 80074d2:	f7ff fd53 	bl	8006f7c <_Balloc>
 80074d6:	b930      	cbnz	r0, 80074e6 <__mdiff+0x2e>
 80074d8:	4b3a      	ldr	r3, [pc, #232]	; (80075c4 <__mdiff+0x10c>)
 80074da:	4602      	mov	r2, r0
 80074dc:	f240 2132 	movw	r1, #562	; 0x232
 80074e0:	4839      	ldr	r0, [pc, #228]	; (80075c8 <__mdiff+0x110>)
 80074e2:	f000 ffd1 	bl	8008488 <__assert_func>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f0:	bfa4      	itt	ge
 80074f2:	4643      	movge	r3, r8
 80074f4:	46a0      	movge	r8, r4
 80074f6:	4630      	mov	r0, r6
 80074f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074fc:	bfa6      	itte	ge
 80074fe:	461c      	movge	r4, r3
 8007500:	2500      	movge	r5, #0
 8007502:	2501      	movlt	r5, #1
 8007504:	f7ff fd3a 	bl	8006f7c <_Balloc>
 8007508:	b920      	cbnz	r0, 8007514 <__mdiff+0x5c>
 800750a:	4b2e      	ldr	r3, [pc, #184]	; (80075c4 <__mdiff+0x10c>)
 800750c:	4602      	mov	r2, r0
 800750e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007512:	e7e5      	b.n	80074e0 <__mdiff+0x28>
 8007514:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007518:	6926      	ldr	r6, [r4, #16]
 800751a:	60c5      	str	r5, [r0, #12]
 800751c:	f104 0914 	add.w	r9, r4, #20
 8007520:	f108 0514 	add.w	r5, r8, #20
 8007524:	f100 0e14 	add.w	lr, r0, #20
 8007528:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800752c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007530:	f108 0210 	add.w	r2, r8, #16
 8007534:	46f2      	mov	sl, lr
 8007536:	2100      	movs	r1, #0
 8007538:	f859 3b04 	ldr.w	r3, [r9], #4
 800753c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007540:	fa1f f883 	uxth.w	r8, r3
 8007544:	fa11 f18b 	uxtah	r1, r1, fp
 8007548:	0c1b      	lsrs	r3, r3, #16
 800754a:	eba1 0808 	sub.w	r8, r1, r8
 800754e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007552:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007556:	fa1f f888 	uxth.w	r8, r8
 800755a:	1419      	asrs	r1, r3, #16
 800755c:	454e      	cmp	r6, r9
 800755e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007562:	f84a 3b04 	str.w	r3, [sl], #4
 8007566:	d8e7      	bhi.n	8007538 <__mdiff+0x80>
 8007568:	1b33      	subs	r3, r6, r4
 800756a:	3b15      	subs	r3, #21
 800756c:	f023 0303 	bic.w	r3, r3, #3
 8007570:	3304      	adds	r3, #4
 8007572:	3415      	adds	r4, #21
 8007574:	42a6      	cmp	r6, r4
 8007576:	bf38      	it	cc
 8007578:	2304      	movcc	r3, #4
 800757a:	441d      	add	r5, r3
 800757c:	4473      	add	r3, lr
 800757e:	469e      	mov	lr, r3
 8007580:	462e      	mov	r6, r5
 8007582:	4566      	cmp	r6, ip
 8007584:	d30e      	bcc.n	80075a4 <__mdiff+0xec>
 8007586:	f10c 0203 	add.w	r2, ip, #3
 800758a:	1b52      	subs	r2, r2, r5
 800758c:	f022 0203 	bic.w	r2, r2, #3
 8007590:	3d03      	subs	r5, #3
 8007592:	45ac      	cmp	ip, r5
 8007594:	bf38      	it	cc
 8007596:	2200      	movcc	r2, #0
 8007598:	441a      	add	r2, r3
 800759a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800759e:	b17b      	cbz	r3, 80075c0 <__mdiff+0x108>
 80075a0:	6107      	str	r7, [r0, #16]
 80075a2:	e7a3      	b.n	80074ec <__mdiff+0x34>
 80075a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80075a8:	fa11 f288 	uxtah	r2, r1, r8
 80075ac:	1414      	asrs	r4, r2, #16
 80075ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80075b2:	b292      	uxth	r2, r2
 80075b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80075b8:	f84e 2b04 	str.w	r2, [lr], #4
 80075bc:	1421      	asrs	r1, r4, #16
 80075be:	e7e0      	b.n	8007582 <__mdiff+0xca>
 80075c0:	3f01      	subs	r7, #1
 80075c2:	e7ea      	b.n	800759a <__mdiff+0xe2>
 80075c4:	08009185 	.word	0x08009185
 80075c8:	08009196 	.word	0x08009196

080075cc <__d2b>:
 80075cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075d0:	4689      	mov	r9, r1
 80075d2:	2101      	movs	r1, #1
 80075d4:	ec57 6b10 	vmov	r6, r7, d0
 80075d8:	4690      	mov	r8, r2
 80075da:	f7ff fccf 	bl	8006f7c <_Balloc>
 80075de:	4604      	mov	r4, r0
 80075e0:	b930      	cbnz	r0, 80075f0 <__d2b+0x24>
 80075e2:	4602      	mov	r2, r0
 80075e4:	4b25      	ldr	r3, [pc, #148]	; (800767c <__d2b+0xb0>)
 80075e6:	4826      	ldr	r0, [pc, #152]	; (8007680 <__d2b+0xb4>)
 80075e8:	f240 310a 	movw	r1, #778	; 0x30a
 80075ec:	f000 ff4c 	bl	8008488 <__assert_func>
 80075f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80075f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075f8:	bb35      	cbnz	r5, 8007648 <__d2b+0x7c>
 80075fa:	2e00      	cmp	r6, #0
 80075fc:	9301      	str	r3, [sp, #4]
 80075fe:	d028      	beq.n	8007652 <__d2b+0x86>
 8007600:	4668      	mov	r0, sp
 8007602:	9600      	str	r6, [sp, #0]
 8007604:	f7ff fd82 	bl	800710c <__lo0bits>
 8007608:	9900      	ldr	r1, [sp, #0]
 800760a:	b300      	cbz	r0, 800764e <__d2b+0x82>
 800760c:	9a01      	ldr	r2, [sp, #4]
 800760e:	f1c0 0320 	rsb	r3, r0, #32
 8007612:	fa02 f303 	lsl.w	r3, r2, r3
 8007616:	430b      	orrs	r3, r1
 8007618:	40c2      	lsrs	r2, r0
 800761a:	6163      	str	r3, [r4, #20]
 800761c:	9201      	str	r2, [sp, #4]
 800761e:	9b01      	ldr	r3, [sp, #4]
 8007620:	61a3      	str	r3, [r4, #24]
 8007622:	2b00      	cmp	r3, #0
 8007624:	bf14      	ite	ne
 8007626:	2202      	movne	r2, #2
 8007628:	2201      	moveq	r2, #1
 800762a:	6122      	str	r2, [r4, #16]
 800762c:	b1d5      	cbz	r5, 8007664 <__d2b+0x98>
 800762e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007632:	4405      	add	r5, r0
 8007634:	f8c9 5000 	str.w	r5, [r9]
 8007638:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800763c:	f8c8 0000 	str.w	r0, [r8]
 8007640:	4620      	mov	r0, r4
 8007642:	b003      	add	sp, #12
 8007644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800764c:	e7d5      	b.n	80075fa <__d2b+0x2e>
 800764e:	6161      	str	r1, [r4, #20]
 8007650:	e7e5      	b.n	800761e <__d2b+0x52>
 8007652:	a801      	add	r0, sp, #4
 8007654:	f7ff fd5a 	bl	800710c <__lo0bits>
 8007658:	9b01      	ldr	r3, [sp, #4]
 800765a:	6163      	str	r3, [r4, #20]
 800765c:	2201      	movs	r2, #1
 800765e:	6122      	str	r2, [r4, #16]
 8007660:	3020      	adds	r0, #32
 8007662:	e7e3      	b.n	800762c <__d2b+0x60>
 8007664:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007668:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800766c:	f8c9 0000 	str.w	r0, [r9]
 8007670:	6918      	ldr	r0, [r3, #16]
 8007672:	f7ff fd2b 	bl	80070cc <__hi0bits>
 8007676:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800767a:	e7df      	b.n	800763c <__d2b+0x70>
 800767c:	08009185 	.word	0x08009185
 8007680:	08009196 	.word	0x08009196

08007684 <_calloc_r>:
 8007684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007686:	fba1 2402 	umull	r2, r4, r1, r2
 800768a:	b94c      	cbnz	r4, 80076a0 <_calloc_r+0x1c>
 800768c:	4611      	mov	r1, r2
 800768e:	9201      	str	r2, [sp, #4]
 8007690:	f000 f87a 	bl	8007788 <_malloc_r>
 8007694:	9a01      	ldr	r2, [sp, #4]
 8007696:	4605      	mov	r5, r0
 8007698:	b930      	cbnz	r0, 80076a8 <_calloc_r+0x24>
 800769a:	4628      	mov	r0, r5
 800769c:	b003      	add	sp, #12
 800769e:	bd30      	pop	{r4, r5, pc}
 80076a0:	220c      	movs	r2, #12
 80076a2:	6002      	str	r2, [r0, #0]
 80076a4:	2500      	movs	r5, #0
 80076a6:	e7f8      	b.n	800769a <_calloc_r+0x16>
 80076a8:	4621      	mov	r1, r4
 80076aa:	f7fe f89b 	bl	80057e4 <memset>
 80076ae:	e7f4      	b.n	800769a <_calloc_r+0x16>

080076b0 <_free_r>:
 80076b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076b2:	2900      	cmp	r1, #0
 80076b4:	d044      	beq.n	8007740 <_free_r+0x90>
 80076b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ba:	9001      	str	r0, [sp, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f1a1 0404 	sub.w	r4, r1, #4
 80076c2:	bfb8      	it	lt
 80076c4:	18e4      	addlt	r4, r4, r3
 80076c6:	f001 f8f5 	bl	80088b4 <__malloc_lock>
 80076ca:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <_free_r+0x94>)
 80076cc:	9801      	ldr	r0, [sp, #4]
 80076ce:	6813      	ldr	r3, [r2, #0]
 80076d0:	b933      	cbnz	r3, 80076e0 <_free_r+0x30>
 80076d2:	6063      	str	r3, [r4, #4]
 80076d4:	6014      	str	r4, [r2, #0]
 80076d6:	b003      	add	sp, #12
 80076d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076dc:	f001 b8f0 	b.w	80088c0 <__malloc_unlock>
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	d908      	bls.n	80076f6 <_free_r+0x46>
 80076e4:	6825      	ldr	r5, [r4, #0]
 80076e6:	1961      	adds	r1, r4, r5
 80076e8:	428b      	cmp	r3, r1
 80076ea:	bf01      	itttt	eq
 80076ec:	6819      	ldreq	r1, [r3, #0]
 80076ee:	685b      	ldreq	r3, [r3, #4]
 80076f0:	1949      	addeq	r1, r1, r5
 80076f2:	6021      	streq	r1, [r4, #0]
 80076f4:	e7ed      	b.n	80076d2 <_free_r+0x22>
 80076f6:	461a      	mov	r2, r3
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	b10b      	cbz	r3, 8007700 <_free_r+0x50>
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	d9fa      	bls.n	80076f6 <_free_r+0x46>
 8007700:	6811      	ldr	r1, [r2, #0]
 8007702:	1855      	adds	r5, r2, r1
 8007704:	42a5      	cmp	r5, r4
 8007706:	d10b      	bne.n	8007720 <_free_r+0x70>
 8007708:	6824      	ldr	r4, [r4, #0]
 800770a:	4421      	add	r1, r4
 800770c:	1854      	adds	r4, r2, r1
 800770e:	42a3      	cmp	r3, r4
 8007710:	6011      	str	r1, [r2, #0]
 8007712:	d1e0      	bne.n	80076d6 <_free_r+0x26>
 8007714:	681c      	ldr	r4, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	6053      	str	r3, [r2, #4]
 800771a:	4421      	add	r1, r4
 800771c:	6011      	str	r1, [r2, #0]
 800771e:	e7da      	b.n	80076d6 <_free_r+0x26>
 8007720:	d902      	bls.n	8007728 <_free_r+0x78>
 8007722:	230c      	movs	r3, #12
 8007724:	6003      	str	r3, [r0, #0]
 8007726:	e7d6      	b.n	80076d6 <_free_r+0x26>
 8007728:	6825      	ldr	r5, [r4, #0]
 800772a:	1961      	adds	r1, r4, r5
 800772c:	428b      	cmp	r3, r1
 800772e:	bf04      	itt	eq
 8007730:	6819      	ldreq	r1, [r3, #0]
 8007732:	685b      	ldreq	r3, [r3, #4]
 8007734:	6063      	str	r3, [r4, #4]
 8007736:	bf04      	itt	eq
 8007738:	1949      	addeq	r1, r1, r5
 800773a:	6021      	streq	r1, [r4, #0]
 800773c:	6054      	str	r4, [r2, #4]
 800773e:	e7ca      	b.n	80076d6 <_free_r+0x26>
 8007740:	b003      	add	sp, #12
 8007742:	bd30      	pop	{r4, r5, pc}
 8007744:	20000310 	.word	0x20000310

08007748 <sbrk_aligned>:
 8007748:	b570      	push	{r4, r5, r6, lr}
 800774a:	4e0e      	ldr	r6, [pc, #56]	; (8007784 <sbrk_aligned+0x3c>)
 800774c:	460c      	mov	r4, r1
 800774e:	6831      	ldr	r1, [r6, #0]
 8007750:	4605      	mov	r5, r0
 8007752:	b911      	cbnz	r1, 800775a <sbrk_aligned+0x12>
 8007754:	f000 fd1e 	bl	8008194 <_sbrk_r>
 8007758:	6030      	str	r0, [r6, #0]
 800775a:	4621      	mov	r1, r4
 800775c:	4628      	mov	r0, r5
 800775e:	f000 fd19 	bl	8008194 <_sbrk_r>
 8007762:	1c43      	adds	r3, r0, #1
 8007764:	d00a      	beq.n	800777c <sbrk_aligned+0x34>
 8007766:	1cc4      	adds	r4, r0, #3
 8007768:	f024 0403 	bic.w	r4, r4, #3
 800776c:	42a0      	cmp	r0, r4
 800776e:	d007      	beq.n	8007780 <sbrk_aligned+0x38>
 8007770:	1a21      	subs	r1, r4, r0
 8007772:	4628      	mov	r0, r5
 8007774:	f000 fd0e 	bl	8008194 <_sbrk_r>
 8007778:	3001      	adds	r0, #1
 800777a:	d101      	bne.n	8007780 <sbrk_aligned+0x38>
 800777c:	f04f 34ff 	mov.w	r4, #4294967295
 8007780:	4620      	mov	r0, r4
 8007782:	bd70      	pop	{r4, r5, r6, pc}
 8007784:	20000314 	.word	0x20000314

08007788 <_malloc_r>:
 8007788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800778c:	1ccd      	adds	r5, r1, #3
 800778e:	f025 0503 	bic.w	r5, r5, #3
 8007792:	3508      	adds	r5, #8
 8007794:	2d0c      	cmp	r5, #12
 8007796:	bf38      	it	cc
 8007798:	250c      	movcc	r5, #12
 800779a:	2d00      	cmp	r5, #0
 800779c:	4607      	mov	r7, r0
 800779e:	db01      	blt.n	80077a4 <_malloc_r+0x1c>
 80077a0:	42a9      	cmp	r1, r5
 80077a2:	d905      	bls.n	80077b0 <_malloc_r+0x28>
 80077a4:	230c      	movs	r3, #12
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	2600      	movs	r6, #0
 80077aa:	4630      	mov	r0, r6
 80077ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077b0:	4e2e      	ldr	r6, [pc, #184]	; (800786c <_malloc_r+0xe4>)
 80077b2:	f001 f87f 	bl	80088b4 <__malloc_lock>
 80077b6:	6833      	ldr	r3, [r6, #0]
 80077b8:	461c      	mov	r4, r3
 80077ba:	bb34      	cbnz	r4, 800780a <_malloc_r+0x82>
 80077bc:	4629      	mov	r1, r5
 80077be:	4638      	mov	r0, r7
 80077c0:	f7ff ffc2 	bl	8007748 <sbrk_aligned>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	4604      	mov	r4, r0
 80077c8:	d14d      	bne.n	8007866 <_malloc_r+0xde>
 80077ca:	6834      	ldr	r4, [r6, #0]
 80077cc:	4626      	mov	r6, r4
 80077ce:	2e00      	cmp	r6, #0
 80077d0:	d140      	bne.n	8007854 <_malloc_r+0xcc>
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	4631      	mov	r1, r6
 80077d6:	4638      	mov	r0, r7
 80077d8:	eb04 0803 	add.w	r8, r4, r3
 80077dc:	f000 fcda 	bl	8008194 <_sbrk_r>
 80077e0:	4580      	cmp	r8, r0
 80077e2:	d13a      	bne.n	800785a <_malloc_r+0xd2>
 80077e4:	6821      	ldr	r1, [r4, #0]
 80077e6:	3503      	adds	r5, #3
 80077e8:	1a6d      	subs	r5, r5, r1
 80077ea:	f025 0503 	bic.w	r5, r5, #3
 80077ee:	3508      	adds	r5, #8
 80077f0:	2d0c      	cmp	r5, #12
 80077f2:	bf38      	it	cc
 80077f4:	250c      	movcc	r5, #12
 80077f6:	4629      	mov	r1, r5
 80077f8:	4638      	mov	r0, r7
 80077fa:	f7ff ffa5 	bl	8007748 <sbrk_aligned>
 80077fe:	3001      	adds	r0, #1
 8007800:	d02b      	beq.n	800785a <_malloc_r+0xd2>
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	442b      	add	r3, r5
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	e00e      	b.n	8007828 <_malloc_r+0xa0>
 800780a:	6822      	ldr	r2, [r4, #0]
 800780c:	1b52      	subs	r2, r2, r5
 800780e:	d41e      	bmi.n	800784e <_malloc_r+0xc6>
 8007810:	2a0b      	cmp	r2, #11
 8007812:	d916      	bls.n	8007842 <_malloc_r+0xba>
 8007814:	1961      	adds	r1, r4, r5
 8007816:	42a3      	cmp	r3, r4
 8007818:	6025      	str	r5, [r4, #0]
 800781a:	bf18      	it	ne
 800781c:	6059      	strne	r1, [r3, #4]
 800781e:	6863      	ldr	r3, [r4, #4]
 8007820:	bf08      	it	eq
 8007822:	6031      	streq	r1, [r6, #0]
 8007824:	5162      	str	r2, [r4, r5]
 8007826:	604b      	str	r3, [r1, #4]
 8007828:	4638      	mov	r0, r7
 800782a:	f104 060b 	add.w	r6, r4, #11
 800782e:	f001 f847 	bl	80088c0 <__malloc_unlock>
 8007832:	f026 0607 	bic.w	r6, r6, #7
 8007836:	1d23      	adds	r3, r4, #4
 8007838:	1af2      	subs	r2, r6, r3
 800783a:	d0b6      	beq.n	80077aa <_malloc_r+0x22>
 800783c:	1b9b      	subs	r3, r3, r6
 800783e:	50a3      	str	r3, [r4, r2]
 8007840:	e7b3      	b.n	80077aa <_malloc_r+0x22>
 8007842:	6862      	ldr	r2, [r4, #4]
 8007844:	42a3      	cmp	r3, r4
 8007846:	bf0c      	ite	eq
 8007848:	6032      	streq	r2, [r6, #0]
 800784a:	605a      	strne	r2, [r3, #4]
 800784c:	e7ec      	b.n	8007828 <_malloc_r+0xa0>
 800784e:	4623      	mov	r3, r4
 8007850:	6864      	ldr	r4, [r4, #4]
 8007852:	e7b2      	b.n	80077ba <_malloc_r+0x32>
 8007854:	4634      	mov	r4, r6
 8007856:	6876      	ldr	r6, [r6, #4]
 8007858:	e7b9      	b.n	80077ce <_malloc_r+0x46>
 800785a:	230c      	movs	r3, #12
 800785c:	603b      	str	r3, [r7, #0]
 800785e:	4638      	mov	r0, r7
 8007860:	f001 f82e 	bl	80088c0 <__malloc_unlock>
 8007864:	e7a1      	b.n	80077aa <_malloc_r+0x22>
 8007866:	6025      	str	r5, [r4, #0]
 8007868:	e7de      	b.n	8007828 <_malloc_r+0xa0>
 800786a:	bf00      	nop
 800786c:	20000310 	.word	0x20000310

08007870 <__ssputs_r>:
 8007870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007874:	688e      	ldr	r6, [r1, #8]
 8007876:	429e      	cmp	r6, r3
 8007878:	4682      	mov	sl, r0
 800787a:	460c      	mov	r4, r1
 800787c:	4690      	mov	r8, r2
 800787e:	461f      	mov	r7, r3
 8007880:	d838      	bhi.n	80078f4 <__ssputs_r+0x84>
 8007882:	898a      	ldrh	r2, [r1, #12]
 8007884:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007888:	d032      	beq.n	80078f0 <__ssputs_r+0x80>
 800788a:	6825      	ldr	r5, [r4, #0]
 800788c:	6909      	ldr	r1, [r1, #16]
 800788e:	eba5 0901 	sub.w	r9, r5, r1
 8007892:	6965      	ldr	r5, [r4, #20]
 8007894:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007898:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800789c:	3301      	adds	r3, #1
 800789e:	444b      	add	r3, r9
 80078a0:	106d      	asrs	r5, r5, #1
 80078a2:	429d      	cmp	r5, r3
 80078a4:	bf38      	it	cc
 80078a6:	461d      	movcc	r5, r3
 80078a8:	0553      	lsls	r3, r2, #21
 80078aa:	d531      	bpl.n	8007910 <__ssputs_r+0xa0>
 80078ac:	4629      	mov	r1, r5
 80078ae:	f7ff ff6b 	bl	8007788 <_malloc_r>
 80078b2:	4606      	mov	r6, r0
 80078b4:	b950      	cbnz	r0, 80078cc <__ssputs_r+0x5c>
 80078b6:	230c      	movs	r3, #12
 80078b8:	f8ca 3000 	str.w	r3, [sl]
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c2:	81a3      	strh	r3, [r4, #12]
 80078c4:	f04f 30ff 	mov.w	r0, #4294967295
 80078c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078cc:	6921      	ldr	r1, [r4, #16]
 80078ce:	464a      	mov	r2, r9
 80078d0:	f7ff fb46 	bl	8006f60 <memcpy>
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078de:	81a3      	strh	r3, [r4, #12]
 80078e0:	6126      	str	r6, [r4, #16]
 80078e2:	6165      	str	r5, [r4, #20]
 80078e4:	444e      	add	r6, r9
 80078e6:	eba5 0509 	sub.w	r5, r5, r9
 80078ea:	6026      	str	r6, [r4, #0]
 80078ec:	60a5      	str	r5, [r4, #8]
 80078ee:	463e      	mov	r6, r7
 80078f0:	42be      	cmp	r6, r7
 80078f2:	d900      	bls.n	80078f6 <__ssputs_r+0x86>
 80078f4:	463e      	mov	r6, r7
 80078f6:	6820      	ldr	r0, [r4, #0]
 80078f8:	4632      	mov	r2, r6
 80078fa:	4641      	mov	r1, r8
 80078fc:	f000 ffc0 	bl	8008880 <memmove>
 8007900:	68a3      	ldr	r3, [r4, #8]
 8007902:	1b9b      	subs	r3, r3, r6
 8007904:	60a3      	str	r3, [r4, #8]
 8007906:	6823      	ldr	r3, [r4, #0]
 8007908:	4433      	add	r3, r6
 800790a:	6023      	str	r3, [r4, #0]
 800790c:	2000      	movs	r0, #0
 800790e:	e7db      	b.n	80078c8 <__ssputs_r+0x58>
 8007910:	462a      	mov	r2, r5
 8007912:	f000 ffdb 	bl	80088cc <_realloc_r>
 8007916:	4606      	mov	r6, r0
 8007918:	2800      	cmp	r0, #0
 800791a:	d1e1      	bne.n	80078e0 <__ssputs_r+0x70>
 800791c:	6921      	ldr	r1, [r4, #16]
 800791e:	4650      	mov	r0, sl
 8007920:	f7ff fec6 	bl	80076b0 <_free_r>
 8007924:	e7c7      	b.n	80078b6 <__ssputs_r+0x46>
	...

08007928 <_svfiprintf_r>:
 8007928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792c:	4698      	mov	r8, r3
 800792e:	898b      	ldrh	r3, [r1, #12]
 8007930:	061b      	lsls	r3, r3, #24
 8007932:	b09d      	sub	sp, #116	; 0x74
 8007934:	4607      	mov	r7, r0
 8007936:	460d      	mov	r5, r1
 8007938:	4614      	mov	r4, r2
 800793a:	d50e      	bpl.n	800795a <_svfiprintf_r+0x32>
 800793c:	690b      	ldr	r3, [r1, #16]
 800793e:	b963      	cbnz	r3, 800795a <_svfiprintf_r+0x32>
 8007940:	2140      	movs	r1, #64	; 0x40
 8007942:	f7ff ff21 	bl	8007788 <_malloc_r>
 8007946:	6028      	str	r0, [r5, #0]
 8007948:	6128      	str	r0, [r5, #16]
 800794a:	b920      	cbnz	r0, 8007956 <_svfiprintf_r+0x2e>
 800794c:	230c      	movs	r3, #12
 800794e:	603b      	str	r3, [r7, #0]
 8007950:	f04f 30ff 	mov.w	r0, #4294967295
 8007954:	e0d1      	b.n	8007afa <_svfiprintf_r+0x1d2>
 8007956:	2340      	movs	r3, #64	; 0x40
 8007958:	616b      	str	r3, [r5, #20]
 800795a:	2300      	movs	r3, #0
 800795c:	9309      	str	r3, [sp, #36]	; 0x24
 800795e:	2320      	movs	r3, #32
 8007960:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007964:	f8cd 800c 	str.w	r8, [sp, #12]
 8007968:	2330      	movs	r3, #48	; 0x30
 800796a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b14 <_svfiprintf_r+0x1ec>
 800796e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007972:	f04f 0901 	mov.w	r9, #1
 8007976:	4623      	mov	r3, r4
 8007978:	469a      	mov	sl, r3
 800797a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800797e:	b10a      	cbz	r2, 8007984 <_svfiprintf_r+0x5c>
 8007980:	2a25      	cmp	r2, #37	; 0x25
 8007982:	d1f9      	bne.n	8007978 <_svfiprintf_r+0x50>
 8007984:	ebba 0b04 	subs.w	fp, sl, r4
 8007988:	d00b      	beq.n	80079a2 <_svfiprintf_r+0x7a>
 800798a:	465b      	mov	r3, fp
 800798c:	4622      	mov	r2, r4
 800798e:	4629      	mov	r1, r5
 8007990:	4638      	mov	r0, r7
 8007992:	f7ff ff6d 	bl	8007870 <__ssputs_r>
 8007996:	3001      	adds	r0, #1
 8007998:	f000 80aa 	beq.w	8007af0 <_svfiprintf_r+0x1c8>
 800799c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800799e:	445a      	add	r2, fp
 80079a0:	9209      	str	r2, [sp, #36]	; 0x24
 80079a2:	f89a 3000 	ldrb.w	r3, [sl]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 80a2 	beq.w	8007af0 <_svfiprintf_r+0x1c8>
 80079ac:	2300      	movs	r3, #0
 80079ae:	f04f 32ff 	mov.w	r2, #4294967295
 80079b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079b6:	f10a 0a01 	add.w	sl, sl, #1
 80079ba:	9304      	str	r3, [sp, #16]
 80079bc:	9307      	str	r3, [sp, #28]
 80079be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079c2:	931a      	str	r3, [sp, #104]	; 0x68
 80079c4:	4654      	mov	r4, sl
 80079c6:	2205      	movs	r2, #5
 80079c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079cc:	4851      	ldr	r0, [pc, #324]	; (8007b14 <_svfiprintf_r+0x1ec>)
 80079ce:	f7f8 fc27 	bl	8000220 <memchr>
 80079d2:	9a04      	ldr	r2, [sp, #16]
 80079d4:	b9d8      	cbnz	r0, 8007a0e <_svfiprintf_r+0xe6>
 80079d6:	06d0      	lsls	r0, r2, #27
 80079d8:	bf44      	itt	mi
 80079da:	2320      	movmi	r3, #32
 80079dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079e0:	0711      	lsls	r1, r2, #28
 80079e2:	bf44      	itt	mi
 80079e4:	232b      	movmi	r3, #43	; 0x2b
 80079e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079ea:	f89a 3000 	ldrb.w	r3, [sl]
 80079ee:	2b2a      	cmp	r3, #42	; 0x2a
 80079f0:	d015      	beq.n	8007a1e <_svfiprintf_r+0xf6>
 80079f2:	9a07      	ldr	r2, [sp, #28]
 80079f4:	4654      	mov	r4, sl
 80079f6:	2000      	movs	r0, #0
 80079f8:	f04f 0c0a 	mov.w	ip, #10
 80079fc:	4621      	mov	r1, r4
 80079fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a02:	3b30      	subs	r3, #48	; 0x30
 8007a04:	2b09      	cmp	r3, #9
 8007a06:	d94e      	bls.n	8007aa6 <_svfiprintf_r+0x17e>
 8007a08:	b1b0      	cbz	r0, 8007a38 <_svfiprintf_r+0x110>
 8007a0a:	9207      	str	r2, [sp, #28]
 8007a0c:	e014      	b.n	8007a38 <_svfiprintf_r+0x110>
 8007a0e:	eba0 0308 	sub.w	r3, r0, r8
 8007a12:	fa09 f303 	lsl.w	r3, r9, r3
 8007a16:	4313      	orrs	r3, r2
 8007a18:	9304      	str	r3, [sp, #16]
 8007a1a:	46a2      	mov	sl, r4
 8007a1c:	e7d2      	b.n	80079c4 <_svfiprintf_r+0x9c>
 8007a1e:	9b03      	ldr	r3, [sp, #12]
 8007a20:	1d19      	adds	r1, r3, #4
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	9103      	str	r1, [sp, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	bfbb      	ittet	lt
 8007a2a:	425b      	neglt	r3, r3
 8007a2c:	f042 0202 	orrlt.w	r2, r2, #2
 8007a30:	9307      	strge	r3, [sp, #28]
 8007a32:	9307      	strlt	r3, [sp, #28]
 8007a34:	bfb8      	it	lt
 8007a36:	9204      	strlt	r2, [sp, #16]
 8007a38:	7823      	ldrb	r3, [r4, #0]
 8007a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a3c:	d10c      	bne.n	8007a58 <_svfiprintf_r+0x130>
 8007a3e:	7863      	ldrb	r3, [r4, #1]
 8007a40:	2b2a      	cmp	r3, #42	; 0x2a
 8007a42:	d135      	bne.n	8007ab0 <_svfiprintf_r+0x188>
 8007a44:	9b03      	ldr	r3, [sp, #12]
 8007a46:	1d1a      	adds	r2, r3, #4
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	9203      	str	r2, [sp, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	bfb8      	it	lt
 8007a50:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a54:	3402      	adds	r4, #2
 8007a56:	9305      	str	r3, [sp, #20]
 8007a58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b24 <_svfiprintf_r+0x1fc>
 8007a5c:	7821      	ldrb	r1, [r4, #0]
 8007a5e:	2203      	movs	r2, #3
 8007a60:	4650      	mov	r0, sl
 8007a62:	f7f8 fbdd 	bl	8000220 <memchr>
 8007a66:	b140      	cbz	r0, 8007a7a <_svfiprintf_r+0x152>
 8007a68:	2340      	movs	r3, #64	; 0x40
 8007a6a:	eba0 000a 	sub.w	r0, r0, sl
 8007a6e:	fa03 f000 	lsl.w	r0, r3, r0
 8007a72:	9b04      	ldr	r3, [sp, #16]
 8007a74:	4303      	orrs	r3, r0
 8007a76:	3401      	adds	r4, #1
 8007a78:	9304      	str	r3, [sp, #16]
 8007a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a7e:	4826      	ldr	r0, [pc, #152]	; (8007b18 <_svfiprintf_r+0x1f0>)
 8007a80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a84:	2206      	movs	r2, #6
 8007a86:	f7f8 fbcb 	bl	8000220 <memchr>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d038      	beq.n	8007b00 <_svfiprintf_r+0x1d8>
 8007a8e:	4b23      	ldr	r3, [pc, #140]	; (8007b1c <_svfiprintf_r+0x1f4>)
 8007a90:	bb1b      	cbnz	r3, 8007ada <_svfiprintf_r+0x1b2>
 8007a92:	9b03      	ldr	r3, [sp, #12]
 8007a94:	3307      	adds	r3, #7
 8007a96:	f023 0307 	bic.w	r3, r3, #7
 8007a9a:	3308      	adds	r3, #8
 8007a9c:	9303      	str	r3, [sp, #12]
 8007a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa0:	4433      	add	r3, r6
 8007aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa4:	e767      	b.n	8007976 <_svfiprintf_r+0x4e>
 8007aa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aaa:	460c      	mov	r4, r1
 8007aac:	2001      	movs	r0, #1
 8007aae:	e7a5      	b.n	80079fc <_svfiprintf_r+0xd4>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	3401      	adds	r4, #1
 8007ab4:	9305      	str	r3, [sp, #20]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	f04f 0c0a 	mov.w	ip, #10
 8007abc:	4620      	mov	r0, r4
 8007abe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ac2:	3a30      	subs	r2, #48	; 0x30
 8007ac4:	2a09      	cmp	r2, #9
 8007ac6:	d903      	bls.n	8007ad0 <_svfiprintf_r+0x1a8>
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0c5      	beq.n	8007a58 <_svfiprintf_r+0x130>
 8007acc:	9105      	str	r1, [sp, #20]
 8007ace:	e7c3      	b.n	8007a58 <_svfiprintf_r+0x130>
 8007ad0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e7f0      	b.n	8007abc <_svfiprintf_r+0x194>
 8007ada:	ab03      	add	r3, sp, #12
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	462a      	mov	r2, r5
 8007ae0:	4b0f      	ldr	r3, [pc, #60]	; (8007b20 <_svfiprintf_r+0x1f8>)
 8007ae2:	a904      	add	r1, sp, #16
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	f7fd ff25 	bl	8005934 <_printf_float>
 8007aea:	1c42      	adds	r2, r0, #1
 8007aec:	4606      	mov	r6, r0
 8007aee:	d1d6      	bne.n	8007a9e <_svfiprintf_r+0x176>
 8007af0:	89ab      	ldrh	r3, [r5, #12]
 8007af2:	065b      	lsls	r3, r3, #25
 8007af4:	f53f af2c 	bmi.w	8007950 <_svfiprintf_r+0x28>
 8007af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007afa:	b01d      	add	sp, #116	; 0x74
 8007afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b00:	ab03      	add	r3, sp, #12
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	462a      	mov	r2, r5
 8007b06:	4b06      	ldr	r3, [pc, #24]	; (8007b20 <_svfiprintf_r+0x1f8>)
 8007b08:	a904      	add	r1, sp, #16
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	f7fe f9b6 	bl	8005e7c <_printf_i>
 8007b10:	e7eb      	b.n	8007aea <_svfiprintf_r+0x1c2>
 8007b12:	bf00      	nop
 8007b14:	080092f4 	.word	0x080092f4
 8007b18:	080092fe 	.word	0x080092fe
 8007b1c:	08005935 	.word	0x08005935
 8007b20:	08007871 	.word	0x08007871
 8007b24:	080092fa 	.word	0x080092fa

08007b28 <_sungetc_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	1c4b      	adds	r3, r1, #1
 8007b2c:	4614      	mov	r4, r2
 8007b2e:	d103      	bne.n	8007b38 <_sungetc_r+0x10>
 8007b30:	f04f 35ff 	mov.w	r5, #4294967295
 8007b34:	4628      	mov	r0, r5
 8007b36:	bd38      	pop	{r3, r4, r5, pc}
 8007b38:	8993      	ldrh	r3, [r2, #12]
 8007b3a:	f023 0320 	bic.w	r3, r3, #32
 8007b3e:	8193      	strh	r3, [r2, #12]
 8007b40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b42:	6852      	ldr	r2, [r2, #4]
 8007b44:	b2cd      	uxtb	r5, r1
 8007b46:	b18b      	cbz	r3, 8007b6c <_sungetc_r+0x44>
 8007b48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	dd08      	ble.n	8007b60 <_sungetc_r+0x38>
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	1e5a      	subs	r2, r3, #1
 8007b52:	6022      	str	r2, [r4, #0]
 8007b54:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007b58:	6863      	ldr	r3, [r4, #4]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	6063      	str	r3, [r4, #4]
 8007b5e:	e7e9      	b.n	8007b34 <_sungetc_r+0xc>
 8007b60:	4621      	mov	r1, r4
 8007b62:	f000 fc57 	bl	8008414 <__submore>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d0f1      	beq.n	8007b4e <_sungetc_r+0x26>
 8007b6a:	e7e1      	b.n	8007b30 <_sungetc_r+0x8>
 8007b6c:	6921      	ldr	r1, [r4, #16]
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	b151      	cbz	r1, 8007b88 <_sungetc_r+0x60>
 8007b72:	4299      	cmp	r1, r3
 8007b74:	d208      	bcs.n	8007b88 <_sungetc_r+0x60>
 8007b76:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007b7a:	42a9      	cmp	r1, r5
 8007b7c:	d104      	bne.n	8007b88 <_sungetc_r+0x60>
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	3201      	adds	r2, #1
 8007b82:	6023      	str	r3, [r4, #0]
 8007b84:	6062      	str	r2, [r4, #4]
 8007b86:	e7d5      	b.n	8007b34 <_sungetc_r+0xc>
 8007b88:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b90:	6363      	str	r3, [r4, #52]	; 0x34
 8007b92:	2303      	movs	r3, #3
 8007b94:	63a3      	str	r3, [r4, #56]	; 0x38
 8007b96:	4623      	mov	r3, r4
 8007b98:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e7dc      	b.n	8007b5c <_sungetc_r+0x34>

08007ba2 <__ssrefill_r>:
 8007ba2:	b510      	push	{r4, lr}
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007ba8:	b169      	cbz	r1, 8007bc6 <__ssrefill_r+0x24>
 8007baa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bae:	4299      	cmp	r1, r3
 8007bb0:	d001      	beq.n	8007bb6 <__ssrefill_r+0x14>
 8007bb2:	f7ff fd7d 	bl	80076b0 <_free_r>
 8007bb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bb8:	6063      	str	r3, [r4, #4]
 8007bba:	2000      	movs	r0, #0
 8007bbc:	6360      	str	r0, [r4, #52]	; 0x34
 8007bbe:	b113      	cbz	r3, 8007bc6 <__ssrefill_r+0x24>
 8007bc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007bc2:	6023      	str	r3, [r4, #0]
 8007bc4:	bd10      	pop	{r4, pc}
 8007bc6:	6923      	ldr	r3, [r4, #16]
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	6063      	str	r3, [r4, #4]
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	f043 0320 	orr.w	r3, r3, #32
 8007bd4:	81a3      	strh	r3, [r4, #12]
 8007bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bda:	e7f3      	b.n	8007bc4 <__ssrefill_r+0x22>

08007bdc <__ssvfiscanf_r>:
 8007bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be0:	460c      	mov	r4, r1
 8007be2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007be6:	2100      	movs	r1, #0
 8007be8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007bec:	49a6      	ldr	r1, [pc, #664]	; (8007e88 <__ssvfiscanf_r+0x2ac>)
 8007bee:	91a0      	str	r1, [sp, #640]	; 0x280
 8007bf0:	f10d 0804 	add.w	r8, sp, #4
 8007bf4:	49a5      	ldr	r1, [pc, #660]	; (8007e8c <__ssvfiscanf_r+0x2b0>)
 8007bf6:	4fa6      	ldr	r7, [pc, #664]	; (8007e90 <__ssvfiscanf_r+0x2b4>)
 8007bf8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007e94 <__ssvfiscanf_r+0x2b8>
 8007bfc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007c00:	4606      	mov	r6, r0
 8007c02:	91a1      	str	r1, [sp, #644]	; 0x284
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	7813      	ldrb	r3, [r2, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 815a 	beq.w	8007ec2 <__ssvfiscanf_r+0x2e6>
 8007c0e:	5dd9      	ldrb	r1, [r3, r7]
 8007c10:	f011 0108 	ands.w	r1, r1, #8
 8007c14:	f102 0501 	add.w	r5, r2, #1
 8007c18:	d019      	beq.n	8007c4e <__ssvfiscanf_r+0x72>
 8007c1a:	6863      	ldr	r3, [r4, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	dd0f      	ble.n	8007c40 <__ssvfiscanf_r+0x64>
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	781a      	ldrb	r2, [r3, #0]
 8007c24:	5cba      	ldrb	r2, [r7, r2]
 8007c26:	0712      	lsls	r2, r2, #28
 8007c28:	d401      	bmi.n	8007c2e <__ssvfiscanf_r+0x52>
 8007c2a:	462a      	mov	r2, r5
 8007c2c:	e7eb      	b.n	8007c06 <__ssvfiscanf_r+0x2a>
 8007c2e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007c30:	3201      	adds	r2, #1
 8007c32:	9245      	str	r2, [sp, #276]	; 0x114
 8007c34:	6862      	ldr	r2, [r4, #4]
 8007c36:	3301      	adds	r3, #1
 8007c38:	3a01      	subs	r2, #1
 8007c3a:	6062      	str	r2, [r4, #4]
 8007c3c:	6023      	str	r3, [r4, #0]
 8007c3e:	e7ec      	b.n	8007c1a <__ssvfiscanf_r+0x3e>
 8007c40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007c42:	4621      	mov	r1, r4
 8007c44:	4630      	mov	r0, r6
 8007c46:	4798      	blx	r3
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d0e9      	beq.n	8007c20 <__ssvfiscanf_r+0x44>
 8007c4c:	e7ed      	b.n	8007c2a <__ssvfiscanf_r+0x4e>
 8007c4e:	2b25      	cmp	r3, #37	; 0x25
 8007c50:	d012      	beq.n	8007c78 <__ssvfiscanf_r+0x9c>
 8007c52:	469a      	mov	sl, r3
 8007c54:	6863      	ldr	r3, [r4, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f340 8091 	ble.w	8007d7e <__ssvfiscanf_r+0x1a2>
 8007c5c:	6822      	ldr	r2, [r4, #0]
 8007c5e:	7813      	ldrb	r3, [r2, #0]
 8007c60:	4553      	cmp	r3, sl
 8007c62:	f040 812e 	bne.w	8007ec2 <__ssvfiscanf_r+0x2e6>
 8007c66:	6863      	ldr	r3, [r4, #4]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	6063      	str	r3, [r4, #4]
 8007c6c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007c6e:	3201      	adds	r2, #1
 8007c70:	3301      	adds	r3, #1
 8007c72:	6022      	str	r2, [r4, #0]
 8007c74:	9345      	str	r3, [sp, #276]	; 0x114
 8007c76:	e7d8      	b.n	8007c2a <__ssvfiscanf_r+0x4e>
 8007c78:	9141      	str	r1, [sp, #260]	; 0x104
 8007c7a:	9143      	str	r1, [sp, #268]	; 0x10c
 8007c7c:	7853      	ldrb	r3, [r2, #1]
 8007c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c80:	bf02      	ittt	eq
 8007c82:	2310      	moveq	r3, #16
 8007c84:	1c95      	addeq	r5, r2, #2
 8007c86:	9341      	streq	r3, [sp, #260]	; 0x104
 8007c88:	220a      	movs	r2, #10
 8007c8a:	46aa      	mov	sl, r5
 8007c8c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007c90:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007c94:	2b09      	cmp	r3, #9
 8007c96:	d91d      	bls.n	8007cd4 <__ssvfiscanf_r+0xf8>
 8007c98:	487e      	ldr	r0, [pc, #504]	; (8007e94 <__ssvfiscanf_r+0x2b8>)
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	f7f8 fac0 	bl	8000220 <memchr>
 8007ca0:	b140      	cbz	r0, 8007cb4 <__ssvfiscanf_r+0xd8>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	eba0 0009 	sub.w	r0, r0, r9
 8007ca8:	fa03 f000 	lsl.w	r0, r3, r0
 8007cac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007cae:	4318      	orrs	r0, r3
 8007cb0:	9041      	str	r0, [sp, #260]	; 0x104
 8007cb2:	4655      	mov	r5, sl
 8007cb4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007cb8:	2b78      	cmp	r3, #120	; 0x78
 8007cba:	d806      	bhi.n	8007cca <__ssvfiscanf_r+0xee>
 8007cbc:	2b57      	cmp	r3, #87	; 0x57
 8007cbe:	d810      	bhi.n	8007ce2 <__ssvfiscanf_r+0x106>
 8007cc0:	2b25      	cmp	r3, #37	; 0x25
 8007cc2:	d0c6      	beq.n	8007c52 <__ssvfiscanf_r+0x76>
 8007cc4:	d856      	bhi.n	8007d74 <__ssvfiscanf_r+0x198>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d064      	beq.n	8007d94 <__ssvfiscanf_r+0x1b8>
 8007cca:	2303      	movs	r3, #3
 8007ccc:	9347      	str	r3, [sp, #284]	; 0x11c
 8007cce:	230a      	movs	r3, #10
 8007cd0:	9342      	str	r3, [sp, #264]	; 0x108
 8007cd2:	e071      	b.n	8007db8 <__ssvfiscanf_r+0x1dc>
 8007cd4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007cd6:	fb02 1103 	mla	r1, r2, r3, r1
 8007cda:	3930      	subs	r1, #48	; 0x30
 8007cdc:	9143      	str	r1, [sp, #268]	; 0x10c
 8007cde:	4655      	mov	r5, sl
 8007ce0:	e7d3      	b.n	8007c8a <__ssvfiscanf_r+0xae>
 8007ce2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007ce6:	2a20      	cmp	r2, #32
 8007ce8:	d8ef      	bhi.n	8007cca <__ssvfiscanf_r+0xee>
 8007cea:	a101      	add	r1, pc, #4	; (adr r1, 8007cf0 <__ssvfiscanf_r+0x114>)
 8007cec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007cf0:	08007da3 	.word	0x08007da3
 8007cf4:	08007ccb 	.word	0x08007ccb
 8007cf8:	08007ccb 	.word	0x08007ccb
 8007cfc:	08007e01 	.word	0x08007e01
 8007d00:	08007ccb 	.word	0x08007ccb
 8007d04:	08007ccb 	.word	0x08007ccb
 8007d08:	08007ccb 	.word	0x08007ccb
 8007d0c:	08007ccb 	.word	0x08007ccb
 8007d10:	08007ccb 	.word	0x08007ccb
 8007d14:	08007ccb 	.word	0x08007ccb
 8007d18:	08007ccb 	.word	0x08007ccb
 8007d1c:	08007e17 	.word	0x08007e17
 8007d20:	08007ded 	.word	0x08007ded
 8007d24:	08007d7b 	.word	0x08007d7b
 8007d28:	08007d7b 	.word	0x08007d7b
 8007d2c:	08007d7b 	.word	0x08007d7b
 8007d30:	08007ccb 	.word	0x08007ccb
 8007d34:	08007df1 	.word	0x08007df1
 8007d38:	08007ccb 	.word	0x08007ccb
 8007d3c:	08007ccb 	.word	0x08007ccb
 8007d40:	08007ccb 	.word	0x08007ccb
 8007d44:	08007ccb 	.word	0x08007ccb
 8007d48:	08007e27 	.word	0x08007e27
 8007d4c:	08007df9 	.word	0x08007df9
 8007d50:	08007d9b 	.word	0x08007d9b
 8007d54:	08007ccb 	.word	0x08007ccb
 8007d58:	08007ccb 	.word	0x08007ccb
 8007d5c:	08007e23 	.word	0x08007e23
 8007d60:	08007ccb 	.word	0x08007ccb
 8007d64:	08007ded 	.word	0x08007ded
 8007d68:	08007ccb 	.word	0x08007ccb
 8007d6c:	08007ccb 	.word	0x08007ccb
 8007d70:	08007da3 	.word	0x08007da3
 8007d74:	3b45      	subs	r3, #69	; 0x45
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d8a7      	bhi.n	8007cca <__ssvfiscanf_r+0xee>
 8007d7a:	2305      	movs	r3, #5
 8007d7c:	e01b      	b.n	8007db6 <__ssvfiscanf_r+0x1da>
 8007d7e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007d80:	4621      	mov	r1, r4
 8007d82:	4630      	mov	r0, r6
 8007d84:	4798      	blx	r3
 8007d86:	2800      	cmp	r0, #0
 8007d88:	f43f af68 	beq.w	8007c5c <__ssvfiscanf_r+0x80>
 8007d8c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f040 808d 	bne.w	8007eae <__ssvfiscanf_r+0x2d2>
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295
 8007d98:	e08f      	b.n	8007eba <__ssvfiscanf_r+0x2de>
 8007d9a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007d9c:	f042 0220 	orr.w	r2, r2, #32
 8007da0:	9241      	str	r2, [sp, #260]	; 0x104
 8007da2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007da8:	9241      	str	r2, [sp, #260]	; 0x104
 8007daa:	2210      	movs	r2, #16
 8007dac:	2b6f      	cmp	r3, #111	; 0x6f
 8007dae:	9242      	str	r2, [sp, #264]	; 0x108
 8007db0:	bf34      	ite	cc
 8007db2:	2303      	movcc	r3, #3
 8007db4:	2304      	movcs	r3, #4
 8007db6:	9347      	str	r3, [sp, #284]	; 0x11c
 8007db8:	6863      	ldr	r3, [r4, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	dd42      	ble.n	8007e44 <__ssvfiscanf_r+0x268>
 8007dbe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007dc0:	0659      	lsls	r1, r3, #25
 8007dc2:	d404      	bmi.n	8007dce <__ssvfiscanf_r+0x1f2>
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	781a      	ldrb	r2, [r3, #0]
 8007dc8:	5cba      	ldrb	r2, [r7, r2]
 8007dca:	0712      	lsls	r2, r2, #28
 8007dcc:	d441      	bmi.n	8007e52 <__ssvfiscanf_r+0x276>
 8007dce:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	dc50      	bgt.n	8007e76 <__ssvfiscanf_r+0x29a>
 8007dd4:	466b      	mov	r3, sp
 8007dd6:	4622      	mov	r2, r4
 8007dd8:	a941      	add	r1, sp, #260	; 0x104
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f000 f876 	bl	8007ecc <_scanf_chars>
 8007de0:	2801      	cmp	r0, #1
 8007de2:	d06e      	beq.n	8007ec2 <__ssvfiscanf_r+0x2e6>
 8007de4:	2802      	cmp	r0, #2
 8007de6:	f47f af20 	bne.w	8007c2a <__ssvfiscanf_r+0x4e>
 8007dea:	e7cf      	b.n	8007d8c <__ssvfiscanf_r+0x1b0>
 8007dec:	220a      	movs	r2, #10
 8007dee:	e7dd      	b.n	8007dac <__ssvfiscanf_r+0x1d0>
 8007df0:	2300      	movs	r3, #0
 8007df2:	9342      	str	r3, [sp, #264]	; 0x108
 8007df4:	2303      	movs	r3, #3
 8007df6:	e7de      	b.n	8007db6 <__ssvfiscanf_r+0x1da>
 8007df8:	2308      	movs	r3, #8
 8007dfa:	9342      	str	r3, [sp, #264]	; 0x108
 8007dfc:	2304      	movs	r3, #4
 8007dfe:	e7da      	b.n	8007db6 <__ssvfiscanf_r+0x1da>
 8007e00:	4629      	mov	r1, r5
 8007e02:	4640      	mov	r0, r8
 8007e04:	f000 f9d6 	bl	80081b4 <__sccl>
 8007e08:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e0e:	9341      	str	r3, [sp, #260]	; 0x104
 8007e10:	4605      	mov	r5, r0
 8007e12:	2301      	movs	r3, #1
 8007e14:	e7cf      	b.n	8007db6 <__ssvfiscanf_r+0x1da>
 8007e16:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e1c:	9341      	str	r3, [sp, #260]	; 0x104
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e7c9      	b.n	8007db6 <__ssvfiscanf_r+0x1da>
 8007e22:	2302      	movs	r3, #2
 8007e24:	e7c7      	b.n	8007db6 <__ssvfiscanf_r+0x1da>
 8007e26:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007e28:	06c3      	lsls	r3, r0, #27
 8007e2a:	f53f aefe 	bmi.w	8007c2a <__ssvfiscanf_r+0x4e>
 8007e2e:	9b00      	ldr	r3, [sp, #0]
 8007e30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007e32:	1d19      	adds	r1, r3, #4
 8007e34:	9100      	str	r1, [sp, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f010 0f01 	tst.w	r0, #1
 8007e3c:	bf14      	ite	ne
 8007e3e:	801a      	strhne	r2, [r3, #0]
 8007e40:	601a      	streq	r2, [r3, #0]
 8007e42:	e6f2      	b.n	8007c2a <__ssvfiscanf_r+0x4e>
 8007e44:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007e46:	4621      	mov	r1, r4
 8007e48:	4630      	mov	r0, r6
 8007e4a:	4798      	blx	r3
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d0b6      	beq.n	8007dbe <__ssvfiscanf_r+0x1e2>
 8007e50:	e79c      	b.n	8007d8c <__ssvfiscanf_r+0x1b0>
 8007e52:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007e54:	3201      	adds	r2, #1
 8007e56:	9245      	str	r2, [sp, #276]	; 0x114
 8007e58:	6862      	ldr	r2, [r4, #4]
 8007e5a:	3a01      	subs	r2, #1
 8007e5c:	2a00      	cmp	r2, #0
 8007e5e:	6062      	str	r2, [r4, #4]
 8007e60:	dd02      	ble.n	8007e68 <__ssvfiscanf_r+0x28c>
 8007e62:	3301      	adds	r3, #1
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	e7ad      	b.n	8007dc4 <__ssvfiscanf_r+0x1e8>
 8007e68:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	4798      	blx	r3
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d0a7      	beq.n	8007dc4 <__ssvfiscanf_r+0x1e8>
 8007e74:	e78a      	b.n	8007d8c <__ssvfiscanf_r+0x1b0>
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	dc0e      	bgt.n	8007e98 <__ssvfiscanf_r+0x2bc>
 8007e7a:	466b      	mov	r3, sp
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	a941      	add	r1, sp, #260	; 0x104
 8007e80:	4630      	mov	r0, r6
 8007e82:	f000 f87d 	bl	8007f80 <_scanf_i>
 8007e86:	e7ab      	b.n	8007de0 <__ssvfiscanf_r+0x204>
 8007e88:	08007b29 	.word	0x08007b29
 8007e8c:	08007ba3 	.word	0x08007ba3
 8007e90:	0800935d 	.word	0x0800935d
 8007e94:	080092fa 	.word	0x080092fa
 8007e98:	4b0b      	ldr	r3, [pc, #44]	; (8007ec8 <__ssvfiscanf_r+0x2ec>)
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f43f aec5 	beq.w	8007c2a <__ssvfiscanf_r+0x4e>
 8007ea0:	466b      	mov	r3, sp
 8007ea2:	4622      	mov	r2, r4
 8007ea4:	a941      	add	r1, sp, #260	; 0x104
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f3af 8000 	nop.w
 8007eac:	e798      	b.n	8007de0 <__ssvfiscanf_r+0x204>
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007eb4:	bf18      	it	ne
 8007eb6:	f04f 30ff 	movne.w	r0, #4294967295
 8007eba:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007ec4:	e7f9      	b.n	8007eba <__ssvfiscanf_r+0x2de>
 8007ec6:	bf00      	nop
 8007ec8:	00000000 	.word	0x00000000

08007ecc <_scanf_chars>:
 8007ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ed0:	4615      	mov	r5, r2
 8007ed2:	688a      	ldr	r2, [r1, #8]
 8007ed4:	4680      	mov	r8, r0
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	b932      	cbnz	r2, 8007ee8 <_scanf_chars+0x1c>
 8007eda:	698a      	ldr	r2, [r1, #24]
 8007edc:	2a00      	cmp	r2, #0
 8007ede:	bf0c      	ite	eq
 8007ee0:	2201      	moveq	r2, #1
 8007ee2:	f04f 32ff 	movne.w	r2, #4294967295
 8007ee6:	608a      	str	r2, [r1, #8]
 8007ee8:	6822      	ldr	r2, [r4, #0]
 8007eea:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8007f7c <_scanf_chars+0xb0>
 8007eee:	06d1      	lsls	r1, r2, #27
 8007ef0:	bf5f      	itttt	pl
 8007ef2:	681a      	ldrpl	r2, [r3, #0]
 8007ef4:	1d11      	addpl	r1, r2, #4
 8007ef6:	6019      	strpl	r1, [r3, #0]
 8007ef8:	6816      	ldrpl	r6, [r2, #0]
 8007efa:	2700      	movs	r7, #0
 8007efc:	69a0      	ldr	r0, [r4, #24]
 8007efe:	b188      	cbz	r0, 8007f24 <_scanf_chars+0x58>
 8007f00:	2801      	cmp	r0, #1
 8007f02:	d107      	bne.n	8007f14 <_scanf_chars+0x48>
 8007f04:	682a      	ldr	r2, [r5, #0]
 8007f06:	7811      	ldrb	r1, [r2, #0]
 8007f08:	6962      	ldr	r2, [r4, #20]
 8007f0a:	5c52      	ldrb	r2, [r2, r1]
 8007f0c:	b952      	cbnz	r2, 8007f24 <_scanf_chars+0x58>
 8007f0e:	2f00      	cmp	r7, #0
 8007f10:	d031      	beq.n	8007f76 <_scanf_chars+0xaa>
 8007f12:	e022      	b.n	8007f5a <_scanf_chars+0x8e>
 8007f14:	2802      	cmp	r0, #2
 8007f16:	d120      	bne.n	8007f5a <_scanf_chars+0x8e>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007f20:	071b      	lsls	r3, r3, #28
 8007f22:	d41a      	bmi.n	8007f5a <_scanf_chars+0x8e>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	06da      	lsls	r2, r3, #27
 8007f28:	bf5e      	ittt	pl
 8007f2a:	682b      	ldrpl	r3, [r5, #0]
 8007f2c:	781b      	ldrbpl	r3, [r3, #0]
 8007f2e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007f32:	682a      	ldr	r2, [r5, #0]
 8007f34:	686b      	ldr	r3, [r5, #4]
 8007f36:	3201      	adds	r2, #1
 8007f38:	602a      	str	r2, [r5, #0]
 8007f3a:	68a2      	ldr	r2, [r4, #8]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	3a01      	subs	r2, #1
 8007f40:	606b      	str	r3, [r5, #4]
 8007f42:	3701      	adds	r7, #1
 8007f44:	60a2      	str	r2, [r4, #8]
 8007f46:	b142      	cbz	r2, 8007f5a <_scanf_chars+0x8e>
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	dcd7      	bgt.n	8007efc <_scanf_chars+0x30>
 8007f4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f50:	4629      	mov	r1, r5
 8007f52:	4640      	mov	r0, r8
 8007f54:	4798      	blx	r3
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d0d0      	beq.n	8007efc <_scanf_chars+0x30>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	f013 0310 	ands.w	r3, r3, #16
 8007f60:	d105      	bne.n	8007f6e <_scanf_chars+0xa2>
 8007f62:	68e2      	ldr	r2, [r4, #12]
 8007f64:	3201      	adds	r2, #1
 8007f66:	60e2      	str	r2, [r4, #12]
 8007f68:	69a2      	ldr	r2, [r4, #24]
 8007f6a:	b102      	cbz	r2, 8007f6e <_scanf_chars+0xa2>
 8007f6c:	7033      	strb	r3, [r6, #0]
 8007f6e:	6923      	ldr	r3, [r4, #16]
 8007f70:	443b      	add	r3, r7
 8007f72:	6123      	str	r3, [r4, #16]
 8007f74:	2000      	movs	r0, #0
 8007f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f7a:	bf00      	nop
 8007f7c:	0800935d 	.word	0x0800935d

08007f80 <_scanf_i>:
 8007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f84:	4698      	mov	r8, r3
 8007f86:	4b76      	ldr	r3, [pc, #472]	; (8008160 <_scanf_i+0x1e0>)
 8007f88:	460c      	mov	r4, r1
 8007f8a:	4682      	mov	sl, r0
 8007f8c:	4616      	mov	r6, r2
 8007f8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f92:	b087      	sub	sp, #28
 8007f94:	ab03      	add	r3, sp, #12
 8007f96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007f9a:	4b72      	ldr	r3, [pc, #456]	; (8008164 <_scanf_i+0x1e4>)
 8007f9c:	69a1      	ldr	r1, [r4, #24]
 8007f9e:	4a72      	ldr	r2, [pc, #456]	; (8008168 <_scanf_i+0x1e8>)
 8007fa0:	2903      	cmp	r1, #3
 8007fa2:	bf18      	it	ne
 8007fa4:	461a      	movne	r2, r3
 8007fa6:	68a3      	ldr	r3, [r4, #8]
 8007fa8:	9201      	str	r2, [sp, #4]
 8007faa:	1e5a      	subs	r2, r3, #1
 8007fac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007fb0:	bf88      	it	hi
 8007fb2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007fb6:	4627      	mov	r7, r4
 8007fb8:	bf82      	ittt	hi
 8007fba:	eb03 0905 	addhi.w	r9, r3, r5
 8007fbe:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007fc2:	60a3      	strhi	r3, [r4, #8]
 8007fc4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007fc8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007fcc:	bf98      	it	ls
 8007fce:	f04f 0900 	movls.w	r9, #0
 8007fd2:	6023      	str	r3, [r4, #0]
 8007fd4:	463d      	mov	r5, r7
 8007fd6:	f04f 0b00 	mov.w	fp, #0
 8007fda:	6831      	ldr	r1, [r6, #0]
 8007fdc:	ab03      	add	r3, sp, #12
 8007fde:	7809      	ldrb	r1, [r1, #0]
 8007fe0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007fe4:	2202      	movs	r2, #2
 8007fe6:	f7f8 f91b 	bl	8000220 <memchr>
 8007fea:	b328      	cbz	r0, 8008038 <_scanf_i+0xb8>
 8007fec:	f1bb 0f01 	cmp.w	fp, #1
 8007ff0:	d159      	bne.n	80080a6 <_scanf_i+0x126>
 8007ff2:	6862      	ldr	r2, [r4, #4]
 8007ff4:	b92a      	cbnz	r2, 8008002 <_scanf_i+0x82>
 8007ff6:	6822      	ldr	r2, [r4, #0]
 8007ff8:	2308      	movs	r3, #8
 8007ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ffe:	6063      	str	r3, [r4, #4]
 8008000:	6022      	str	r2, [r4, #0]
 8008002:	6822      	ldr	r2, [r4, #0]
 8008004:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008008:	6022      	str	r2, [r4, #0]
 800800a:	68a2      	ldr	r2, [r4, #8]
 800800c:	1e51      	subs	r1, r2, #1
 800800e:	60a1      	str	r1, [r4, #8]
 8008010:	b192      	cbz	r2, 8008038 <_scanf_i+0xb8>
 8008012:	6832      	ldr	r2, [r6, #0]
 8008014:	1c51      	adds	r1, r2, #1
 8008016:	6031      	str	r1, [r6, #0]
 8008018:	7812      	ldrb	r2, [r2, #0]
 800801a:	f805 2b01 	strb.w	r2, [r5], #1
 800801e:	6872      	ldr	r2, [r6, #4]
 8008020:	3a01      	subs	r2, #1
 8008022:	2a00      	cmp	r2, #0
 8008024:	6072      	str	r2, [r6, #4]
 8008026:	dc07      	bgt.n	8008038 <_scanf_i+0xb8>
 8008028:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800802c:	4631      	mov	r1, r6
 800802e:	4650      	mov	r0, sl
 8008030:	4790      	blx	r2
 8008032:	2800      	cmp	r0, #0
 8008034:	f040 8085 	bne.w	8008142 <_scanf_i+0x1c2>
 8008038:	f10b 0b01 	add.w	fp, fp, #1
 800803c:	f1bb 0f03 	cmp.w	fp, #3
 8008040:	d1cb      	bne.n	8007fda <_scanf_i+0x5a>
 8008042:	6863      	ldr	r3, [r4, #4]
 8008044:	b90b      	cbnz	r3, 800804a <_scanf_i+0xca>
 8008046:	230a      	movs	r3, #10
 8008048:	6063      	str	r3, [r4, #4]
 800804a:	6863      	ldr	r3, [r4, #4]
 800804c:	4947      	ldr	r1, [pc, #284]	; (800816c <_scanf_i+0x1ec>)
 800804e:	6960      	ldr	r0, [r4, #20]
 8008050:	1ac9      	subs	r1, r1, r3
 8008052:	f000 f8af 	bl	80081b4 <__sccl>
 8008056:	f04f 0b00 	mov.w	fp, #0
 800805a:	68a3      	ldr	r3, [r4, #8]
 800805c:	6822      	ldr	r2, [r4, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d03d      	beq.n	80080de <_scanf_i+0x15e>
 8008062:	6831      	ldr	r1, [r6, #0]
 8008064:	6960      	ldr	r0, [r4, #20]
 8008066:	f891 c000 	ldrb.w	ip, [r1]
 800806a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800806e:	2800      	cmp	r0, #0
 8008070:	d035      	beq.n	80080de <_scanf_i+0x15e>
 8008072:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008076:	d124      	bne.n	80080c2 <_scanf_i+0x142>
 8008078:	0510      	lsls	r0, r2, #20
 800807a:	d522      	bpl.n	80080c2 <_scanf_i+0x142>
 800807c:	f10b 0b01 	add.w	fp, fp, #1
 8008080:	f1b9 0f00 	cmp.w	r9, #0
 8008084:	d003      	beq.n	800808e <_scanf_i+0x10e>
 8008086:	3301      	adds	r3, #1
 8008088:	f109 39ff 	add.w	r9, r9, #4294967295
 800808c:	60a3      	str	r3, [r4, #8]
 800808e:	6873      	ldr	r3, [r6, #4]
 8008090:	3b01      	subs	r3, #1
 8008092:	2b00      	cmp	r3, #0
 8008094:	6073      	str	r3, [r6, #4]
 8008096:	dd1b      	ble.n	80080d0 <_scanf_i+0x150>
 8008098:	6833      	ldr	r3, [r6, #0]
 800809a:	3301      	adds	r3, #1
 800809c:	6033      	str	r3, [r6, #0]
 800809e:	68a3      	ldr	r3, [r4, #8]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	60a3      	str	r3, [r4, #8]
 80080a4:	e7d9      	b.n	800805a <_scanf_i+0xda>
 80080a6:	f1bb 0f02 	cmp.w	fp, #2
 80080aa:	d1ae      	bne.n	800800a <_scanf_i+0x8a>
 80080ac:	6822      	ldr	r2, [r4, #0]
 80080ae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80080b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80080b6:	d1bf      	bne.n	8008038 <_scanf_i+0xb8>
 80080b8:	2310      	movs	r3, #16
 80080ba:	6063      	str	r3, [r4, #4]
 80080bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080c0:	e7a2      	b.n	8008008 <_scanf_i+0x88>
 80080c2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80080c6:	6022      	str	r2, [r4, #0]
 80080c8:	780b      	ldrb	r3, [r1, #0]
 80080ca:	f805 3b01 	strb.w	r3, [r5], #1
 80080ce:	e7de      	b.n	800808e <_scanf_i+0x10e>
 80080d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80080d4:	4631      	mov	r1, r6
 80080d6:	4650      	mov	r0, sl
 80080d8:	4798      	blx	r3
 80080da:	2800      	cmp	r0, #0
 80080dc:	d0df      	beq.n	800809e <_scanf_i+0x11e>
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	05db      	lsls	r3, r3, #23
 80080e2:	d50d      	bpl.n	8008100 <_scanf_i+0x180>
 80080e4:	42bd      	cmp	r5, r7
 80080e6:	d909      	bls.n	80080fc <_scanf_i+0x17c>
 80080e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80080ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080f0:	4632      	mov	r2, r6
 80080f2:	4650      	mov	r0, sl
 80080f4:	4798      	blx	r3
 80080f6:	f105 39ff 	add.w	r9, r5, #4294967295
 80080fa:	464d      	mov	r5, r9
 80080fc:	42bd      	cmp	r5, r7
 80080fe:	d02d      	beq.n	800815c <_scanf_i+0x1dc>
 8008100:	6822      	ldr	r2, [r4, #0]
 8008102:	f012 0210 	ands.w	r2, r2, #16
 8008106:	d113      	bne.n	8008130 <_scanf_i+0x1b0>
 8008108:	702a      	strb	r2, [r5, #0]
 800810a:	6863      	ldr	r3, [r4, #4]
 800810c:	9e01      	ldr	r6, [sp, #4]
 800810e:	4639      	mov	r1, r7
 8008110:	4650      	mov	r0, sl
 8008112:	47b0      	blx	r6
 8008114:	6821      	ldr	r1, [r4, #0]
 8008116:	f8d8 3000 	ldr.w	r3, [r8]
 800811a:	f011 0f20 	tst.w	r1, #32
 800811e:	d013      	beq.n	8008148 <_scanf_i+0x1c8>
 8008120:	1d1a      	adds	r2, r3, #4
 8008122:	f8c8 2000 	str.w	r2, [r8]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6018      	str	r0, [r3, #0]
 800812a:	68e3      	ldr	r3, [r4, #12]
 800812c:	3301      	adds	r3, #1
 800812e:	60e3      	str	r3, [r4, #12]
 8008130:	1bed      	subs	r5, r5, r7
 8008132:	44ab      	add	fp, r5
 8008134:	6925      	ldr	r5, [r4, #16]
 8008136:	445d      	add	r5, fp
 8008138:	6125      	str	r5, [r4, #16]
 800813a:	2000      	movs	r0, #0
 800813c:	b007      	add	sp, #28
 800813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008142:	f04f 0b00 	mov.w	fp, #0
 8008146:	e7ca      	b.n	80080de <_scanf_i+0x15e>
 8008148:	1d1a      	adds	r2, r3, #4
 800814a:	f8c8 2000 	str.w	r2, [r8]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f011 0f01 	tst.w	r1, #1
 8008154:	bf14      	ite	ne
 8008156:	8018      	strhne	r0, [r3, #0]
 8008158:	6018      	streq	r0, [r3, #0]
 800815a:	e7e6      	b.n	800812a <_scanf_i+0x1aa>
 800815c:	2001      	movs	r0, #1
 800815e:	e7ed      	b.n	800813c <_scanf_i+0x1bc>
 8008160:	080090ac 	.word	0x080090ac
 8008164:	08008411 	.word	0x08008411
 8008168:	08008329 	.word	0x08008329
 800816c:	0800931e 	.word	0x0800931e

08008170 <_read_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d07      	ldr	r5, [pc, #28]	; (8008190 <_read_r+0x20>)
 8008174:	4604      	mov	r4, r0
 8008176:	4608      	mov	r0, r1
 8008178:	4611      	mov	r1, r2
 800817a:	2200      	movs	r2, #0
 800817c:	602a      	str	r2, [r5, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	f7f9 fc58 	bl	8001a34 <_read>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_read_r+0x1e>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_read_r+0x1e>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	20000318 	.word	0x20000318

08008194 <_sbrk_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d06      	ldr	r5, [pc, #24]	; (80081b0 <_sbrk_r+0x1c>)
 8008198:	2300      	movs	r3, #0
 800819a:	4604      	mov	r4, r0
 800819c:	4608      	mov	r0, r1
 800819e:	602b      	str	r3, [r5, #0]
 80081a0:	f7f9 fcb6 	bl	8001b10 <_sbrk>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d102      	bne.n	80081ae <_sbrk_r+0x1a>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	b103      	cbz	r3, 80081ae <_sbrk_r+0x1a>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	20000318 	.word	0x20000318

080081b4 <__sccl>:
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	780b      	ldrb	r3, [r1, #0]
 80081b8:	4604      	mov	r4, r0
 80081ba:	2b5e      	cmp	r3, #94	; 0x5e
 80081bc:	bf0b      	itete	eq
 80081be:	784b      	ldrbeq	r3, [r1, #1]
 80081c0:	1c48      	addne	r0, r1, #1
 80081c2:	1c88      	addeq	r0, r1, #2
 80081c4:	2200      	movne	r2, #0
 80081c6:	bf08      	it	eq
 80081c8:	2201      	moveq	r2, #1
 80081ca:	1e61      	subs	r1, r4, #1
 80081cc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80081d0:	f801 2f01 	strb.w	r2, [r1, #1]!
 80081d4:	42a9      	cmp	r1, r5
 80081d6:	d1fb      	bne.n	80081d0 <__sccl+0x1c>
 80081d8:	b90b      	cbnz	r3, 80081de <__sccl+0x2a>
 80081da:	3801      	subs	r0, #1
 80081dc:	bd70      	pop	{r4, r5, r6, pc}
 80081de:	f082 0201 	eor.w	r2, r2, #1
 80081e2:	54e2      	strb	r2, [r4, r3]
 80081e4:	4605      	mov	r5, r0
 80081e6:	4628      	mov	r0, r5
 80081e8:	f810 1b01 	ldrb.w	r1, [r0], #1
 80081ec:	292d      	cmp	r1, #45	; 0x2d
 80081ee:	d006      	beq.n	80081fe <__sccl+0x4a>
 80081f0:	295d      	cmp	r1, #93	; 0x5d
 80081f2:	d0f3      	beq.n	80081dc <__sccl+0x28>
 80081f4:	b909      	cbnz	r1, 80081fa <__sccl+0x46>
 80081f6:	4628      	mov	r0, r5
 80081f8:	e7f0      	b.n	80081dc <__sccl+0x28>
 80081fa:	460b      	mov	r3, r1
 80081fc:	e7f1      	b.n	80081e2 <__sccl+0x2e>
 80081fe:	786e      	ldrb	r6, [r5, #1]
 8008200:	2e5d      	cmp	r6, #93	; 0x5d
 8008202:	d0fa      	beq.n	80081fa <__sccl+0x46>
 8008204:	42b3      	cmp	r3, r6
 8008206:	dcf8      	bgt.n	80081fa <__sccl+0x46>
 8008208:	3502      	adds	r5, #2
 800820a:	4619      	mov	r1, r3
 800820c:	3101      	adds	r1, #1
 800820e:	428e      	cmp	r6, r1
 8008210:	5462      	strb	r2, [r4, r1]
 8008212:	dcfb      	bgt.n	800820c <__sccl+0x58>
 8008214:	1af1      	subs	r1, r6, r3
 8008216:	3901      	subs	r1, #1
 8008218:	1c58      	adds	r0, r3, #1
 800821a:	42b3      	cmp	r3, r6
 800821c:	bfa8      	it	ge
 800821e:	2100      	movge	r1, #0
 8008220:	1843      	adds	r3, r0, r1
 8008222:	e7e0      	b.n	80081e6 <__sccl+0x32>

08008224 <_strtol_l.constprop.0>:
 8008224:	2b01      	cmp	r3, #1
 8008226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800822a:	d001      	beq.n	8008230 <_strtol_l.constprop.0+0xc>
 800822c:	2b24      	cmp	r3, #36	; 0x24
 800822e:	d906      	bls.n	800823e <_strtol_l.constprop.0+0x1a>
 8008230:	f7fd faae 	bl	8005790 <__errno>
 8008234:	2316      	movs	r3, #22
 8008236:	6003      	str	r3, [r0, #0]
 8008238:	2000      	movs	r0, #0
 800823a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800823e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008324 <_strtol_l.constprop.0+0x100>
 8008242:	460d      	mov	r5, r1
 8008244:	462e      	mov	r6, r5
 8008246:	f815 4b01 	ldrb.w	r4, [r5], #1
 800824a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800824e:	f017 0708 	ands.w	r7, r7, #8
 8008252:	d1f7      	bne.n	8008244 <_strtol_l.constprop.0+0x20>
 8008254:	2c2d      	cmp	r4, #45	; 0x2d
 8008256:	d132      	bne.n	80082be <_strtol_l.constprop.0+0x9a>
 8008258:	782c      	ldrb	r4, [r5, #0]
 800825a:	2701      	movs	r7, #1
 800825c:	1cb5      	adds	r5, r6, #2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d05b      	beq.n	800831a <_strtol_l.constprop.0+0xf6>
 8008262:	2b10      	cmp	r3, #16
 8008264:	d109      	bne.n	800827a <_strtol_l.constprop.0+0x56>
 8008266:	2c30      	cmp	r4, #48	; 0x30
 8008268:	d107      	bne.n	800827a <_strtol_l.constprop.0+0x56>
 800826a:	782c      	ldrb	r4, [r5, #0]
 800826c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008270:	2c58      	cmp	r4, #88	; 0x58
 8008272:	d14d      	bne.n	8008310 <_strtol_l.constprop.0+0xec>
 8008274:	786c      	ldrb	r4, [r5, #1]
 8008276:	2310      	movs	r3, #16
 8008278:	3502      	adds	r5, #2
 800827a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800827e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008282:	f04f 0c00 	mov.w	ip, #0
 8008286:	fbb8 f9f3 	udiv	r9, r8, r3
 800828a:	4666      	mov	r6, ip
 800828c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008290:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008294:	f1be 0f09 	cmp.w	lr, #9
 8008298:	d816      	bhi.n	80082c8 <_strtol_l.constprop.0+0xa4>
 800829a:	4674      	mov	r4, lr
 800829c:	42a3      	cmp	r3, r4
 800829e:	dd24      	ble.n	80082ea <_strtol_l.constprop.0+0xc6>
 80082a0:	f1bc 0f00 	cmp.w	ip, #0
 80082a4:	db1e      	blt.n	80082e4 <_strtol_l.constprop.0+0xc0>
 80082a6:	45b1      	cmp	r9, r6
 80082a8:	d31c      	bcc.n	80082e4 <_strtol_l.constprop.0+0xc0>
 80082aa:	d101      	bne.n	80082b0 <_strtol_l.constprop.0+0x8c>
 80082ac:	45a2      	cmp	sl, r4
 80082ae:	db19      	blt.n	80082e4 <_strtol_l.constprop.0+0xc0>
 80082b0:	fb06 4603 	mla	r6, r6, r3, r4
 80082b4:	f04f 0c01 	mov.w	ip, #1
 80082b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082bc:	e7e8      	b.n	8008290 <_strtol_l.constprop.0+0x6c>
 80082be:	2c2b      	cmp	r4, #43	; 0x2b
 80082c0:	bf04      	itt	eq
 80082c2:	782c      	ldrbeq	r4, [r5, #0]
 80082c4:	1cb5      	addeq	r5, r6, #2
 80082c6:	e7ca      	b.n	800825e <_strtol_l.constprop.0+0x3a>
 80082c8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80082cc:	f1be 0f19 	cmp.w	lr, #25
 80082d0:	d801      	bhi.n	80082d6 <_strtol_l.constprop.0+0xb2>
 80082d2:	3c37      	subs	r4, #55	; 0x37
 80082d4:	e7e2      	b.n	800829c <_strtol_l.constprop.0+0x78>
 80082d6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80082da:	f1be 0f19 	cmp.w	lr, #25
 80082de:	d804      	bhi.n	80082ea <_strtol_l.constprop.0+0xc6>
 80082e0:	3c57      	subs	r4, #87	; 0x57
 80082e2:	e7db      	b.n	800829c <_strtol_l.constprop.0+0x78>
 80082e4:	f04f 3cff 	mov.w	ip, #4294967295
 80082e8:	e7e6      	b.n	80082b8 <_strtol_l.constprop.0+0x94>
 80082ea:	f1bc 0f00 	cmp.w	ip, #0
 80082ee:	da05      	bge.n	80082fc <_strtol_l.constprop.0+0xd8>
 80082f0:	2322      	movs	r3, #34	; 0x22
 80082f2:	6003      	str	r3, [r0, #0]
 80082f4:	4646      	mov	r6, r8
 80082f6:	b942      	cbnz	r2, 800830a <_strtol_l.constprop.0+0xe6>
 80082f8:	4630      	mov	r0, r6
 80082fa:	e79e      	b.n	800823a <_strtol_l.constprop.0+0x16>
 80082fc:	b107      	cbz	r7, 8008300 <_strtol_l.constprop.0+0xdc>
 80082fe:	4276      	negs	r6, r6
 8008300:	2a00      	cmp	r2, #0
 8008302:	d0f9      	beq.n	80082f8 <_strtol_l.constprop.0+0xd4>
 8008304:	f1bc 0f00 	cmp.w	ip, #0
 8008308:	d000      	beq.n	800830c <_strtol_l.constprop.0+0xe8>
 800830a:	1e69      	subs	r1, r5, #1
 800830c:	6011      	str	r1, [r2, #0]
 800830e:	e7f3      	b.n	80082f8 <_strtol_l.constprop.0+0xd4>
 8008310:	2430      	movs	r4, #48	; 0x30
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1b1      	bne.n	800827a <_strtol_l.constprop.0+0x56>
 8008316:	2308      	movs	r3, #8
 8008318:	e7af      	b.n	800827a <_strtol_l.constprop.0+0x56>
 800831a:	2c30      	cmp	r4, #48	; 0x30
 800831c:	d0a5      	beq.n	800826a <_strtol_l.constprop.0+0x46>
 800831e:	230a      	movs	r3, #10
 8008320:	e7ab      	b.n	800827a <_strtol_l.constprop.0+0x56>
 8008322:	bf00      	nop
 8008324:	0800935d 	.word	0x0800935d

08008328 <_strtol_r>:
 8008328:	f7ff bf7c 	b.w	8008224 <_strtol_l.constprop.0>

0800832c <_strtoul_l.constprop.0>:
 800832c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008330:	4f36      	ldr	r7, [pc, #216]	; (800840c <_strtoul_l.constprop.0+0xe0>)
 8008332:	4686      	mov	lr, r0
 8008334:	460d      	mov	r5, r1
 8008336:	4628      	mov	r0, r5
 8008338:	f815 4b01 	ldrb.w	r4, [r5], #1
 800833c:	5de6      	ldrb	r6, [r4, r7]
 800833e:	f016 0608 	ands.w	r6, r6, #8
 8008342:	d1f8      	bne.n	8008336 <_strtoul_l.constprop.0+0xa>
 8008344:	2c2d      	cmp	r4, #45	; 0x2d
 8008346:	d12f      	bne.n	80083a8 <_strtoul_l.constprop.0+0x7c>
 8008348:	782c      	ldrb	r4, [r5, #0]
 800834a:	2601      	movs	r6, #1
 800834c:	1c85      	adds	r5, r0, #2
 800834e:	2b00      	cmp	r3, #0
 8008350:	d057      	beq.n	8008402 <_strtoul_l.constprop.0+0xd6>
 8008352:	2b10      	cmp	r3, #16
 8008354:	d109      	bne.n	800836a <_strtoul_l.constprop.0+0x3e>
 8008356:	2c30      	cmp	r4, #48	; 0x30
 8008358:	d107      	bne.n	800836a <_strtoul_l.constprop.0+0x3e>
 800835a:	7828      	ldrb	r0, [r5, #0]
 800835c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008360:	2858      	cmp	r0, #88	; 0x58
 8008362:	d149      	bne.n	80083f8 <_strtoul_l.constprop.0+0xcc>
 8008364:	786c      	ldrb	r4, [r5, #1]
 8008366:	2310      	movs	r3, #16
 8008368:	3502      	adds	r5, #2
 800836a:	f04f 38ff 	mov.w	r8, #4294967295
 800836e:	2700      	movs	r7, #0
 8008370:	fbb8 f8f3 	udiv	r8, r8, r3
 8008374:	fb03 f908 	mul.w	r9, r3, r8
 8008378:	ea6f 0909 	mvn.w	r9, r9
 800837c:	4638      	mov	r0, r7
 800837e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008382:	f1bc 0f09 	cmp.w	ip, #9
 8008386:	d814      	bhi.n	80083b2 <_strtoul_l.constprop.0+0x86>
 8008388:	4664      	mov	r4, ip
 800838a:	42a3      	cmp	r3, r4
 800838c:	dd22      	ble.n	80083d4 <_strtoul_l.constprop.0+0xa8>
 800838e:	2f00      	cmp	r7, #0
 8008390:	db1d      	blt.n	80083ce <_strtoul_l.constprop.0+0xa2>
 8008392:	4580      	cmp	r8, r0
 8008394:	d31b      	bcc.n	80083ce <_strtoul_l.constprop.0+0xa2>
 8008396:	d101      	bne.n	800839c <_strtoul_l.constprop.0+0x70>
 8008398:	45a1      	cmp	r9, r4
 800839a:	db18      	blt.n	80083ce <_strtoul_l.constprop.0+0xa2>
 800839c:	fb00 4003 	mla	r0, r0, r3, r4
 80083a0:	2701      	movs	r7, #1
 80083a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083a6:	e7ea      	b.n	800837e <_strtoul_l.constprop.0+0x52>
 80083a8:	2c2b      	cmp	r4, #43	; 0x2b
 80083aa:	bf04      	itt	eq
 80083ac:	782c      	ldrbeq	r4, [r5, #0]
 80083ae:	1c85      	addeq	r5, r0, #2
 80083b0:	e7cd      	b.n	800834e <_strtoul_l.constprop.0+0x22>
 80083b2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80083b6:	f1bc 0f19 	cmp.w	ip, #25
 80083ba:	d801      	bhi.n	80083c0 <_strtoul_l.constprop.0+0x94>
 80083bc:	3c37      	subs	r4, #55	; 0x37
 80083be:	e7e4      	b.n	800838a <_strtoul_l.constprop.0+0x5e>
 80083c0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80083c4:	f1bc 0f19 	cmp.w	ip, #25
 80083c8:	d804      	bhi.n	80083d4 <_strtoul_l.constprop.0+0xa8>
 80083ca:	3c57      	subs	r4, #87	; 0x57
 80083cc:	e7dd      	b.n	800838a <_strtoul_l.constprop.0+0x5e>
 80083ce:	f04f 37ff 	mov.w	r7, #4294967295
 80083d2:	e7e6      	b.n	80083a2 <_strtoul_l.constprop.0+0x76>
 80083d4:	2f00      	cmp	r7, #0
 80083d6:	da07      	bge.n	80083e8 <_strtoul_l.constprop.0+0xbc>
 80083d8:	2322      	movs	r3, #34	; 0x22
 80083da:	f8ce 3000 	str.w	r3, [lr]
 80083de:	f04f 30ff 	mov.w	r0, #4294967295
 80083e2:	b932      	cbnz	r2, 80083f2 <_strtoul_l.constprop.0+0xc6>
 80083e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083e8:	b106      	cbz	r6, 80083ec <_strtoul_l.constprop.0+0xc0>
 80083ea:	4240      	negs	r0, r0
 80083ec:	2a00      	cmp	r2, #0
 80083ee:	d0f9      	beq.n	80083e4 <_strtoul_l.constprop.0+0xb8>
 80083f0:	b107      	cbz	r7, 80083f4 <_strtoul_l.constprop.0+0xc8>
 80083f2:	1e69      	subs	r1, r5, #1
 80083f4:	6011      	str	r1, [r2, #0]
 80083f6:	e7f5      	b.n	80083e4 <_strtoul_l.constprop.0+0xb8>
 80083f8:	2430      	movs	r4, #48	; 0x30
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1b5      	bne.n	800836a <_strtoul_l.constprop.0+0x3e>
 80083fe:	2308      	movs	r3, #8
 8008400:	e7b3      	b.n	800836a <_strtoul_l.constprop.0+0x3e>
 8008402:	2c30      	cmp	r4, #48	; 0x30
 8008404:	d0a9      	beq.n	800835a <_strtoul_l.constprop.0+0x2e>
 8008406:	230a      	movs	r3, #10
 8008408:	e7af      	b.n	800836a <_strtoul_l.constprop.0+0x3e>
 800840a:	bf00      	nop
 800840c:	0800935d 	.word	0x0800935d

08008410 <_strtoul_r>:
 8008410:	f7ff bf8c 	b.w	800832c <_strtoul_l.constprop.0>

08008414 <__submore>:
 8008414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008418:	460c      	mov	r4, r1
 800841a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800841c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008420:	4299      	cmp	r1, r3
 8008422:	d11d      	bne.n	8008460 <__submore+0x4c>
 8008424:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008428:	f7ff f9ae 	bl	8007788 <_malloc_r>
 800842c:	b918      	cbnz	r0, 8008436 <__submore+0x22>
 800842e:	f04f 30ff 	mov.w	r0, #4294967295
 8008432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800843a:	63a3      	str	r3, [r4, #56]	; 0x38
 800843c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008440:	6360      	str	r0, [r4, #52]	; 0x34
 8008442:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008446:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800844a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800844e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008452:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008456:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800845a:	6020      	str	r0, [r4, #0]
 800845c:	2000      	movs	r0, #0
 800845e:	e7e8      	b.n	8008432 <__submore+0x1e>
 8008460:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008462:	0077      	lsls	r7, r6, #1
 8008464:	463a      	mov	r2, r7
 8008466:	f000 fa31 	bl	80088cc <_realloc_r>
 800846a:	4605      	mov	r5, r0
 800846c:	2800      	cmp	r0, #0
 800846e:	d0de      	beq.n	800842e <__submore+0x1a>
 8008470:	eb00 0806 	add.w	r8, r0, r6
 8008474:	4601      	mov	r1, r0
 8008476:	4632      	mov	r2, r6
 8008478:	4640      	mov	r0, r8
 800847a:	f7fe fd71 	bl	8006f60 <memcpy>
 800847e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008482:	f8c4 8000 	str.w	r8, [r4]
 8008486:	e7e9      	b.n	800845c <__submore+0x48>

08008488 <__assert_func>:
 8008488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800848a:	4614      	mov	r4, r2
 800848c:	461a      	mov	r2, r3
 800848e:	4b09      	ldr	r3, [pc, #36]	; (80084b4 <__assert_func+0x2c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4605      	mov	r5, r0
 8008494:	68d8      	ldr	r0, [r3, #12]
 8008496:	b14c      	cbz	r4, 80084ac <__assert_func+0x24>
 8008498:	4b07      	ldr	r3, [pc, #28]	; (80084b8 <__assert_func+0x30>)
 800849a:	9100      	str	r1, [sp, #0]
 800849c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084a0:	4906      	ldr	r1, [pc, #24]	; (80084bc <__assert_func+0x34>)
 80084a2:	462b      	mov	r3, r5
 80084a4:	f000 f9a6 	bl	80087f4 <fiprintf>
 80084a8:	f000 fc66 	bl	8008d78 <abort>
 80084ac:	4b04      	ldr	r3, [pc, #16]	; (80084c0 <__assert_func+0x38>)
 80084ae:	461c      	mov	r4, r3
 80084b0:	e7f3      	b.n	800849a <__assert_func+0x12>
 80084b2:	bf00      	nop
 80084b4:	2000000c 	.word	0x2000000c
 80084b8:	08009320 	.word	0x08009320
 80084bc:	0800932d 	.word	0x0800932d
 80084c0:	0800935b 	.word	0x0800935b

080084c4 <__sflush_r>:
 80084c4:	898a      	ldrh	r2, [r1, #12]
 80084c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ca:	4605      	mov	r5, r0
 80084cc:	0710      	lsls	r0, r2, #28
 80084ce:	460c      	mov	r4, r1
 80084d0:	d458      	bmi.n	8008584 <__sflush_r+0xc0>
 80084d2:	684b      	ldr	r3, [r1, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	dc05      	bgt.n	80084e4 <__sflush_r+0x20>
 80084d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	dc02      	bgt.n	80084e4 <__sflush_r+0x20>
 80084de:	2000      	movs	r0, #0
 80084e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084e6:	2e00      	cmp	r6, #0
 80084e8:	d0f9      	beq.n	80084de <__sflush_r+0x1a>
 80084ea:	2300      	movs	r3, #0
 80084ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084f0:	682f      	ldr	r7, [r5, #0]
 80084f2:	602b      	str	r3, [r5, #0]
 80084f4:	d032      	beq.n	800855c <__sflush_r+0x98>
 80084f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	075a      	lsls	r2, r3, #29
 80084fc:	d505      	bpl.n	800850a <__sflush_r+0x46>
 80084fe:	6863      	ldr	r3, [r4, #4]
 8008500:	1ac0      	subs	r0, r0, r3
 8008502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008504:	b10b      	cbz	r3, 800850a <__sflush_r+0x46>
 8008506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008508:	1ac0      	subs	r0, r0, r3
 800850a:	2300      	movs	r3, #0
 800850c:	4602      	mov	r2, r0
 800850e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008510:	6a21      	ldr	r1, [r4, #32]
 8008512:	4628      	mov	r0, r5
 8008514:	47b0      	blx	r6
 8008516:	1c43      	adds	r3, r0, #1
 8008518:	89a3      	ldrh	r3, [r4, #12]
 800851a:	d106      	bne.n	800852a <__sflush_r+0x66>
 800851c:	6829      	ldr	r1, [r5, #0]
 800851e:	291d      	cmp	r1, #29
 8008520:	d82c      	bhi.n	800857c <__sflush_r+0xb8>
 8008522:	4a2a      	ldr	r2, [pc, #168]	; (80085cc <__sflush_r+0x108>)
 8008524:	40ca      	lsrs	r2, r1
 8008526:	07d6      	lsls	r6, r2, #31
 8008528:	d528      	bpl.n	800857c <__sflush_r+0xb8>
 800852a:	2200      	movs	r2, #0
 800852c:	6062      	str	r2, [r4, #4]
 800852e:	04d9      	lsls	r1, r3, #19
 8008530:	6922      	ldr	r2, [r4, #16]
 8008532:	6022      	str	r2, [r4, #0]
 8008534:	d504      	bpl.n	8008540 <__sflush_r+0x7c>
 8008536:	1c42      	adds	r2, r0, #1
 8008538:	d101      	bne.n	800853e <__sflush_r+0x7a>
 800853a:	682b      	ldr	r3, [r5, #0]
 800853c:	b903      	cbnz	r3, 8008540 <__sflush_r+0x7c>
 800853e:	6560      	str	r0, [r4, #84]	; 0x54
 8008540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008542:	602f      	str	r7, [r5, #0]
 8008544:	2900      	cmp	r1, #0
 8008546:	d0ca      	beq.n	80084de <__sflush_r+0x1a>
 8008548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800854c:	4299      	cmp	r1, r3
 800854e:	d002      	beq.n	8008556 <__sflush_r+0x92>
 8008550:	4628      	mov	r0, r5
 8008552:	f7ff f8ad 	bl	80076b0 <_free_r>
 8008556:	2000      	movs	r0, #0
 8008558:	6360      	str	r0, [r4, #52]	; 0x34
 800855a:	e7c1      	b.n	80084e0 <__sflush_r+0x1c>
 800855c:	6a21      	ldr	r1, [r4, #32]
 800855e:	2301      	movs	r3, #1
 8008560:	4628      	mov	r0, r5
 8008562:	47b0      	blx	r6
 8008564:	1c41      	adds	r1, r0, #1
 8008566:	d1c7      	bne.n	80084f8 <__sflush_r+0x34>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d0c4      	beq.n	80084f8 <__sflush_r+0x34>
 800856e:	2b1d      	cmp	r3, #29
 8008570:	d001      	beq.n	8008576 <__sflush_r+0xb2>
 8008572:	2b16      	cmp	r3, #22
 8008574:	d101      	bne.n	800857a <__sflush_r+0xb6>
 8008576:	602f      	str	r7, [r5, #0]
 8008578:	e7b1      	b.n	80084de <__sflush_r+0x1a>
 800857a:	89a3      	ldrh	r3, [r4, #12]
 800857c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008580:	81a3      	strh	r3, [r4, #12]
 8008582:	e7ad      	b.n	80084e0 <__sflush_r+0x1c>
 8008584:	690f      	ldr	r7, [r1, #16]
 8008586:	2f00      	cmp	r7, #0
 8008588:	d0a9      	beq.n	80084de <__sflush_r+0x1a>
 800858a:	0793      	lsls	r3, r2, #30
 800858c:	680e      	ldr	r6, [r1, #0]
 800858e:	bf08      	it	eq
 8008590:	694b      	ldreq	r3, [r1, #20]
 8008592:	600f      	str	r7, [r1, #0]
 8008594:	bf18      	it	ne
 8008596:	2300      	movne	r3, #0
 8008598:	eba6 0807 	sub.w	r8, r6, r7
 800859c:	608b      	str	r3, [r1, #8]
 800859e:	f1b8 0f00 	cmp.w	r8, #0
 80085a2:	dd9c      	ble.n	80084de <__sflush_r+0x1a>
 80085a4:	6a21      	ldr	r1, [r4, #32]
 80085a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085a8:	4643      	mov	r3, r8
 80085aa:	463a      	mov	r2, r7
 80085ac:	4628      	mov	r0, r5
 80085ae:	47b0      	blx	r6
 80085b0:	2800      	cmp	r0, #0
 80085b2:	dc06      	bgt.n	80085c2 <__sflush_r+0xfe>
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295
 80085c0:	e78e      	b.n	80084e0 <__sflush_r+0x1c>
 80085c2:	4407      	add	r7, r0
 80085c4:	eba8 0800 	sub.w	r8, r8, r0
 80085c8:	e7e9      	b.n	800859e <__sflush_r+0xda>
 80085ca:	bf00      	nop
 80085cc:	20400001 	.word	0x20400001

080085d0 <_fflush_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	690b      	ldr	r3, [r1, #16]
 80085d4:	4605      	mov	r5, r0
 80085d6:	460c      	mov	r4, r1
 80085d8:	b913      	cbnz	r3, 80085e0 <_fflush_r+0x10>
 80085da:	2500      	movs	r5, #0
 80085dc:	4628      	mov	r0, r5
 80085de:	bd38      	pop	{r3, r4, r5, pc}
 80085e0:	b118      	cbz	r0, 80085ea <_fflush_r+0x1a>
 80085e2:	6983      	ldr	r3, [r0, #24]
 80085e4:	b90b      	cbnz	r3, 80085ea <_fflush_r+0x1a>
 80085e6:	f000 f887 	bl	80086f8 <__sinit>
 80085ea:	4b14      	ldr	r3, [pc, #80]	; (800863c <_fflush_r+0x6c>)
 80085ec:	429c      	cmp	r4, r3
 80085ee:	d11b      	bne.n	8008628 <_fflush_r+0x58>
 80085f0:	686c      	ldr	r4, [r5, #4]
 80085f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0ef      	beq.n	80085da <_fflush_r+0xa>
 80085fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085fc:	07d0      	lsls	r0, r2, #31
 80085fe:	d404      	bmi.n	800860a <_fflush_r+0x3a>
 8008600:	0599      	lsls	r1, r3, #22
 8008602:	d402      	bmi.n	800860a <_fflush_r+0x3a>
 8008604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008606:	f000 f927 	bl	8008858 <__retarget_lock_acquire_recursive>
 800860a:	4628      	mov	r0, r5
 800860c:	4621      	mov	r1, r4
 800860e:	f7ff ff59 	bl	80084c4 <__sflush_r>
 8008612:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008614:	07da      	lsls	r2, r3, #31
 8008616:	4605      	mov	r5, r0
 8008618:	d4e0      	bmi.n	80085dc <_fflush_r+0xc>
 800861a:	89a3      	ldrh	r3, [r4, #12]
 800861c:	059b      	lsls	r3, r3, #22
 800861e:	d4dd      	bmi.n	80085dc <_fflush_r+0xc>
 8008620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008622:	f000 f91a 	bl	800885a <__retarget_lock_release_recursive>
 8008626:	e7d9      	b.n	80085dc <_fflush_r+0xc>
 8008628:	4b05      	ldr	r3, [pc, #20]	; (8008640 <_fflush_r+0x70>)
 800862a:	429c      	cmp	r4, r3
 800862c:	d101      	bne.n	8008632 <_fflush_r+0x62>
 800862e:	68ac      	ldr	r4, [r5, #8]
 8008630:	e7df      	b.n	80085f2 <_fflush_r+0x22>
 8008632:	4b04      	ldr	r3, [pc, #16]	; (8008644 <_fflush_r+0x74>)
 8008634:	429c      	cmp	r4, r3
 8008636:	bf08      	it	eq
 8008638:	68ec      	ldreq	r4, [r5, #12]
 800863a:	e7da      	b.n	80085f2 <_fflush_r+0x22>
 800863c:	08009480 	.word	0x08009480
 8008640:	080094a0 	.word	0x080094a0
 8008644:	08009460 	.word	0x08009460

08008648 <std>:
 8008648:	2300      	movs	r3, #0
 800864a:	b510      	push	{r4, lr}
 800864c:	4604      	mov	r4, r0
 800864e:	e9c0 3300 	strd	r3, r3, [r0]
 8008652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008656:	6083      	str	r3, [r0, #8]
 8008658:	8181      	strh	r1, [r0, #12]
 800865a:	6643      	str	r3, [r0, #100]	; 0x64
 800865c:	81c2      	strh	r2, [r0, #14]
 800865e:	6183      	str	r3, [r0, #24]
 8008660:	4619      	mov	r1, r3
 8008662:	2208      	movs	r2, #8
 8008664:	305c      	adds	r0, #92	; 0x5c
 8008666:	f7fd f8bd 	bl	80057e4 <memset>
 800866a:	4b05      	ldr	r3, [pc, #20]	; (8008680 <std+0x38>)
 800866c:	6263      	str	r3, [r4, #36]	; 0x24
 800866e:	4b05      	ldr	r3, [pc, #20]	; (8008684 <std+0x3c>)
 8008670:	62a3      	str	r3, [r4, #40]	; 0x28
 8008672:	4b05      	ldr	r3, [pc, #20]	; (8008688 <std+0x40>)
 8008674:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008676:	4b05      	ldr	r3, [pc, #20]	; (800868c <std+0x44>)
 8008678:	6224      	str	r4, [r4, #32]
 800867a:	6323      	str	r3, [r4, #48]	; 0x30
 800867c:	bd10      	pop	{r4, pc}
 800867e:	bf00      	nop
 8008680:	08006161 	.word	0x08006161
 8008684:	08006187 	.word	0x08006187
 8008688:	080061bf 	.word	0x080061bf
 800868c:	080061e3 	.word	0x080061e3

08008690 <_cleanup_r>:
 8008690:	4901      	ldr	r1, [pc, #4]	; (8008698 <_cleanup_r+0x8>)
 8008692:	f000 b8c1 	b.w	8008818 <_fwalk_reent>
 8008696:	bf00      	nop
 8008698:	080085d1 	.word	0x080085d1

0800869c <__sfmoreglue>:
 800869c:	b570      	push	{r4, r5, r6, lr}
 800869e:	2268      	movs	r2, #104	; 0x68
 80086a0:	1e4d      	subs	r5, r1, #1
 80086a2:	4355      	muls	r5, r2
 80086a4:	460e      	mov	r6, r1
 80086a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086aa:	f7ff f86d 	bl	8007788 <_malloc_r>
 80086ae:	4604      	mov	r4, r0
 80086b0:	b140      	cbz	r0, 80086c4 <__sfmoreglue+0x28>
 80086b2:	2100      	movs	r1, #0
 80086b4:	e9c0 1600 	strd	r1, r6, [r0]
 80086b8:	300c      	adds	r0, #12
 80086ba:	60a0      	str	r0, [r4, #8]
 80086bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086c0:	f7fd f890 	bl	80057e4 <memset>
 80086c4:	4620      	mov	r0, r4
 80086c6:	bd70      	pop	{r4, r5, r6, pc}

080086c8 <__sfp_lock_acquire>:
 80086c8:	4801      	ldr	r0, [pc, #4]	; (80086d0 <__sfp_lock_acquire+0x8>)
 80086ca:	f000 b8c5 	b.w	8008858 <__retarget_lock_acquire_recursive>
 80086ce:	bf00      	nop
 80086d0:	2000031d 	.word	0x2000031d

080086d4 <__sfp_lock_release>:
 80086d4:	4801      	ldr	r0, [pc, #4]	; (80086dc <__sfp_lock_release+0x8>)
 80086d6:	f000 b8c0 	b.w	800885a <__retarget_lock_release_recursive>
 80086da:	bf00      	nop
 80086dc:	2000031d 	.word	0x2000031d

080086e0 <__sinit_lock_acquire>:
 80086e0:	4801      	ldr	r0, [pc, #4]	; (80086e8 <__sinit_lock_acquire+0x8>)
 80086e2:	f000 b8b9 	b.w	8008858 <__retarget_lock_acquire_recursive>
 80086e6:	bf00      	nop
 80086e8:	2000031e 	.word	0x2000031e

080086ec <__sinit_lock_release>:
 80086ec:	4801      	ldr	r0, [pc, #4]	; (80086f4 <__sinit_lock_release+0x8>)
 80086ee:	f000 b8b4 	b.w	800885a <__retarget_lock_release_recursive>
 80086f2:	bf00      	nop
 80086f4:	2000031e 	.word	0x2000031e

080086f8 <__sinit>:
 80086f8:	b510      	push	{r4, lr}
 80086fa:	4604      	mov	r4, r0
 80086fc:	f7ff fff0 	bl	80086e0 <__sinit_lock_acquire>
 8008700:	69a3      	ldr	r3, [r4, #24]
 8008702:	b11b      	cbz	r3, 800870c <__sinit+0x14>
 8008704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008708:	f7ff bff0 	b.w	80086ec <__sinit_lock_release>
 800870c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008710:	6523      	str	r3, [r4, #80]	; 0x50
 8008712:	4b13      	ldr	r3, [pc, #76]	; (8008760 <__sinit+0x68>)
 8008714:	4a13      	ldr	r2, [pc, #76]	; (8008764 <__sinit+0x6c>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	62a2      	str	r2, [r4, #40]	; 0x28
 800871a:	42a3      	cmp	r3, r4
 800871c:	bf04      	itt	eq
 800871e:	2301      	moveq	r3, #1
 8008720:	61a3      	streq	r3, [r4, #24]
 8008722:	4620      	mov	r0, r4
 8008724:	f000 f820 	bl	8008768 <__sfp>
 8008728:	6060      	str	r0, [r4, #4]
 800872a:	4620      	mov	r0, r4
 800872c:	f000 f81c 	bl	8008768 <__sfp>
 8008730:	60a0      	str	r0, [r4, #8]
 8008732:	4620      	mov	r0, r4
 8008734:	f000 f818 	bl	8008768 <__sfp>
 8008738:	2200      	movs	r2, #0
 800873a:	60e0      	str	r0, [r4, #12]
 800873c:	2104      	movs	r1, #4
 800873e:	6860      	ldr	r0, [r4, #4]
 8008740:	f7ff ff82 	bl	8008648 <std>
 8008744:	68a0      	ldr	r0, [r4, #8]
 8008746:	2201      	movs	r2, #1
 8008748:	2109      	movs	r1, #9
 800874a:	f7ff ff7d 	bl	8008648 <std>
 800874e:	68e0      	ldr	r0, [r4, #12]
 8008750:	2202      	movs	r2, #2
 8008752:	2112      	movs	r1, #18
 8008754:	f7ff ff78 	bl	8008648 <std>
 8008758:	2301      	movs	r3, #1
 800875a:	61a3      	str	r3, [r4, #24]
 800875c:	e7d2      	b.n	8008704 <__sinit+0xc>
 800875e:	bf00      	nop
 8008760:	080090d0 	.word	0x080090d0
 8008764:	08008691 	.word	0x08008691

08008768 <__sfp>:
 8008768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876a:	4607      	mov	r7, r0
 800876c:	f7ff ffac 	bl	80086c8 <__sfp_lock_acquire>
 8008770:	4b1e      	ldr	r3, [pc, #120]	; (80087ec <__sfp+0x84>)
 8008772:	681e      	ldr	r6, [r3, #0]
 8008774:	69b3      	ldr	r3, [r6, #24]
 8008776:	b913      	cbnz	r3, 800877e <__sfp+0x16>
 8008778:	4630      	mov	r0, r6
 800877a:	f7ff ffbd 	bl	80086f8 <__sinit>
 800877e:	3648      	adds	r6, #72	; 0x48
 8008780:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008784:	3b01      	subs	r3, #1
 8008786:	d503      	bpl.n	8008790 <__sfp+0x28>
 8008788:	6833      	ldr	r3, [r6, #0]
 800878a:	b30b      	cbz	r3, 80087d0 <__sfp+0x68>
 800878c:	6836      	ldr	r6, [r6, #0]
 800878e:	e7f7      	b.n	8008780 <__sfp+0x18>
 8008790:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008794:	b9d5      	cbnz	r5, 80087cc <__sfp+0x64>
 8008796:	4b16      	ldr	r3, [pc, #88]	; (80087f0 <__sfp+0x88>)
 8008798:	60e3      	str	r3, [r4, #12]
 800879a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800879e:	6665      	str	r5, [r4, #100]	; 0x64
 80087a0:	f000 f859 	bl	8008856 <__retarget_lock_init_recursive>
 80087a4:	f7ff ff96 	bl	80086d4 <__sfp_lock_release>
 80087a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087b0:	6025      	str	r5, [r4, #0]
 80087b2:	61a5      	str	r5, [r4, #24]
 80087b4:	2208      	movs	r2, #8
 80087b6:	4629      	mov	r1, r5
 80087b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087bc:	f7fd f812 	bl	80057e4 <memset>
 80087c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087c8:	4620      	mov	r0, r4
 80087ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087cc:	3468      	adds	r4, #104	; 0x68
 80087ce:	e7d9      	b.n	8008784 <__sfp+0x1c>
 80087d0:	2104      	movs	r1, #4
 80087d2:	4638      	mov	r0, r7
 80087d4:	f7ff ff62 	bl	800869c <__sfmoreglue>
 80087d8:	4604      	mov	r4, r0
 80087da:	6030      	str	r0, [r6, #0]
 80087dc:	2800      	cmp	r0, #0
 80087de:	d1d5      	bne.n	800878c <__sfp+0x24>
 80087e0:	f7ff ff78 	bl	80086d4 <__sfp_lock_release>
 80087e4:	230c      	movs	r3, #12
 80087e6:	603b      	str	r3, [r7, #0]
 80087e8:	e7ee      	b.n	80087c8 <__sfp+0x60>
 80087ea:	bf00      	nop
 80087ec:	080090d0 	.word	0x080090d0
 80087f0:	ffff0001 	.word	0xffff0001

080087f4 <fiprintf>:
 80087f4:	b40e      	push	{r1, r2, r3}
 80087f6:	b503      	push	{r0, r1, lr}
 80087f8:	4601      	mov	r1, r0
 80087fa:	ab03      	add	r3, sp, #12
 80087fc:	4805      	ldr	r0, [pc, #20]	; (8008814 <fiprintf+0x20>)
 80087fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008802:	6800      	ldr	r0, [r0, #0]
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	f000 f8b9 	bl	800897c <_vfiprintf_r>
 800880a:	b002      	add	sp, #8
 800880c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008810:	b003      	add	sp, #12
 8008812:	4770      	bx	lr
 8008814:	2000000c 	.word	0x2000000c

08008818 <_fwalk_reent>:
 8008818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800881c:	4606      	mov	r6, r0
 800881e:	4688      	mov	r8, r1
 8008820:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008824:	2700      	movs	r7, #0
 8008826:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800882a:	f1b9 0901 	subs.w	r9, r9, #1
 800882e:	d505      	bpl.n	800883c <_fwalk_reent+0x24>
 8008830:	6824      	ldr	r4, [r4, #0]
 8008832:	2c00      	cmp	r4, #0
 8008834:	d1f7      	bne.n	8008826 <_fwalk_reent+0xe>
 8008836:	4638      	mov	r0, r7
 8008838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800883c:	89ab      	ldrh	r3, [r5, #12]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d907      	bls.n	8008852 <_fwalk_reent+0x3a>
 8008842:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008846:	3301      	adds	r3, #1
 8008848:	d003      	beq.n	8008852 <_fwalk_reent+0x3a>
 800884a:	4629      	mov	r1, r5
 800884c:	4630      	mov	r0, r6
 800884e:	47c0      	blx	r8
 8008850:	4307      	orrs	r7, r0
 8008852:	3568      	adds	r5, #104	; 0x68
 8008854:	e7e9      	b.n	800882a <_fwalk_reent+0x12>

08008856 <__retarget_lock_init_recursive>:
 8008856:	4770      	bx	lr

08008858 <__retarget_lock_acquire_recursive>:
 8008858:	4770      	bx	lr

0800885a <__retarget_lock_release_recursive>:
 800885a:	4770      	bx	lr

0800885c <__ascii_mbtowc>:
 800885c:	b082      	sub	sp, #8
 800885e:	b901      	cbnz	r1, 8008862 <__ascii_mbtowc+0x6>
 8008860:	a901      	add	r1, sp, #4
 8008862:	b142      	cbz	r2, 8008876 <__ascii_mbtowc+0x1a>
 8008864:	b14b      	cbz	r3, 800887a <__ascii_mbtowc+0x1e>
 8008866:	7813      	ldrb	r3, [r2, #0]
 8008868:	600b      	str	r3, [r1, #0]
 800886a:	7812      	ldrb	r2, [r2, #0]
 800886c:	1e10      	subs	r0, r2, #0
 800886e:	bf18      	it	ne
 8008870:	2001      	movne	r0, #1
 8008872:	b002      	add	sp, #8
 8008874:	4770      	bx	lr
 8008876:	4610      	mov	r0, r2
 8008878:	e7fb      	b.n	8008872 <__ascii_mbtowc+0x16>
 800887a:	f06f 0001 	mvn.w	r0, #1
 800887e:	e7f8      	b.n	8008872 <__ascii_mbtowc+0x16>

08008880 <memmove>:
 8008880:	4288      	cmp	r0, r1
 8008882:	b510      	push	{r4, lr}
 8008884:	eb01 0402 	add.w	r4, r1, r2
 8008888:	d902      	bls.n	8008890 <memmove+0x10>
 800888a:	4284      	cmp	r4, r0
 800888c:	4623      	mov	r3, r4
 800888e:	d807      	bhi.n	80088a0 <memmove+0x20>
 8008890:	1e43      	subs	r3, r0, #1
 8008892:	42a1      	cmp	r1, r4
 8008894:	d008      	beq.n	80088a8 <memmove+0x28>
 8008896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800889a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800889e:	e7f8      	b.n	8008892 <memmove+0x12>
 80088a0:	4402      	add	r2, r0
 80088a2:	4601      	mov	r1, r0
 80088a4:	428a      	cmp	r2, r1
 80088a6:	d100      	bne.n	80088aa <memmove+0x2a>
 80088a8:	bd10      	pop	{r4, pc}
 80088aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088b2:	e7f7      	b.n	80088a4 <memmove+0x24>

080088b4 <__malloc_lock>:
 80088b4:	4801      	ldr	r0, [pc, #4]	; (80088bc <__malloc_lock+0x8>)
 80088b6:	f7ff bfcf 	b.w	8008858 <__retarget_lock_acquire_recursive>
 80088ba:	bf00      	nop
 80088bc:	2000031c 	.word	0x2000031c

080088c0 <__malloc_unlock>:
 80088c0:	4801      	ldr	r0, [pc, #4]	; (80088c8 <__malloc_unlock+0x8>)
 80088c2:	f7ff bfca 	b.w	800885a <__retarget_lock_release_recursive>
 80088c6:	bf00      	nop
 80088c8:	2000031c 	.word	0x2000031c

080088cc <_realloc_r>:
 80088cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d0:	4680      	mov	r8, r0
 80088d2:	4614      	mov	r4, r2
 80088d4:	460e      	mov	r6, r1
 80088d6:	b921      	cbnz	r1, 80088e2 <_realloc_r+0x16>
 80088d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088dc:	4611      	mov	r1, r2
 80088de:	f7fe bf53 	b.w	8007788 <_malloc_r>
 80088e2:	b92a      	cbnz	r2, 80088f0 <_realloc_r+0x24>
 80088e4:	f7fe fee4 	bl	80076b0 <_free_r>
 80088e8:	4625      	mov	r5, r4
 80088ea:	4628      	mov	r0, r5
 80088ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f0:	f000 faae 	bl	8008e50 <_malloc_usable_size_r>
 80088f4:	4284      	cmp	r4, r0
 80088f6:	4607      	mov	r7, r0
 80088f8:	d802      	bhi.n	8008900 <_realloc_r+0x34>
 80088fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088fe:	d812      	bhi.n	8008926 <_realloc_r+0x5a>
 8008900:	4621      	mov	r1, r4
 8008902:	4640      	mov	r0, r8
 8008904:	f7fe ff40 	bl	8007788 <_malloc_r>
 8008908:	4605      	mov	r5, r0
 800890a:	2800      	cmp	r0, #0
 800890c:	d0ed      	beq.n	80088ea <_realloc_r+0x1e>
 800890e:	42bc      	cmp	r4, r7
 8008910:	4622      	mov	r2, r4
 8008912:	4631      	mov	r1, r6
 8008914:	bf28      	it	cs
 8008916:	463a      	movcs	r2, r7
 8008918:	f7fe fb22 	bl	8006f60 <memcpy>
 800891c:	4631      	mov	r1, r6
 800891e:	4640      	mov	r0, r8
 8008920:	f7fe fec6 	bl	80076b0 <_free_r>
 8008924:	e7e1      	b.n	80088ea <_realloc_r+0x1e>
 8008926:	4635      	mov	r5, r6
 8008928:	e7df      	b.n	80088ea <_realloc_r+0x1e>

0800892a <__sfputc_r>:
 800892a:	6893      	ldr	r3, [r2, #8]
 800892c:	3b01      	subs	r3, #1
 800892e:	2b00      	cmp	r3, #0
 8008930:	b410      	push	{r4}
 8008932:	6093      	str	r3, [r2, #8]
 8008934:	da08      	bge.n	8008948 <__sfputc_r+0x1e>
 8008936:	6994      	ldr	r4, [r2, #24]
 8008938:	42a3      	cmp	r3, r4
 800893a:	db01      	blt.n	8008940 <__sfputc_r+0x16>
 800893c:	290a      	cmp	r1, #10
 800893e:	d103      	bne.n	8008948 <__sfputc_r+0x1e>
 8008940:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008944:	f000 b94a 	b.w	8008bdc <__swbuf_r>
 8008948:	6813      	ldr	r3, [r2, #0]
 800894a:	1c58      	adds	r0, r3, #1
 800894c:	6010      	str	r0, [r2, #0]
 800894e:	7019      	strb	r1, [r3, #0]
 8008950:	4608      	mov	r0, r1
 8008952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008956:	4770      	bx	lr

08008958 <__sfputs_r>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	4606      	mov	r6, r0
 800895c:	460f      	mov	r7, r1
 800895e:	4614      	mov	r4, r2
 8008960:	18d5      	adds	r5, r2, r3
 8008962:	42ac      	cmp	r4, r5
 8008964:	d101      	bne.n	800896a <__sfputs_r+0x12>
 8008966:	2000      	movs	r0, #0
 8008968:	e007      	b.n	800897a <__sfputs_r+0x22>
 800896a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800896e:	463a      	mov	r2, r7
 8008970:	4630      	mov	r0, r6
 8008972:	f7ff ffda 	bl	800892a <__sfputc_r>
 8008976:	1c43      	adds	r3, r0, #1
 8008978:	d1f3      	bne.n	8008962 <__sfputs_r+0xa>
 800897a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800897c <_vfiprintf_r>:
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	460d      	mov	r5, r1
 8008982:	b09d      	sub	sp, #116	; 0x74
 8008984:	4614      	mov	r4, r2
 8008986:	4698      	mov	r8, r3
 8008988:	4606      	mov	r6, r0
 800898a:	b118      	cbz	r0, 8008994 <_vfiprintf_r+0x18>
 800898c:	6983      	ldr	r3, [r0, #24]
 800898e:	b90b      	cbnz	r3, 8008994 <_vfiprintf_r+0x18>
 8008990:	f7ff feb2 	bl	80086f8 <__sinit>
 8008994:	4b89      	ldr	r3, [pc, #548]	; (8008bbc <_vfiprintf_r+0x240>)
 8008996:	429d      	cmp	r5, r3
 8008998:	d11b      	bne.n	80089d2 <_vfiprintf_r+0x56>
 800899a:	6875      	ldr	r5, [r6, #4]
 800899c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800899e:	07d9      	lsls	r1, r3, #31
 80089a0:	d405      	bmi.n	80089ae <_vfiprintf_r+0x32>
 80089a2:	89ab      	ldrh	r3, [r5, #12]
 80089a4:	059a      	lsls	r2, r3, #22
 80089a6:	d402      	bmi.n	80089ae <_vfiprintf_r+0x32>
 80089a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089aa:	f7ff ff55 	bl	8008858 <__retarget_lock_acquire_recursive>
 80089ae:	89ab      	ldrh	r3, [r5, #12]
 80089b0:	071b      	lsls	r3, r3, #28
 80089b2:	d501      	bpl.n	80089b8 <_vfiprintf_r+0x3c>
 80089b4:	692b      	ldr	r3, [r5, #16]
 80089b6:	b9eb      	cbnz	r3, 80089f4 <_vfiprintf_r+0x78>
 80089b8:	4629      	mov	r1, r5
 80089ba:	4630      	mov	r0, r6
 80089bc:	f000 f96e 	bl	8008c9c <__swsetup_r>
 80089c0:	b1c0      	cbz	r0, 80089f4 <_vfiprintf_r+0x78>
 80089c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089c4:	07dc      	lsls	r4, r3, #31
 80089c6:	d50e      	bpl.n	80089e6 <_vfiprintf_r+0x6a>
 80089c8:	f04f 30ff 	mov.w	r0, #4294967295
 80089cc:	b01d      	add	sp, #116	; 0x74
 80089ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d2:	4b7b      	ldr	r3, [pc, #492]	; (8008bc0 <_vfiprintf_r+0x244>)
 80089d4:	429d      	cmp	r5, r3
 80089d6:	d101      	bne.n	80089dc <_vfiprintf_r+0x60>
 80089d8:	68b5      	ldr	r5, [r6, #8]
 80089da:	e7df      	b.n	800899c <_vfiprintf_r+0x20>
 80089dc:	4b79      	ldr	r3, [pc, #484]	; (8008bc4 <_vfiprintf_r+0x248>)
 80089de:	429d      	cmp	r5, r3
 80089e0:	bf08      	it	eq
 80089e2:	68f5      	ldreq	r5, [r6, #12]
 80089e4:	e7da      	b.n	800899c <_vfiprintf_r+0x20>
 80089e6:	89ab      	ldrh	r3, [r5, #12]
 80089e8:	0598      	lsls	r0, r3, #22
 80089ea:	d4ed      	bmi.n	80089c8 <_vfiprintf_r+0x4c>
 80089ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089ee:	f7ff ff34 	bl	800885a <__retarget_lock_release_recursive>
 80089f2:	e7e9      	b.n	80089c8 <_vfiprintf_r+0x4c>
 80089f4:	2300      	movs	r3, #0
 80089f6:	9309      	str	r3, [sp, #36]	; 0x24
 80089f8:	2320      	movs	r3, #32
 80089fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a02:	2330      	movs	r3, #48	; 0x30
 8008a04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008bc8 <_vfiprintf_r+0x24c>
 8008a08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a0c:	f04f 0901 	mov.w	r9, #1
 8008a10:	4623      	mov	r3, r4
 8008a12:	469a      	mov	sl, r3
 8008a14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a18:	b10a      	cbz	r2, 8008a1e <_vfiprintf_r+0xa2>
 8008a1a:	2a25      	cmp	r2, #37	; 0x25
 8008a1c:	d1f9      	bne.n	8008a12 <_vfiprintf_r+0x96>
 8008a1e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a22:	d00b      	beq.n	8008a3c <_vfiprintf_r+0xc0>
 8008a24:	465b      	mov	r3, fp
 8008a26:	4622      	mov	r2, r4
 8008a28:	4629      	mov	r1, r5
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f7ff ff94 	bl	8008958 <__sfputs_r>
 8008a30:	3001      	adds	r0, #1
 8008a32:	f000 80aa 	beq.w	8008b8a <_vfiprintf_r+0x20e>
 8008a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a38:	445a      	add	r2, fp
 8008a3a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 80a2 	beq.w	8008b8a <_vfiprintf_r+0x20e>
 8008a46:	2300      	movs	r3, #0
 8008a48:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a50:	f10a 0a01 	add.w	sl, sl, #1
 8008a54:	9304      	str	r3, [sp, #16]
 8008a56:	9307      	str	r3, [sp, #28]
 8008a58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a5c:	931a      	str	r3, [sp, #104]	; 0x68
 8008a5e:	4654      	mov	r4, sl
 8008a60:	2205      	movs	r2, #5
 8008a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a66:	4858      	ldr	r0, [pc, #352]	; (8008bc8 <_vfiprintf_r+0x24c>)
 8008a68:	f7f7 fbda 	bl	8000220 <memchr>
 8008a6c:	9a04      	ldr	r2, [sp, #16]
 8008a6e:	b9d8      	cbnz	r0, 8008aa8 <_vfiprintf_r+0x12c>
 8008a70:	06d1      	lsls	r1, r2, #27
 8008a72:	bf44      	itt	mi
 8008a74:	2320      	movmi	r3, #32
 8008a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a7a:	0713      	lsls	r3, r2, #28
 8008a7c:	bf44      	itt	mi
 8008a7e:	232b      	movmi	r3, #43	; 0x2b
 8008a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a84:	f89a 3000 	ldrb.w	r3, [sl]
 8008a88:	2b2a      	cmp	r3, #42	; 0x2a
 8008a8a:	d015      	beq.n	8008ab8 <_vfiprintf_r+0x13c>
 8008a8c:	9a07      	ldr	r2, [sp, #28]
 8008a8e:	4654      	mov	r4, sl
 8008a90:	2000      	movs	r0, #0
 8008a92:	f04f 0c0a 	mov.w	ip, #10
 8008a96:	4621      	mov	r1, r4
 8008a98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a9c:	3b30      	subs	r3, #48	; 0x30
 8008a9e:	2b09      	cmp	r3, #9
 8008aa0:	d94e      	bls.n	8008b40 <_vfiprintf_r+0x1c4>
 8008aa2:	b1b0      	cbz	r0, 8008ad2 <_vfiprintf_r+0x156>
 8008aa4:	9207      	str	r2, [sp, #28]
 8008aa6:	e014      	b.n	8008ad2 <_vfiprintf_r+0x156>
 8008aa8:	eba0 0308 	sub.w	r3, r0, r8
 8008aac:	fa09 f303 	lsl.w	r3, r9, r3
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	9304      	str	r3, [sp, #16]
 8008ab4:	46a2      	mov	sl, r4
 8008ab6:	e7d2      	b.n	8008a5e <_vfiprintf_r+0xe2>
 8008ab8:	9b03      	ldr	r3, [sp, #12]
 8008aba:	1d19      	adds	r1, r3, #4
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	9103      	str	r1, [sp, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	bfbb      	ittet	lt
 8008ac4:	425b      	neglt	r3, r3
 8008ac6:	f042 0202 	orrlt.w	r2, r2, #2
 8008aca:	9307      	strge	r3, [sp, #28]
 8008acc:	9307      	strlt	r3, [sp, #28]
 8008ace:	bfb8      	it	lt
 8008ad0:	9204      	strlt	r2, [sp, #16]
 8008ad2:	7823      	ldrb	r3, [r4, #0]
 8008ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8008ad6:	d10c      	bne.n	8008af2 <_vfiprintf_r+0x176>
 8008ad8:	7863      	ldrb	r3, [r4, #1]
 8008ada:	2b2a      	cmp	r3, #42	; 0x2a
 8008adc:	d135      	bne.n	8008b4a <_vfiprintf_r+0x1ce>
 8008ade:	9b03      	ldr	r3, [sp, #12]
 8008ae0:	1d1a      	adds	r2, r3, #4
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	9203      	str	r2, [sp, #12]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	bfb8      	it	lt
 8008aea:	f04f 33ff 	movlt.w	r3, #4294967295
 8008aee:	3402      	adds	r4, #2
 8008af0:	9305      	str	r3, [sp, #20]
 8008af2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008bd8 <_vfiprintf_r+0x25c>
 8008af6:	7821      	ldrb	r1, [r4, #0]
 8008af8:	2203      	movs	r2, #3
 8008afa:	4650      	mov	r0, sl
 8008afc:	f7f7 fb90 	bl	8000220 <memchr>
 8008b00:	b140      	cbz	r0, 8008b14 <_vfiprintf_r+0x198>
 8008b02:	2340      	movs	r3, #64	; 0x40
 8008b04:	eba0 000a 	sub.w	r0, r0, sl
 8008b08:	fa03 f000 	lsl.w	r0, r3, r0
 8008b0c:	9b04      	ldr	r3, [sp, #16]
 8008b0e:	4303      	orrs	r3, r0
 8008b10:	3401      	adds	r4, #1
 8008b12:	9304      	str	r3, [sp, #16]
 8008b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b18:	482c      	ldr	r0, [pc, #176]	; (8008bcc <_vfiprintf_r+0x250>)
 8008b1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b1e:	2206      	movs	r2, #6
 8008b20:	f7f7 fb7e 	bl	8000220 <memchr>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d03f      	beq.n	8008ba8 <_vfiprintf_r+0x22c>
 8008b28:	4b29      	ldr	r3, [pc, #164]	; (8008bd0 <_vfiprintf_r+0x254>)
 8008b2a:	bb1b      	cbnz	r3, 8008b74 <_vfiprintf_r+0x1f8>
 8008b2c:	9b03      	ldr	r3, [sp, #12]
 8008b2e:	3307      	adds	r3, #7
 8008b30:	f023 0307 	bic.w	r3, r3, #7
 8008b34:	3308      	adds	r3, #8
 8008b36:	9303      	str	r3, [sp, #12]
 8008b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3a:	443b      	add	r3, r7
 8008b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3e:	e767      	b.n	8008a10 <_vfiprintf_r+0x94>
 8008b40:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b44:	460c      	mov	r4, r1
 8008b46:	2001      	movs	r0, #1
 8008b48:	e7a5      	b.n	8008a96 <_vfiprintf_r+0x11a>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	3401      	adds	r4, #1
 8008b4e:	9305      	str	r3, [sp, #20]
 8008b50:	4619      	mov	r1, r3
 8008b52:	f04f 0c0a 	mov.w	ip, #10
 8008b56:	4620      	mov	r0, r4
 8008b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b5c:	3a30      	subs	r2, #48	; 0x30
 8008b5e:	2a09      	cmp	r2, #9
 8008b60:	d903      	bls.n	8008b6a <_vfiprintf_r+0x1ee>
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0c5      	beq.n	8008af2 <_vfiprintf_r+0x176>
 8008b66:	9105      	str	r1, [sp, #20]
 8008b68:	e7c3      	b.n	8008af2 <_vfiprintf_r+0x176>
 8008b6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b6e:	4604      	mov	r4, r0
 8008b70:	2301      	movs	r3, #1
 8008b72:	e7f0      	b.n	8008b56 <_vfiprintf_r+0x1da>
 8008b74:	ab03      	add	r3, sp, #12
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	462a      	mov	r2, r5
 8008b7a:	4b16      	ldr	r3, [pc, #88]	; (8008bd4 <_vfiprintf_r+0x258>)
 8008b7c:	a904      	add	r1, sp, #16
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f7fc fed8 	bl	8005934 <_printf_float>
 8008b84:	4607      	mov	r7, r0
 8008b86:	1c78      	adds	r0, r7, #1
 8008b88:	d1d6      	bne.n	8008b38 <_vfiprintf_r+0x1bc>
 8008b8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b8c:	07d9      	lsls	r1, r3, #31
 8008b8e:	d405      	bmi.n	8008b9c <_vfiprintf_r+0x220>
 8008b90:	89ab      	ldrh	r3, [r5, #12]
 8008b92:	059a      	lsls	r2, r3, #22
 8008b94:	d402      	bmi.n	8008b9c <_vfiprintf_r+0x220>
 8008b96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b98:	f7ff fe5f 	bl	800885a <__retarget_lock_release_recursive>
 8008b9c:	89ab      	ldrh	r3, [r5, #12]
 8008b9e:	065b      	lsls	r3, r3, #25
 8008ba0:	f53f af12 	bmi.w	80089c8 <_vfiprintf_r+0x4c>
 8008ba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ba6:	e711      	b.n	80089cc <_vfiprintf_r+0x50>
 8008ba8:	ab03      	add	r3, sp, #12
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	462a      	mov	r2, r5
 8008bae:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <_vfiprintf_r+0x258>)
 8008bb0:	a904      	add	r1, sp, #16
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	f7fd f962 	bl	8005e7c <_printf_i>
 8008bb8:	e7e4      	b.n	8008b84 <_vfiprintf_r+0x208>
 8008bba:	bf00      	nop
 8008bbc:	08009480 	.word	0x08009480
 8008bc0:	080094a0 	.word	0x080094a0
 8008bc4:	08009460 	.word	0x08009460
 8008bc8:	080092f4 	.word	0x080092f4
 8008bcc:	080092fe 	.word	0x080092fe
 8008bd0:	08005935 	.word	0x08005935
 8008bd4:	08008959 	.word	0x08008959
 8008bd8:	080092fa 	.word	0x080092fa

08008bdc <__swbuf_r>:
 8008bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bde:	460e      	mov	r6, r1
 8008be0:	4614      	mov	r4, r2
 8008be2:	4605      	mov	r5, r0
 8008be4:	b118      	cbz	r0, 8008bee <__swbuf_r+0x12>
 8008be6:	6983      	ldr	r3, [r0, #24]
 8008be8:	b90b      	cbnz	r3, 8008bee <__swbuf_r+0x12>
 8008bea:	f7ff fd85 	bl	80086f8 <__sinit>
 8008bee:	4b21      	ldr	r3, [pc, #132]	; (8008c74 <__swbuf_r+0x98>)
 8008bf0:	429c      	cmp	r4, r3
 8008bf2:	d12b      	bne.n	8008c4c <__swbuf_r+0x70>
 8008bf4:	686c      	ldr	r4, [r5, #4]
 8008bf6:	69a3      	ldr	r3, [r4, #24]
 8008bf8:	60a3      	str	r3, [r4, #8]
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	071a      	lsls	r2, r3, #28
 8008bfe:	d52f      	bpl.n	8008c60 <__swbuf_r+0x84>
 8008c00:	6923      	ldr	r3, [r4, #16]
 8008c02:	b36b      	cbz	r3, 8008c60 <__swbuf_r+0x84>
 8008c04:	6923      	ldr	r3, [r4, #16]
 8008c06:	6820      	ldr	r0, [r4, #0]
 8008c08:	1ac0      	subs	r0, r0, r3
 8008c0a:	6963      	ldr	r3, [r4, #20]
 8008c0c:	b2f6      	uxtb	r6, r6
 8008c0e:	4283      	cmp	r3, r0
 8008c10:	4637      	mov	r7, r6
 8008c12:	dc04      	bgt.n	8008c1e <__swbuf_r+0x42>
 8008c14:	4621      	mov	r1, r4
 8008c16:	4628      	mov	r0, r5
 8008c18:	f7ff fcda 	bl	80085d0 <_fflush_r>
 8008c1c:	bb30      	cbnz	r0, 8008c6c <__swbuf_r+0x90>
 8008c1e:	68a3      	ldr	r3, [r4, #8]
 8008c20:	3b01      	subs	r3, #1
 8008c22:	60a3      	str	r3, [r4, #8]
 8008c24:	6823      	ldr	r3, [r4, #0]
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	6022      	str	r2, [r4, #0]
 8008c2a:	701e      	strb	r6, [r3, #0]
 8008c2c:	6963      	ldr	r3, [r4, #20]
 8008c2e:	3001      	adds	r0, #1
 8008c30:	4283      	cmp	r3, r0
 8008c32:	d004      	beq.n	8008c3e <__swbuf_r+0x62>
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	07db      	lsls	r3, r3, #31
 8008c38:	d506      	bpl.n	8008c48 <__swbuf_r+0x6c>
 8008c3a:	2e0a      	cmp	r6, #10
 8008c3c:	d104      	bne.n	8008c48 <__swbuf_r+0x6c>
 8008c3e:	4621      	mov	r1, r4
 8008c40:	4628      	mov	r0, r5
 8008c42:	f7ff fcc5 	bl	80085d0 <_fflush_r>
 8008c46:	b988      	cbnz	r0, 8008c6c <__swbuf_r+0x90>
 8008c48:	4638      	mov	r0, r7
 8008c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c4c:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <__swbuf_r+0x9c>)
 8008c4e:	429c      	cmp	r4, r3
 8008c50:	d101      	bne.n	8008c56 <__swbuf_r+0x7a>
 8008c52:	68ac      	ldr	r4, [r5, #8]
 8008c54:	e7cf      	b.n	8008bf6 <__swbuf_r+0x1a>
 8008c56:	4b09      	ldr	r3, [pc, #36]	; (8008c7c <__swbuf_r+0xa0>)
 8008c58:	429c      	cmp	r4, r3
 8008c5a:	bf08      	it	eq
 8008c5c:	68ec      	ldreq	r4, [r5, #12]
 8008c5e:	e7ca      	b.n	8008bf6 <__swbuf_r+0x1a>
 8008c60:	4621      	mov	r1, r4
 8008c62:	4628      	mov	r0, r5
 8008c64:	f000 f81a 	bl	8008c9c <__swsetup_r>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d0cb      	beq.n	8008c04 <__swbuf_r+0x28>
 8008c6c:	f04f 37ff 	mov.w	r7, #4294967295
 8008c70:	e7ea      	b.n	8008c48 <__swbuf_r+0x6c>
 8008c72:	bf00      	nop
 8008c74:	08009480 	.word	0x08009480
 8008c78:	080094a0 	.word	0x080094a0
 8008c7c:	08009460 	.word	0x08009460

08008c80 <__ascii_wctomb>:
 8008c80:	b149      	cbz	r1, 8008c96 <__ascii_wctomb+0x16>
 8008c82:	2aff      	cmp	r2, #255	; 0xff
 8008c84:	bf85      	ittet	hi
 8008c86:	238a      	movhi	r3, #138	; 0x8a
 8008c88:	6003      	strhi	r3, [r0, #0]
 8008c8a:	700a      	strbls	r2, [r1, #0]
 8008c8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c90:	bf98      	it	ls
 8008c92:	2001      	movls	r0, #1
 8008c94:	4770      	bx	lr
 8008c96:	4608      	mov	r0, r1
 8008c98:	4770      	bx	lr
	...

08008c9c <__swsetup_r>:
 8008c9c:	4b32      	ldr	r3, [pc, #200]	; (8008d68 <__swsetup_r+0xcc>)
 8008c9e:	b570      	push	{r4, r5, r6, lr}
 8008ca0:	681d      	ldr	r5, [r3, #0]
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	b125      	cbz	r5, 8008cb2 <__swsetup_r+0x16>
 8008ca8:	69ab      	ldr	r3, [r5, #24]
 8008caa:	b913      	cbnz	r3, 8008cb2 <__swsetup_r+0x16>
 8008cac:	4628      	mov	r0, r5
 8008cae:	f7ff fd23 	bl	80086f8 <__sinit>
 8008cb2:	4b2e      	ldr	r3, [pc, #184]	; (8008d6c <__swsetup_r+0xd0>)
 8008cb4:	429c      	cmp	r4, r3
 8008cb6:	d10f      	bne.n	8008cd8 <__swsetup_r+0x3c>
 8008cb8:	686c      	ldr	r4, [r5, #4]
 8008cba:	89a3      	ldrh	r3, [r4, #12]
 8008cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cc0:	0719      	lsls	r1, r3, #28
 8008cc2:	d42c      	bmi.n	8008d1e <__swsetup_r+0x82>
 8008cc4:	06dd      	lsls	r5, r3, #27
 8008cc6:	d411      	bmi.n	8008cec <__swsetup_r+0x50>
 8008cc8:	2309      	movs	r3, #9
 8008cca:	6033      	str	r3, [r6, #0]
 8008ccc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008cd0:	81a3      	strh	r3, [r4, #12]
 8008cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd6:	e03e      	b.n	8008d56 <__swsetup_r+0xba>
 8008cd8:	4b25      	ldr	r3, [pc, #148]	; (8008d70 <__swsetup_r+0xd4>)
 8008cda:	429c      	cmp	r4, r3
 8008cdc:	d101      	bne.n	8008ce2 <__swsetup_r+0x46>
 8008cde:	68ac      	ldr	r4, [r5, #8]
 8008ce0:	e7eb      	b.n	8008cba <__swsetup_r+0x1e>
 8008ce2:	4b24      	ldr	r3, [pc, #144]	; (8008d74 <__swsetup_r+0xd8>)
 8008ce4:	429c      	cmp	r4, r3
 8008ce6:	bf08      	it	eq
 8008ce8:	68ec      	ldreq	r4, [r5, #12]
 8008cea:	e7e6      	b.n	8008cba <__swsetup_r+0x1e>
 8008cec:	0758      	lsls	r0, r3, #29
 8008cee:	d512      	bpl.n	8008d16 <__swsetup_r+0x7a>
 8008cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cf2:	b141      	cbz	r1, 8008d06 <__swsetup_r+0x6a>
 8008cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cf8:	4299      	cmp	r1, r3
 8008cfa:	d002      	beq.n	8008d02 <__swsetup_r+0x66>
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f7fe fcd7 	bl	80076b0 <_free_r>
 8008d02:	2300      	movs	r3, #0
 8008d04:	6363      	str	r3, [r4, #52]	; 0x34
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d0c:	81a3      	strh	r3, [r4, #12]
 8008d0e:	2300      	movs	r3, #0
 8008d10:	6063      	str	r3, [r4, #4]
 8008d12:	6923      	ldr	r3, [r4, #16]
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	f043 0308 	orr.w	r3, r3, #8
 8008d1c:	81a3      	strh	r3, [r4, #12]
 8008d1e:	6923      	ldr	r3, [r4, #16]
 8008d20:	b94b      	cbnz	r3, 8008d36 <__swsetup_r+0x9a>
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d2c:	d003      	beq.n	8008d36 <__swsetup_r+0x9a>
 8008d2e:	4621      	mov	r1, r4
 8008d30:	4630      	mov	r0, r6
 8008d32:	f000 f84d 	bl	8008dd0 <__smakebuf_r>
 8008d36:	89a0      	ldrh	r0, [r4, #12]
 8008d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d3c:	f010 0301 	ands.w	r3, r0, #1
 8008d40:	d00a      	beq.n	8008d58 <__swsetup_r+0xbc>
 8008d42:	2300      	movs	r3, #0
 8008d44:	60a3      	str	r3, [r4, #8]
 8008d46:	6963      	ldr	r3, [r4, #20]
 8008d48:	425b      	negs	r3, r3
 8008d4a:	61a3      	str	r3, [r4, #24]
 8008d4c:	6923      	ldr	r3, [r4, #16]
 8008d4e:	b943      	cbnz	r3, 8008d62 <__swsetup_r+0xc6>
 8008d50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d54:	d1ba      	bne.n	8008ccc <__swsetup_r+0x30>
 8008d56:	bd70      	pop	{r4, r5, r6, pc}
 8008d58:	0781      	lsls	r1, r0, #30
 8008d5a:	bf58      	it	pl
 8008d5c:	6963      	ldrpl	r3, [r4, #20]
 8008d5e:	60a3      	str	r3, [r4, #8]
 8008d60:	e7f4      	b.n	8008d4c <__swsetup_r+0xb0>
 8008d62:	2000      	movs	r0, #0
 8008d64:	e7f7      	b.n	8008d56 <__swsetup_r+0xba>
 8008d66:	bf00      	nop
 8008d68:	2000000c 	.word	0x2000000c
 8008d6c:	08009480 	.word	0x08009480
 8008d70:	080094a0 	.word	0x080094a0
 8008d74:	08009460 	.word	0x08009460

08008d78 <abort>:
 8008d78:	b508      	push	{r3, lr}
 8008d7a:	2006      	movs	r0, #6
 8008d7c:	f000 f898 	bl	8008eb0 <raise>
 8008d80:	2001      	movs	r0, #1
 8008d82:	f7f8 fe4d 	bl	8001a20 <_exit>

08008d86 <__swhatbuf_r>:
 8008d86:	b570      	push	{r4, r5, r6, lr}
 8008d88:	460e      	mov	r6, r1
 8008d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d8e:	2900      	cmp	r1, #0
 8008d90:	b096      	sub	sp, #88	; 0x58
 8008d92:	4614      	mov	r4, r2
 8008d94:	461d      	mov	r5, r3
 8008d96:	da08      	bge.n	8008daa <__swhatbuf_r+0x24>
 8008d98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	602a      	str	r2, [r5, #0]
 8008da0:	061a      	lsls	r2, r3, #24
 8008da2:	d410      	bmi.n	8008dc6 <__swhatbuf_r+0x40>
 8008da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008da8:	e00e      	b.n	8008dc8 <__swhatbuf_r+0x42>
 8008daa:	466a      	mov	r2, sp
 8008dac:	f000 f89c 	bl	8008ee8 <_fstat_r>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	dbf1      	blt.n	8008d98 <__swhatbuf_r+0x12>
 8008db4:	9a01      	ldr	r2, [sp, #4]
 8008db6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008dba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008dbe:	425a      	negs	r2, r3
 8008dc0:	415a      	adcs	r2, r3
 8008dc2:	602a      	str	r2, [r5, #0]
 8008dc4:	e7ee      	b.n	8008da4 <__swhatbuf_r+0x1e>
 8008dc6:	2340      	movs	r3, #64	; 0x40
 8008dc8:	2000      	movs	r0, #0
 8008dca:	6023      	str	r3, [r4, #0]
 8008dcc:	b016      	add	sp, #88	; 0x58
 8008dce:	bd70      	pop	{r4, r5, r6, pc}

08008dd0 <__smakebuf_r>:
 8008dd0:	898b      	ldrh	r3, [r1, #12]
 8008dd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dd4:	079d      	lsls	r5, r3, #30
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	460c      	mov	r4, r1
 8008dda:	d507      	bpl.n	8008dec <__smakebuf_r+0x1c>
 8008ddc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008de0:	6023      	str	r3, [r4, #0]
 8008de2:	6123      	str	r3, [r4, #16]
 8008de4:	2301      	movs	r3, #1
 8008de6:	6163      	str	r3, [r4, #20]
 8008de8:	b002      	add	sp, #8
 8008dea:	bd70      	pop	{r4, r5, r6, pc}
 8008dec:	ab01      	add	r3, sp, #4
 8008dee:	466a      	mov	r2, sp
 8008df0:	f7ff ffc9 	bl	8008d86 <__swhatbuf_r>
 8008df4:	9900      	ldr	r1, [sp, #0]
 8008df6:	4605      	mov	r5, r0
 8008df8:	4630      	mov	r0, r6
 8008dfa:	f7fe fcc5 	bl	8007788 <_malloc_r>
 8008dfe:	b948      	cbnz	r0, 8008e14 <__smakebuf_r+0x44>
 8008e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e04:	059a      	lsls	r2, r3, #22
 8008e06:	d4ef      	bmi.n	8008de8 <__smakebuf_r+0x18>
 8008e08:	f023 0303 	bic.w	r3, r3, #3
 8008e0c:	f043 0302 	orr.w	r3, r3, #2
 8008e10:	81a3      	strh	r3, [r4, #12]
 8008e12:	e7e3      	b.n	8008ddc <__smakebuf_r+0xc>
 8008e14:	4b0d      	ldr	r3, [pc, #52]	; (8008e4c <__smakebuf_r+0x7c>)
 8008e16:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e18:	89a3      	ldrh	r3, [r4, #12]
 8008e1a:	6020      	str	r0, [r4, #0]
 8008e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e20:	81a3      	strh	r3, [r4, #12]
 8008e22:	9b00      	ldr	r3, [sp, #0]
 8008e24:	6163      	str	r3, [r4, #20]
 8008e26:	9b01      	ldr	r3, [sp, #4]
 8008e28:	6120      	str	r0, [r4, #16]
 8008e2a:	b15b      	cbz	r3, 8008e44 <__smakebuf_r+0x74>
 8008e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e30:	4630      	mov	r0, r6
 8008e32:	f000 f86b 	bl	8008f0c <_isatty_r>
 8008e36:	b128      	cbz	r0, 8008e44 <__smakebuf_r+0x74>
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	f023 0303 	bic.w	r3, r3, #3
 8008e3e:	f043 0301 	orr.w	r3, r3, #1
 8008e42:	81a3      	strh	r3, [r4, #12]
 8008e44:	89a0      	ldrh	r0, [r4, #12]
 8008e46:	4305      	orrs	r5, r0
 8008e48:	81a5      	strh	r5, [r4, #12]
 8008e4a:	e7cd      	b.n	8008de8 <__smakebuf_r+0x18>
 8008e4c:	08008691 	.word	0x08008691

08008e50 <_malloc_usable_size_r>:
 8008e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e54:	1f18      	subs	r0, r3, #4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	bfbc      	itt	lt
 8008e5a:	580b      	ldrlt	r3, [r1, r0]
 8008e5c:	18c0      	addlt	r0, r0, r3
 8008e5e:	4770      	bx	lr

08008e60 <_raise_r>:
 8008e60:	291f      	cmp	r1, #31
 8008e62:	b538      	push	{r3, r4, r5, lr}
 8008e64:	4604      	mov	r4, r0
 8008e66:	460d      	mov	r5, r1
 8008e68:	d904      	bls.n	8008e74 <_raise_r+0x14>
 8008e6a:	2316      	movs	r3, #22
 8008e6c:	6003      	str	r3, [r0, #0]
 8008e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e76:	b112      	cbz	r2, 8008e7e <_raise_r+0x1e>
 8008e78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e7c:	b94b      	cbnz	r3, 8008e92 <_raise_r+0x32>
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f000 f830 	bl	8008ee4 <_getpid_r>
 8008e84:	462a      	mov	r2, r5
 8008e86:	4601      	mov	r1, r0
 8008e88:	4620      	mov	r0, r4
 8008e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e8e:	f000 b817 	b.w	8008ec0 <_kill_r>
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d00a      	beq.n	8008eac <_raise_r+0x4c>
 8008e96:	1c59      	adds	r1, r3, #1
 8008e98:	d103      	bne.n	8008ea2 <_raise_r+0x42>
 8008e9a:	2316      	movs	r3, #22
 8008e9c:	6003      	str	r3, [r0, #0]
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	e7e7      	b.n	8008e72 <_raise_r+0x12>
 8008ea2:	2400      	movs	r4, #0
 8008ea4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	4798      	blx	r3
 8008eac:	2000      	movs	r0, #0
 8008eae:	e7e0      	b.n	8008e72 <_raise_r+0x12>

08008eb0 <raise>:
 8008eb0:	4b02      	ldr	r3, [pc, #8]	; (8008ebc <raise+0xc>)
 8008eb2:	4601      	mov	r1, r0
 8008eb4:	6818      	ldr	r0, [r3, #0]
 8008eb6:	f7ff bfd3 	b.w	8008e60 <_raise_r>
 8008eba:	bf00      	nop
 8008ebc:	2000000c 	.word	0x2000000c

08008ec0 <_kill_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d07      	ldr	r5, [pc, #28]	; (8008ee0 <_kill_r+0x20>)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	4611      	mov	r1, r2
 8008ecc:	602b      	str	r3, [r5, #0]
 8008ece:	f7f8 fd97 	bl	8001a00 <_kill>
 8008ed2:	1c43      	adds	r3, r0, #1
 8008ed4:	d102      	bne.n	8008edc <_kill_r+0x1c>
 8008ed6:	682b      	ldr	r3, [r5, #0]
 8008ed8:	b103      	cbz	r3, 8008edc <_kill_r+0x1c>
 8008eda:	6023      	str	r3, [r4, #0]
 8008edc:	bd38      	pop	{r3, r4, r5, pc}
 8008ede:	bf00      	nop
 8008ee0:	20000318 	.word	0x20000318

08008ee4 <_getpid_r>:
 8008ee4:	f7f8 bd84 	b.w	80019f0 <_getpid>

08008ee8 <_fstat_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d07      	ldr	r5, [pc, #28]	; (8008f08 <_fstat_r+0x20>)
 8008eec:	2300      	movs	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	602b      	str	r3, [r5, #0]
 8008ef6:	f7f8 fde2 	bl	8001abe <_fstat>
 8008efa:	1c43      	adds	r3, r0, #1
 8008efc:	d102      	bne.n	8008f04 <_fstat_r+0x1c>
 8008efe:	682b      	ldr	r3, [r5, #0]
 8008f00:	b103      	cbz	r3, 8008f04 <_fstat_r+0x1c>
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	bd38      	pop	{r3, r4, r5, pc}
 8008f06:	bf00      	nop
 8008f08:	20000318 	.word	0x20000318

08008f0c <_isatty_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4d06      	ldr	r5, [pc, #24]	; (8008f28 <_isatty_r+0x1c>)
 8008f10:	2300      	movs	r3, #0
 8008f12:	4604      	mov	r4, r0
 8008f14:	4608      	mov	r0, r1
 8008f16:	602b      	str	r3, [r5, #0]
 8008f18:	f7f8 fde1 	bl	8001ade <_isatty>
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	d102      	bne.n	8008f26 <_isatty_r+0x1a>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	b103      	cbz	r3, 8008f26 <_isatty_r+0x1a>
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	bd38      	pop	{r3, r4, r5, pc}
 8008f28:	20000318 	.word	0x20000318

08008f2c <_init>:
 8008f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2e:	bf00      	nop
 8008f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f32:	bc08      	pop	{r3}
 8008f34:	469e      	mov	lr, r3
 8008f36:	4770      	bx	lr

08008f38 <_fini>:
 8008f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3a:	bf00      	nop
 8008f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3e:	bc08      	pop	{r3}
 8008f40:	469e      	mov	lr, r3
 8008f42:	4770      	bx	lr
